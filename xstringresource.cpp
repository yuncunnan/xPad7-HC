#include <assert.h>
#include <QString>
#include <QSettings>
#include "xconfig.h"
#include "xioport.h"
#include "cmbprotocol.h"
#include "xstringresource.h"
#include "servoalias.h"

QVector<QString> xStringResource::StringResource;
QVector<QString> xStringResource::AlarmResource;
QVector<QString> xStringResource::AlarmSolutionResource;
QMap<quint8, QString> xStringResource::sysType;
QMap<quint16, QString> xStringResource::inputVarName;
QMap<quint16, QString> xStringResource::inputModifyVarName;
QMap<quint16, QString> xStringResource::outputModifyVarName;
QMap<quint16, QString> xStringResource::outputVarName;
QMap<quint16, QString> xStringResource::EtherCATErrorName;	// 总线错误内容字符串资源
QVector<QString> xStringResource::DvsErrorName;	// 六轴驱控一体总线错误内容字符串资源
QVector<QString> xStringResource::HCFAErrorName;	// 禾川驱控一体总线错误内容字符串资源

QVector<QString> xStringResource::logString;

xStringResource::xStringResource(QObject *parent) : QObject(parent)
{
//	assert(AlarmResource.count() == 256);
}

xStringResource::~xStringResource()
{
}

// 初始化系统类型字符串资源
void xStringResource::initSysTypeRes(void)
{
	sysType.clear();
	// 两轴
	sysType[ROBOTARM_TYPE_DUOSV_PAD_HS] =	"SR2801B-H1";
	sysType[ROBOTARM_TYPE_DUOSV_PAD_HD] =	"SR2801B-H2";
	sysType[ROBOTARM_TYPE_DUOSV_PAD_VS] =	"SR2801B-V1";
	sysType[ROBOTARM_TYPE_DUOSV_PAD_VD] =	"SR2801B-V2";
	// 三轴
	sysType[ROBOTARM_TYPE_TRISV_PAD_S] =	"SR3801B-1";
	sysType[ROBOTARM_TYPE_TRISV_PAD_D] =	"SR3801B-2";
	sysType[ROBOTARM_TYPE_TRISV_PAD_T1S] =	"SR3802B-1";
	sysType[ROBOTARM_TYPE_TRISV_PAD_T1D] =	"SR3802B-2";
	// 六轴
	sysType[ROBOTARM_TYPE_SIXSV_PAD_A] =	"SR6801B";
	sysType[ROBOTARM_TYPE_SIXSV_PAD_B] =	"SR6802B";
	sysType[ROBOTARM_TYPE_SIXSV_PAD_C] =	"SR6803B";
    sysType[ROBOTARM_TYPE_SIXSV_PAD_YZ] =	"SR6805B";
	sysType[ROBOTARM_TYPE_SIXSV_PAD_T1D] =	"SR6806B";
    sysType[ROBOTARM_TYPE_SIXSV_PAD_E3] =	"SR6807B";
    sysType[ROBOTARM_TYPE_SIXSV_PAD_E4] =	"SR6807B";
    sysType[ROBOTARM_TYPE_SIXSV_PAD_E5] =	"SR6809B";
    sysType[ROBOTARM_TYPE_SIXSV_PAD_E6] =	"SR6809B";
    sysType[ROBOTARM_TYPE_SIXSV_PAD_E8] =	"SR6808B";
    sysType[ROBOTARM_TYPE_SIXSV_PAD_E0] =	"SR6810B";
    sysType[ROBOTARM_TYPE_SIXSV_PAD_F3] =	"SRH6807B";
    sysType[ROBOTARM_TYPE_SIXSV_PAD_F4] =	"SRH6807B";

    sysType[ROBOTARM_TYPE_SIXSV_PAD_E7] =	"SR6811B";
    sysType[ROBOTARM_TYPE_SIXSV_PAD_F7] =	"SRH6811B";
    sysType[ROBOTARM_TYPE_SIXSV_PAD_F5] =	"SRH6812B";
    sysType[ROBOTARM_TYPE_SIXSV_PAD_F6] =	"SRH6813B";
    sysType[ROBOTARM_TYPE_SIXSV_PAD_F8] =	"SRH6814B";
}

// 初始化系统通用字符串资源
void xStringResource::initStringRes(void)
{
	StringResource.clear();
	StringResource
	// STRRES_NO_STRING						0
	<< tr("不存在的字符串资源")
	// STRRES_WARN_TITLE					1
	<< tr("系统警告")
	// STRRES_SERVO_NO_MANUAL				2
	<< tr("机械手不在手动操作状态时，不能进入伺服参数设置画面！")
	// STRRES_QUERY_PARA_ERROR				3
	<< tr("从主控模块查询参数失败！\n请检查操作器和主控模块的通讯线路。")
	// STRRES_SAVE_PARA_ERROR				4
	<< tr("保存参数到主控模块失败！\n请检查操作器和主控模块的通讯线路。")
	// STRRES_SAVETIP						5
	<< tr("参数已经修改！是否需要保存参数？\n选择保存将保存参数设置并且退出；\n选择不保存将放弃参数设置并且退出；\n选择取消将放弃退出返回参数设置画面。")
	// STRRES_MANUAL						6
	<< tr("手动")
	// STRRES_STOP							7
	<< tr("停止")
	// STRRES_AUTO							8
	<< tr("自动")
	// STRRES_RUN							9
	<< tr("运行")
	// STRRES_NO_PERMISSIONS				10
	<< tr("当前用户没有足够的权限进行此项操作！\n请更改登录用户以获得足够的操作权限再进行此项操作。")
	// STRRES_USRCHG_DENY					11
	<< tr("当前登录用户没有修改本界面部分或者全部参数的权限！\n请更改登录用户以获得本界面的访问权限；或者放弃参数修改并退出。")
	// STRRES_NO_CURPGM						12
	<< tr("没有载入程序")
	// STRRES_HAS_SAVED						13
	<< tr("当前参数已经保存成功！")
	// STRRES_MATE_ERROR					14
	<< tr("操作器与主控模块类型不匹配！请检查操作器和主控模块类型。\n")
	// STRRES_SAFESW_TIP					15
	<< tr("手动安全开关没有按下！\n手动操作时请先按下手动安全开关，再进行手动操作。")
	// STRRES_SELSW_STOP					16
	<< tr("当前选择开关不在手动状态，不能进行手动操作！")
	// STRRES_SYSTEM_NO_MANUAL				17
	<< tr("机械手不在手动操作状态时，不能进入系统参数设置画面！");
}
// 初始化系统报警说明字符串资源
void xStringResource::initAlarmSolutionRes(void)
{
    AlarmSolutionResource.clear();
#if (FACTORY == FA_SHINI)
	if ((CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_E4) || (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_F4))
    {
        AlarmSolutionResource
        << tr("[000]")
        << tr("[001] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[002] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[003] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[004] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[005] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[006] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[007] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[008] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[009] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[010] 程序中循环开始指令，必须有对应的循环结束指令，检查程序，添加相应的循环结束指令或者删除多余的循环开始指令。")
        << tr("[011] 程序中循环结束指令，必须有对应的循环开始指令，检查程序，添加相应的循环开始指令或者删除多余的循环结束指令。")
        << tr("[012] 程序中条件开始指令，必须有对应的条件结束指令，检查程序，添加相应的条件结束指令或者删除多余的条件开始指令。")
        << tr("[013] 程序中必须有一条程序结束指令，检查程序，程序结束添加一条程序结束指令。")
        << tr("[014] 检查程序，分解部分不必要组合的指令，使组合中指令小于30条。")
        << tr("[015]")
        << tr("[016]")
        << tr("[017]")
        << tr("[018] 检查端口监视中是否有信号，无信号则检查主板CN1的AUTO的两个端口是否有24V电压，没有则检查外围线路。")
        << tr("[019] 检查端口监视中是否有信号，无信号则检查主板CN1的SDM的两个端口是否有24V电压，没有则检查外围线路。")
        << tr("[020] 检查端口监视中是否有信号，无信号则检查主板CN2的MID端口是否为0V电压，没有则检查外围线路。")
        << tr("[021]")
        << tr("[022] 不良品数量报警，请检查模具。")
        << tr("[023] 请切换到手动操作在更改程序。")
        << tr("[024]")
        << tr("[025]")
        << tr("[026]")
        << tr("[027] 请确认%1轴是否在安全位置，不在则移到安全位置，再关模；在，则检查安全区域信号。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[028] 请确认%1轴是否在安全区域，不在则移到安全位置，再关模；在，则检查安全区域信号。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[029] 请正确操作机械手，如需要在模内倒角，请到系统设置里，设置模内允许倒角。")
        << tr("[030] 请手动把%1轴移到安全位置或复位一次，再进入自动。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[031] 请手动把机械手移到安全位置或复位一次，再进入自动。")
        << tr("[032] 请点击标题栏程序名称，进入程序选择界面，新建或载入程序。")
        << tr("[033] 请检查扩展输入端口是否有信号。")
        << tr("[034]")
        << tr("[035]")
        << tr("[036] 请先复归原点再进行操作。")
        << tr("[037] 请确认%1轴是否在安全区域，不在则移到安全位置，再横移；在则检查安全区域信号。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[038] 请确认%1轴是否在安全位置，不在则移到安全位置，再横移；在则检查安全区域信号。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[039]")
        << tr("[040]")
        << tr("[041] 请确认注塑机已开模再操作%1轴运转，若已开模则检查主板CN1的MOP两个端口是否有24V电压。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[042] 请确认注塑机已开中板模再操作%1轴运转，若已开模则检查主板CN2的MID端口是否有0V电压。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[043] 请确认注塑机已开模再操作%1轴运转，若已开模则检查主板CN1的MOP两个端口是否有24V电压。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[044] 请确认注塑机已开中板模再操作%1轴运转，若已开模则检查主板CN2的MID端口是否有0V电压。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[045] 请确认%1轴安全区域范围，再执行%2轴运行。").arg(GetServoName(AXIS_IDX_PVER)).arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[046] 请确认%1轴安全区域范围，再执行%2轴运行。").arg(GetServoName(AXIS_IDX_PVER)).arg(GetServoName(AXIS_IDX_RVER))
        << tr("[047] 请确认伺服设置里引拔模内安全区域范围。")
        << tr("[048]")
        << tr("[049] 请确认%1轴是否在原点位置，如不在则手动移到原点位置，再自动；如已在则确认%2轴SCN4的ORG端口原点信号是否正常。").arg(GetServoName(AXIS_IDX_RVER)).arg( GetServoName(AXIS_IDX_RVER))
        << tr("[050] 请将产品密钥和机器码一并发回厂商获取激活码。")
        << tr("[051]")
        << tr("[052] 请点击标题栏的程序名，新建或载入程序，再进入自动。")
        << tr("[053]")
        << tr("[054] 请联系厂商。")
        << tr("[055] 不能删除当前程序。")
        << tr("[056]")
        << tr("[057]")
        << tr("[058] 请进入系统设置，设置允许模内倒角后，再次运行。")
        << tr("[059] 当前指令超出软件行程，请检查程序。")
        << tr("[060] 当前指令超出软件行程，请检查程序。")
        << tr("[061] 当前指令超出软件行程，请检查程序。")
        << tr("[062] 当前指令超出软件行程，请检查程序。")
        << tr("[063] 当前指令超出软件行程，请检查程序。")
        << tr("[064] 当前指令超出软件行程，请检查程序。")
        << tr("[065] 请检查%1轴模内安全区域信号是否故障，如正常请检查伺服设置里的安全区域设置范围是否在感应信号范围内。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[066] 请检查%1轴模外安全区域信号是否故障，如正常请检查伺服设置里的安全区域设置范围是否在感应信号范围内。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[067]")
        << tr("[068]")
        << tr("[069] 请检查%1轴上位待机安全区域信号是否故障，如正常请检查伺服设置里的安全区域设置范围是否在感应信号范围内。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[070] 请检查%1轴上位待机安全区域信号是否故障，如正常请检查伺服设置里的安全区域设置范围是否在感应信号范围内。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[071]")
        << tr("[072] 检查循环定位设置是否正常，若不能解决联系厂商。")
        << tr("[073]")
        << tr("[074]")
        << tr("[075] 请检查IO板的CN1的X1水平到位端口是否有0V输入，如没有则检查机械手。")
        << tr("[076] 请检查IO板的CN1的X1水平到位端口的接线，如没有问题则检查机械手。")
        << tr("[077] 请检查IO板的CN1的X2垂直到位端口是否有0V输入，如没有则检查机械手。")
        << tr("[078] 请检查IO板的CN1的X2垂直到位端口接线，如没有问题则检查机械手。")
        << tr("[079]")
        << tr("[080]")
        << tr("[081]")
        << tr("[082]")
        << tr("[083]")
        << tr("[084] 等待时间达到设定时间，请检查注塑机是否故障，如不需报警则将等待开模完指令的执行时间设成0。")
        << tr("[085]")
        << tr("[086]")
        << tr("[087]")
        << tr("[088]")
        << tr("[089]")
        << tr("[090]")
        << tr("[091]")
        << tr("[092]")
        << tr("[093]")
        << tr("[094]")
        << tr("[095]")
        << tr("[096]")
        << tr("[097] 若注塑机未急停，请检查主板CN2的ESM端口是否是0V，否则检查线路。")
        << tr("[098] 请检查手控器的急停开关是否被按下，确认安全后再开启。")
        << tr("[099] 若气压正常，请检查主板CN3的X7端口是否有0V输入，没有则检查外围线路。")
        << tr("[100] 请检查注塑机开模完成信号，是否有闪断。")
        << tr("[101] 请检查注塑机开中板模信号，是否有闪断。")
        << tr("[102] 请检查注塑机开模完成信号，是否有闪断。")
        << tr("[103] 请检查注塑机开中板模信号，是否有闪断。")
        << tr("[104] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[105] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[106] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[107] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[108] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[109] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[110] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[111] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[112] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[113] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[114] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[115] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[116] 请检查机械手的接近开关是否正常，主板SCN2的ORG端口是否有信号输入。")
        << tr("[117]")
        << tr("[118] 删除程序重新教导，若不能解决请联系厂商。")
        << tr("[119] 请检查IO板和主控板的通讯线是否正常，正常则用替换法找出问题扩展板。")
        << tr("[120] 请检查IO板和主控板的通讯线是否正常，正常则用替换法找出问题扩展板。")
        << tr("[121] 请检查IO板和主控板的通讯线是否正常，正常则用替换法找出问题扩展板。")
        << tr("[122] 请检查IO板和主控板的通讯线是否正常，正常则用替换法找出问题扩展板。")
        << tr("[123] 请检查模外下行安全检测装置是否正常，正常则检查主板CN3的X13是否有0V输入，若无则检查线路。")
        << tr("[124] 请进入系统设置界面，设置倒角垂直允许机械手横行，再进行操作。")
        << tr("[125] 请检查伺服设置里的安全区域。")
        << tr("[126] 请检查伺服设置里的安全区域。")
        << tr("[127] 请检查机械手的接近开关是否正常，主板SCN4的ORG端口是否有信号输入。")
        << tr("[128] 请确认注塑机状态，检查主板CN2的MID是否有0V输入，若无则检查线路。")
        << tr("[129] 请检查主板CN1的AUTO的两个端口是否有24V电压，没有则检查线路。")
        << tr("[130] 请检查程序，确认正臂和%1位置是否安全。").arg((GetServoName(AXIS_IDX_RHOR)))
        << tr("[131]")
        << tr("[132] 请检查注塑机状态，确认主板CN1的MOP两个端口是否有24V电压，若无则检查线路。")
        << tr("[133] 请检查注塑机状态，确认主板CN2的MID端口是否有0V电压，若无则检查线路。")
        << tr("[134] 请检查注塑机状态，确认主板CN1的MOP两个端口是否有24V电压，若无则检查线路。")
        << tr("[135] 请检查注塑机状态，确认主板CN2的MID端口是否有0V电压，若无则检查线路。")
        << tr("[136] 删除程序，重新教导。若不能解决问题请联系厂商。")
        << tr("[137] 请确认系统设置是否使用气动副臂，检查机械手是否动作，检查IO板1的X14是否有0V输入，检查线路。")
        << tr("[138] 请确认系统设置是否使用气动副臂，检查机械手是否动作，检查检查线路。")
        << tr("[139] 请确认系统设置是否使用气动副臂，检查机械手是否动作，检查IO板1的X13是否有0V输入，检查线路。")
        << tr("[140] 请确认系统设置是否使用气动副臂，检查机械手是否动作，检查检查线路。")
        << tr("[141] 请确认机械手当前位置，只有在安全区域才能下行。")
        << tr("[142] 请检查注塑机状态，确认主板CN1的MOP两个端口是否有24V电压，若无则检查线路，检查开模完信号是否有闪断。")
        << tr("[143] 请检查注塑机状态，确认主板CN2的MID端口是否有0V电压，若无则检查线路，检查信号是否有闪断。")
        << tr("[144]")
        << tr("[145]")
        << tr("[146]")
        << tr("[147]")
        << tr("[148]")
        << tr("[149]")
        << tr("[150] 请检查程序，连续路径开始要有对应的路径结束指令。")
        << tr("[151] 请联系厂商。")
        << tr("[152] 请联系厂商。")
        << tr("[153]")
        << tr("[154]")
        << tr("[155] 请确认机械手位置状态，检查线路，主板SCN3的ORG端口和CN3的X8端口。")
        << tr("[156]")
        << tr("[157] 请联系厂商。")
        << tr("[158] ")
        << tr("[159]")
        << tr("[160]")
        << tr("[161]")
        << tr("[162]")
        << tr("[163]")
        << tr("[164]")
        << tr("[165]")
        << tr("[166]")
        << tr("[167]")
        << tr("[168]")
        << tr("[169]")
        << tr("[170]")
        << tr("[171]")
        << tr("[172]")
        << tr("[173]")
        << tr("[174]")
        << tr("[175]")
        << tr("[176]")
        << tr("[177]")
        << tr("[178]")
        << tr("[179]")
        << tr("[180]")
        << tr("[181]")
        << tr("[182]")
        << tr("[183]")
        << tr("[184]")
        << tr("[185]")
        << tr("[186]")
        << tr("[187]")
        << tr("[188]")
        << tr("[189]")
        << tr("[190]")
        << tr("[191]")
        << tr("[192]")
        << tr("[193]")
        << tr("[194]")
        << tr("[195]")
        << tr("[196]")
        << tr("[197]")
        << tr("[198]")
        << tr("[199] 系统走到某一位置但是机械实际没走到。可以把安全区设置小点或模内模外电眼距离大点。")
        << tr("[200] 伺服未到达目标位置")
        << tr("[201]")
        << tr("[202]")
        << tr("[203]")
        << tr("[204]")
        << tr("[205]")
        << tr("[206]")
        << tr("[207]")
        << tr("[208]")
        << tr("[209]")
        << tr("[210]")
        << tr("[211]")
        << tr("[212]")
        << tr("[213]")
        << tr("[214]")
        << tr("[215]")
        << tr("[216]")
        << tr("[217]")
        << tr("[218]")
        << tr("[219]")
        << tr("[220]")
        << tr("[221]")
        << tr("[222]")
        << tr("[223]")
        << tr("[224]")
        << tr("[225]")
        << tr("[226]")
        << tr("[227]")
        << tr("[228]")
        << tr("[229]")
        << tr("[230]")
        << tr("[231]")
        << tr("[232]")
        << tr("[233]")
        << tr("[234]")
        << tr("[235]")
        << tr("[236]")
        << tr("[237] EtherCat总线错误")
        << tr("[238]")
        << tr("[239]")
        << tr("[240]")
        << tr("[241]手臂在模内。不允许塑机信号长输出")
        << tr("[242]")
        << tr("[243]")
        << tr("[244]")
        << tr("[245] ") + GetServoName(AXIS_IDX_PHOR) + tr("轴驱动器超温")
        << tr("[246] ") + GetServoName(AXIS_IDX_PVER) + tr("轴驱动器超温")
        << tr("[247] ") + GetServoName(AXIS_IDX_TRV) + tr("轴驱动器超温")
        << tr("[248] ") + GetServoName(AXIS_IDX_RVER) + tr("轴驱动器超温")
        << tr("[249] ") + GetServoName(AXIS_IDX_RHOR) + tr("轴驱动器超温")
        << tr("[250] ") + GetServoName(AXIS_IDX_EXT) + tr("轴驱动器超温")
        << tr("[251] 驱动器电源模块报警")
        << tr("[252]")
        << tr("[253]")
        << tr("[254]")
        << tr("[255]")
        << tr("[256]")
        << tr("[257]")
        << tr("[258]")
        << tr("[259]")
        << tr("[260]%1轴跟随误差过大").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[261]%1轴跟随误差过大").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[262]%1轴跟随误差过大").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[263]%1轴跟随误差过大").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[264]%1轴跟随误差过大").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[265]%1轴跟随误差过大").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[266]")
        << tr("[267]")
        << tr("[268]")
        << tr("[269]")
        << tr("[270]")
        << tr("[271]")
        << tr("[272]")
        << tr("[273]")
        << tr("[274]")
        << tr("[275]")
        << tr("[276]")
        << tr("[277]")
        << tr("[278]")
        << tr("[279]")
        << tr("[280]")
        << tr("[281]")
        << tr("[282]")
        << tr("[283]")
        << tr("[284]")
        << tr("[285]")
        << tr("[286]")
        << tr("[287]")
        << tr("[288]")
        << tr("[289]")
        << tr("[290]")
        << tr("[291]")
        << tr("[292]")
        << tr("[293]")
        << tr("[294]")
        << tr("[295]")
        << tr("[296]")
        << tr("[297]")
        << tr("[298]")
        << tr("[299]")
        << tr("[300]")
        << tr("[301]")
        << tr("[302]")
        << tr("[303]")
        << tr("[304]")
        << tr("[305]")
        << tr("[306]")
        << tr("[307]")
        << tr("[308]")
        << tr("[309]")
        << tr("[310]");
    }
    else
    {
        AlarmSolutionResource
        << tr("[000]")
        << tr("[001] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[002] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[003] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[004] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[005] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[006] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[007] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[008] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[009] 删除后重新添加指令，仍无效则请联系厂家。")
        << tr("[010] 程序中循环开始指令，必须有对应的循环结束指令，检查程序，添加相应的循环结束指令或者删除多余的循环开始指令。")
        << tr("[011] 程序中循环结束指令，必须有对应的循环开始指令，检查程序，添加相应的循环开始指令或者删除多余的循环结束指令。")
        << tr("[012] 程序中条件开始指令，必须有对应的条件结束指令，检查程序，添加相应的条件结束指令或者删除多余的条件开始指令。")
        << tr("[013] 程序中必须有一条程序结束指令，检查程序，程序结束添加一条程序结束指令。")
        << tr("[014] 检查程序，分解部分不必要组合的指令，使组合中指令小于30条。")
        << tr("[015]")
        << tr("[016]")
        << tr("[017]")
        << tr("[018] 检查端口监视中是否有信号，无信号则检查主板CN1的AUTO的两个端口是否有24V电压，没有则检查外围线路。")
        << tr("[019] 检查端口监视中是否有信号，无信号则检查主板CN1的SDM的两个端口是否有24V电压，没有则检查外围线路。")
        << tr("[020] 检查端口监视中是否有信号，无信号则检查主板CN2的MID端口是否为0V电压，没有则检查外围线路。")
        << tr("[021]")
        << tr("[022] 不良品数量报警，请检查模具。")
        << tr("[023] 请切换到手动操作在更改程序。")
        << tr("[024]")
        << tr("[025]")
        << tr("[026]")
        << tr("[027] 请确认%1轴是否在安全位置，不在则移到安全位置，再关模；在，则检查安全区域信号。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[028] 请确认%1轴是否在安全区域，不在则移到安全位置，再关模；在，则检查安全区域信号。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[029] 请正确操作机械手，如需要在模内倒角，请到系统设置里，设置模内允许倒角。")
        << tr("[030] 请手动把%1轴移到安全位置或复位一次，再进入自动。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[031] 请手动把机械手移到安全位置或复位一次，再进入自动。")
        << tr("[032] 请点击标题栏程序名称，进入程序选择界面，新建或载入程序。")
        << tr("[033] 请检查扩展输入端口是否有信号。")
        << tr("[034]")
        << tr("[035]")
        << tr("[036] 请先复归原点再进行操作。")
        << tr("[037] 请确认%1轴是否在安全区域，不在则移到安全位置，再横移；在则检查安全区域信号。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[038] 请确认%1轴是否在安全位置，不在则移到安全位置，再横移；在则检查安全区域信号。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[039]")
        << tr("[040]")
        << tr("[041] 请确认注塑机已开模再操作%1轴运转，若已开模则检查主板CN1的MOP两个端口是否有24V电压。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[042] 请确认注塑机已开中板模再操作%1轴运转，若已开模则检查主板CN2的MID端口是否有0V电压。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[043] 请确认注塑机已开模再操作%1轴运转，若已开模则检查主板CN1的MOP两个端口是否有24V电压。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[044] 请确认注塑机已开中板模再操作%1轴运转，若已开模则检查主板CN2的MID端口是否有0V电压。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[045] 请确认%1轴安全区域范围，再执行%2轴运行。").arg(GetServoName(AXIS_IDX_PVER)).arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[046] 请确认%1轴安全区域范围，再执行%2轴运行。").arg(GetServoName(AXIS_IDX_PVER)).arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[047] 请确认伺服设置里引拔模内安全区域范围。")
        << tr("[048]")
        << tr("[049] 请确认%1轴是否在原点位置，如不在则手动移到原点位置，再自动；如已在则确认%1轴SCN4的ORG端口原点信号是否正常。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[050] 请将产品密钥和机器码一并发回厂商获取激活码。")
        << tr("[051]")
        << tr("[052] 请点击标题栏的程序名，新建或载入程序，再进入自动。")
        << tr("[053]")
        << tr("[054] 请联系厂商。")
        << tr("[055] 不能删除当前程序。")
        << tr("[056]")
        << tr("[057]")
        << tr("[058] 请进入系统设置，设置允许模内倒角后，再次运行。")
        << tr("[059] 当前指令超出软件行程，请检查程序。")
        << tr("[060] 当前指令超出软件行程，请检查程序。")
        << tr("[061] 当前指令超出软件行程，请检查程序。")
        << tr("[062] 当前指令超出软件行程，请检查程序。")
        << tr("[063] 当前指令超出软件行程，请检查程序。")
        << tr("[064] 当前指令超出软件行程，请检查程序。")
        << tr("[065] 请检查%1轴模内安全区域信号是否故障，如正常请检查伺服设置里的安全区域设置范围是否在感应信号范围内。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[066] 请检查%1轴模外安全区域信号是否故障，如正常请检查伺服设置里的安全区域设置范围是否在感应信号范围内。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[067]")
        << tr("[068]")
        << tr("[069] 请检查%1轴上位待机安全区域信号是否故障，如正常请检查伺服设置里的安全区域设置范围是否在感应信号范围内。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[070] 请检查%1轴上位待机安全区域信号是否故障，如正常请检查伺服设置里的安全区域设置范围是否在感应信号范围内。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[071]")
        << tr("[072] 检查循环定位设置是否正常，若不能解决联系厂商。")
        << tr("[073]")
        << tr("[074]")
        << tr("[075] 请检查IO板的CN1的X1水平到位端口是否有0V输入，如没有则检查机械手。")
        << tr("[076] 请检查IO板的CN1的X1水平到位端口的接线，如没有问题则检查机械手。")
        << tr("[077] 请检查IO板的CN1的X2垂直到位端口是否有0V输入，如没有则检查机械手。")
        << tr("[078] 请检查IO板的CN1的X2垂直到位端口接线，如没有问题则检查机械手。")
        << tr("[079]")
        << tr("[080]")
        << tr("[081]")
        << tr("[082]")
        << tr("[083]")
        << tr("[084] 等待时间达到设定时间，请检查注塑机是否故障，如不需报警则将等待开模完指令的执行时间设成0。")
        << tr("[085]")
        << tr("[086]")
        << tr("[087]")
        << tr("[088]")
        << tr("[089]")
        << tr("[090]")
        << tr("[091]")
        << tr("[092]")
        << tr("[093]")
        << tr("[094]")
        << tr("[095]")
        << tr("[096]")
        << tr("[097] 若注塑机未急停，请检查主板CN2的ESM端口是否是0V，否则检查线路。")
        << tr("[098] 请检查手控器的急停开关是否被按下，确认安全后再开启。")
        << tr("[099] 若气压正常，请检查主板CN3的X7端口是否有0V输入，没有则检查外围线路。")
        << tr("[100] 请检查注塑机开模完成信号，是否有闪断。")
        << tr("[101] 请检查注塑机开中板模信号，是否有闪断。")
        << tr("[102] 请检查注塑机开模完成信号，是否有闪断。")
        << tr("[103] 请检查注塑机开中板模信号，是否有闪断。")
        << tr("[104] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[105] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[106] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[107] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[108] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[109] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[110] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[111] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[112] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[113] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[114] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[115] 请确认伺服位置，再进调位操作反向运行。")
        << tr("[116] 请检查机械手的接近开关是否正常，主板SCN2的ORG端口是否有信号输入。")
        << tr("[117]")
        << tr("[118] 删除程序重新教导，若不能解决请联系厂商。")
        << tr("[119] 请检查IO板和主控板的通讯线是否正常，正常则用替换法找出问题扩展板。")
        << tr("[120] 请检查IO板和主控板的通讯线是否正常，正常则用替换法找出问题扩展板。")
        << tr("[121] 请检查IO板和主控板的通讯线是否正常，正常则用替换法找出问题扩展板。")
        << tr("[122] 请检查IO板和主控板的通讯线是否正常，正常则用替换法找出问题扩展板。")
        << tr("[123] 请检查模外下行安全检测装置是否正常，正常则检查主板CN3的X13是否有0V输入，若无则检查线路。")
        << tr("[124] 请进入系统设置界面，设置倒角垂直允许机械手横行，再进行操作。")
        << tr("[125] 请检查伺服设置里的安全区域。")
        << tr("[126] 请检查伺服设置里的安全区域。")
        << tr("[127] 请检查机械手的接近开关是否正常，主板SCN4的ORG端口是否有信号输入。")
        << tr("[128] 请确认注塑机状态，检查主板CN2的MID是否有0V输入，若无则检查线路。")
        << tr("[129] 请检查主板CN1的AUTO的两个端口是否有24V电压，没有则检查线路。")
        << tr("[130] 请检查程序，确认正臂和%1位置是否安全。").arg((GetServoName(AXIS_IDX_RHOR)))
        << tr("[131]")
        << tr("[132] 请检查注塑机状态，确认主板CN1的MOP两个端口是否有24V电压，若无则检查线路。")
        << tr("[133] 请检查注塑机状态，确认主板CN2的MID端口是否有0V电压，若无则检查线路。")
        << tr("[134] 请检查注塑机状态，确认主板CN1的MOP两个端口是否有24V电压，若无则检查线路。")
        << tr("[135] 请检查注塑机状态，确认主板CN2的MID端口是否有0V电压，若无则检查线路。")
        << tr("[136] 删除程序，重新教导。若不能解决问题请联系厂商。")
        << tr("[137] 请确认系统设置是否使用气动副臂，检查机械手是否动作，检查IO板1的X14是否有0V输入，检查线路。")
        << tr("[138] 请确认系统设置是否使用气动副臂，检查机械手是否动作，检查检查线路。")
        << tr("[139] 请确认系统设置是否使用气动副臂，检查机械手是否动作，检查IO板1的X13是否有0V输入，检查线路。")
        << tr("[140] 请确认系统设置是否使用气动副臂，检查机械手是否动作，检查检查线路。")
        << tr("[141] 请确认机械手当前位置，只有在安全区域才能下行。")
        << tr("[142] 请检查注塑机状态，确认主板CN1的MOP两个端口是否有24V电压，若无则检查线路，检查开模完信号是否有闪断。")
        << tr("[143] 请检查注塑机状态，确认主板CN2的MID端口是否有0V电压，若无则检查线路，检查信号是否有闪断。")
        << tr("[144]")
        << tr("[145]")
        << tr("[146]")
        << tr("[147]")
        << tr("[148]")
        << tr("[149]")
        << tr("[150] 请检查程序，连续路径开始要有对应的路径结束指令。")
        << tr("[151] 请联系厂商。")
        << tr("[152] 请联系厂商。")
        << tr("[153]")
        << tr("[154]")
        << tr("[155] 请确认机械手位置状态，检查线路，主板SCN3的ORG端口和CN3的X8端口。")
        << tr("[156]")
        << tr("[157] 请联系厂商。")
        << tr("[158]")
        << tr("[159]")
        << tr("[160]")
        << tr("[161]")
        << tr("[162]")
        << tr("[163]")
        << tr("[164]")
        << tr("[165]")
        << tr("[166]")
        << tr("[167]")
        << tr("[168]")
        << tr("[169]")
        << tr("[170]")
        << tr("[171]")
        << tr("[172]")
        << tr("[173]")
        << tr("[174]")
        << tr("[175]")
        << tr("[176]")
        << tr("[177]")
        << tr("[178]")
        << tr("[179]")
        << tr("[180]")
        << tr("[181]")
        << tr("[182]")
        << tr("[183]")
        << tr("[184]")
        << tr("[185]")
        << tr("[186]")
        << tr("[187]")
        << tr("[188]")
        << tr("[189]")
        << tr("[190]")
        << tr("[191]")
        << tr("[192]")
        << tr("[193]")
        << tr("[194]")
        << tr("[195]")
        << tr("[196]")
        << tr("[197]")
        << tr("[198]")
        << tr("[199] 系统走到某一位置但是机械实际没走到。可以把安全区设置小点或模内模外电眼距离大点。")
        << tr("[200] 伺服未到达目标位置")
        << tr("[201]")
        << tr("[202]")
        << tr("[203]")
        << tr("[204]")
        << tr("[205]")
        << tr("[206]")
        << tr("[207]")
        << tr("[208]")
        << tr("[209]")
        << tr("[210]")
        << tr("[211]")
        << tr("[212]")
        << tr("[213]")
        << tr("[214]")
        << tr("[215]")
        << tr("[216]")
        << tr("[217]")
        << tr("[218]")
        << tr("[219]")
        << tr("[220]")
        << tr("[221]")
        << tr("[222]")
        << tr("[223]")
        << tr("[224]")
        << tr("[225]")
        << tr("[226]")
        << tr("[227]")
        << tr("[228]")
        << tr("[229]")
        << tr("[230]")
        << tr("[231]")
        << tr("[232]")
        << tr("[233]")
        << tr("[234]")
        << tr("[235]")
        << tr("[236]")
        << tr("[237] EtherCat总线错误")
        << tr("[238]")
        << tr("[239]")
        << tr("[240]")
        << tr("[241]手臂在模内。不允许塑机信号长输出")
        << tr("[242]")
        << tr("[243]")
        << tr("[244]")
        << tr("[245] ") + GetServoName(AXIS_IDX_PHOR) + tr("轴驱动器超温")
        << tr("[246] ") + GetServoName(AXIS_IDX_PVER) + tr("轴驱动器超温")
        << tr("[247] ") + GetServoName(AXIS_IDX_TRV) + tr("轴驱动器超温")
        << tr("[248] ") + GetServoName(AXIS_IDX_RVER) + tr("轴驱动器超温")
        << tr("[249] ") + GetServoName(AXIS_IDX_RHOR) + tr("轴驱动器超温")
        << tr("[250] ") + GetServoName(AXIS_IDX_EXT) + tr("轴驱动器超温")
        << tr("[251] 驱动器电源模块报警")
        << tr("[252]")
        << tr("[253]")
        << tr("[254]")
        << tr("[255]")
        << tr("[256]")
        << tr("[257]")
        << tr("[258]")
        << tr("[259]")
        << tr("[260] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[261] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[262] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[263] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[264] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[265] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[266]")
        << tr("[267]")
        << tr("[268]")
        << tr("[269]")
        << tr("[270]")
        << tr("[271]")
        << tr("[272]")
        << tr("[273]")
        << tr("[274]")
        << tr("[275]")
        << tr("[276]")
        << tr("[277]")
        << tr("[278]")
        << tr("[279]")
        << tr("[280]")
        << tr("[281]")
        << tr("[282]")
        << tr("[283]")
        << tr("[284]")
        << tr("[285]")
        << tr("[286]")
        << tr("[287]")
        << tr("[288]")
        << tr("[289]")
        << tr("[290]")
        << tr("[291]")
        << tr("[292]")
        << tr("[293]")
        << tr("[294]")
        << tr("[295]")
        << tr("[296]")
        << tr("[297]")
        << tr("[298]")
        << tr("[299]")
        << tr("[300]")
        << tr("[301]")
        << tr("[302]")
        << tr("[303]")
        << tr("[304]")
        << tr("[305]")
        << tr("[306]")
        << tr("[307]")
        << tr("[308]")
        << tr("[309]")
        << tr("[310]");
    }
#else
    AlarmSolutionResource
    << tr("[000]")
    << tr("[001] 删除后重新添加指令，仍无效则请联系厂家。")
    << tr("[002] 删除后重新添加指令，仍无效则请联系厂家。")
    << tr("[003] 删除后重新添加指令，仍无效则请联系厂家。")
    << tr("[004] 删除后重新添加指令，仍无效则请联系厂家。")
    << tr("[005] 删除后重新添加指令，仍无效则请联系厂家。")
    << tr("[006] 删除后重新添加指令，仍无效则请联系厂家。")
    << tr("[007] 删除后重新添加指令，仍无效则请联系厂家。")
    << tr("[008] 删除后重新添加指令，仍无效则请联系厂家。")
    << tr("[009] 删除后重新添加指令，仍无效则请联系厂家。")
    << tr("[010] 程序中循环开始指令，必须有对应的循环结束指令，检查程序，添加相应的循环结束指令或者删除多余的循环开始指令。")
    << tr("[011] 程序中循环结束指令，必须有对应的循环开始指令，检查程序，添加相应的循环开始指令或者删除多余的循环结束指令。")
    << tr("[012] 程序中条件开始指令，必须有对应的条件结束指令，检查程序，添加相应的条件结束指令或者删除多余的条件开始指令。")
    << tr("[013] 程序中必须有一条程序结束指令，检查程序，程序结束添加一条程序结束指令。")
    << tr("[014] 检查程序，分解部分不必要组合的指令，使组合中指令小于30条。")
    << tr("[015]")
    << tr("[016]")
    << tr("[017]")
    << tr("[018] 检查端口监视中是否有信号，无信号则检查主板CN1的AUTO的两个端口是否有24V电压，没有则检查外围线路。")
    << tr("[019] 检查端口监视中是否有信号，无信号则检查主板CN1的SDM的两个端口是否有24V电压，没有则检查外围线路。")
    << tr("[020] 检查端口监视中是否有信号，无信号则检查主板CN2的MID端口是否为0V电压，没有则检查外围线路。")
    << tr("[021]")
    << tr("[022] 不良品数量报警，请检查模具。")
    << tr("[023] 请切换到手动操作在更改程序。")
    << tr("[024]")
    << tr("[025]")
    << tr("[026]")
    << tr("[027] 请确认%1是否在安全位置，不在则移到安全位置，再关模；在，则检查%2安全区域信号。").arg(GetServoName(AXIS_IDX_RVER)).arg(GetServoName(AXIS_IDX_RVER))
    << tr("[028] 请确认正臂上下是否在安全区域，不在则移到安全位置，再关模；在，则检查正臂上下安全区域信号。")
    << tr("[029] 请正确操作机械手，如需要在模内倒角，请到系统设置里，设置模内允许倒角。")
    << tr("[030] 请手动把%1轴移到安全位置或复位一次，再进入自动。").arg(GetServoName(AXIS_IDX_PVER))
    << tr("[031] 请手动把机械手移到安全位置或复位一次，再进入自动。")
    << tr("[032] 请点击标题栏程序名称，进入程序选择界面，新建或载入程序。")
    << tr("[033] 请检查扩展输入端口是否有信号。")
    << tr("[034]")
    << tr("[035]")
    << tr("[036] 请先复归原点再进行操作。")
    << tr("[037] 请确认正臂上下是否在安全区域，不在则移到安全位置，再横移；在则检查正臂上下安全区域信号。")
    << tr("[038] 请确认%1是否在安全位置，不在则移到安全位置，再横移；在则检查%1安全区域信号。").arg(GetServoName(AXIS_IDX_RVER))
    << tr("[039]")
    << tr("[040]")
    << tr("[041] 请确认注塑机已开模再操作%1轴运转，若已开模则检查主板CN1的MOP两个端口是否有24V电压。").arg(GetServoName(AXIS_IDX_PVER))
    << tr("[042] 请确认注塑机已开中板模再操作%1轴运转，若已开模则检查主板CN2的MID端口是否有0V电压。").arg(GetServoName(AXIS_IDX_PVER))
    << tr("[043] 请确认注塑机已开模再操作%1轴运转，若已开模则检查主板CN1的MOP两个端口是否有24V电压。").arg(GetServoName(AXIS_IDX_PVER))
    << tr("[044] 请确认注塑机已开中板模再操作%1轴运转，若已开模则检查主板CN2的MID端口是否有0V电压。").arg(GetServoName(AXIS_IDX_PVER))
    << tr("[045] 请确认%1轴安全区域范围，再执行%2轴运行。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_PVER))
    << tr("[046] 请确认%1轴安全区域范围，再执行%2轴运行。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_PVER))
    << tr("[047] 请确认伺服设置里引拔模内安全区域范围。")
    << tr("[048]")
    << tr("[049] 请确认%1轴是否在原点位置，如不在则手动移到原点位置，再自动；如已在则确认%1SCN4的ORG端口原点信号是否正常。").arg(GetServoName(AXIS_IDX_RVER))
    << tr("[050] 请将产品密钥和机器码一并发回厂商获取激活码。")
    << tr("[051]")
    << tr("[052] 请点击标题栏的程序名，新建或载入程序，再进入自动。")
    << tr("[053]")
    << tr("[054] 请联系厂商。")
    << tr("[055] 不能删除当前程序。")
    << tr("[056]")
    << tr("[057]")
    << tr("[058] 请进入系统设置，设置允许模内倒角后，再次运行。")
    << tr("[059] 当前指令超出软件行程，请检查程序。")
    << tr("[060] 当前指令超出软件行程，请检查程序。")
    << tr("[061] 当前指令超出软件行程，请检查程序。")
    << tr("[062] 当前指令超出软件行程，请检查程序。")
    << tr("[063] 当前指令超出软件行程，请检查程序。")
    << tr("[064] 当前指令超出软件行程，请检查程序。")
    << tr("[065] 请检查横行模内安全区域信号是否故障，如正常请检查伺服设置里的安全区域设置范围是否在感应信号范围内。")
    << tr("[066] 请检查横行模外安全区域信号是否故障，如正常请检查伺服设置里的安全区域设置范围是否在感应信号范围内。")
    << tr("[067]")
    << tr("[068]")
    << tr("[069] 请检查%1轴上位待机安全区域信号是否故障，如正常请检查伺服设置里的安全区域设置范围是否在感应信号范围内。").arg(GetServoName(AXIS_IDX_PVER))
    << tr("[070] 请检查%1轴上位待机安全区域信号是否故障，如正常请检查伺服设置里的安全区域设置范围是否在感应信号范围内。").arg(GetServoName(AXIS_IDX_RVER))
    << tr("[071]")
    << tr("[072] 检查循环定位设置是否正常，若不能解决联系厂商。")
    << tr("[073]")
    << tr("[074]")
    << tr("[075] 请检查IO板的CN1的X1水平到位端口是否有0V输入，如没有则检查机械手。")
    << tr("[076] 请检查IO板的CN1的X1水平到位端口的接线，如没有问题则检查机械手。")
    << tr("[077] 请检查IO板的CN1的X2垂直到位端口是否有0V输入，如没有则检查机械手。")
    << tr("[078] 请检查IO板的CN1的X2垂直到位端口接线，如没有问题则检查机械手。")
    << tr("[079]")
    << tr("[080]")
    << tr("[081]")
    << tr("[082]")
    << tr("[083]")
    << tr("[084] 等待时间达到设定时间，请检查注塑机是否故障，如不需报警则将等待开模完指令的执行时间设成0。")
    << tr("[085]")
    << tr("[086]")
    << tr("[087]")
    << tr("[088]")
    << tr("[089]")
    << tr("[090]")
    << tr("[091]")
    << tr("[092]")
    << tr("[093]")
    << tr("[094]")
    << tr("[095]")
    << tr("[096]")
    << tr("[097] 若注塑机未急停，请检查主板CN2的ESM端口是否是0V，否则检查线路。")
    << tr("[098] 请检查手控器的急停开关是否被按下，确认安全后再开启。")
    << tr("[099] 若气压正常，请检查主板CN3的X7端口是否有0V输入，没有则检查外围线路。")
    << tr("[100] 请检查注塑机开模完成信号，是否有闪断。")
    << tr("[101] 请检查注塑机开中板模信号，是否有闪断。")
    << tr("[102] 请检查注塑机开模完成信号，是否有闪断。")
    << tr("[103] 请检查注塑机开中板模信号，是否有闪断。")
    << tr("[104] 请确认伺服位置，再进调位操作反向运行。")
    << tr("[105] 请确认伺服位置，再进调位操作反向运行。")
    << tr("[106] 请确认伺服位置，再进调位操作反向运行。")
    << tr("[107] 请确认伺服位置，再进调位操作反向运行。")
    << tr("[108] 请确认伺服位置，再进调位操作反向运行。")
    << tr("[109] 请确认伺服位置，再进调位操作反向运行。")
    << tr("[110] 请确认伺服位置，再进调位操作反向运行。")
    << tr("[111] 请确认伺服位置，再进调位操作反向运行。")
    << tr("[112] 请确认伺服位置，再进调位操作反向运行。")
    << tr("[113] 请确认伺服位置，再进调位操作反向运行。")
    << tr("[114] 请确认伺服位置，再进调位操作反向运行。")
    << tr("[115] 请确认伺服位置，再进调位操作反向运行。")
    << tr("[116] 请检查机械手的接近开关是否正常，主板SCN2的ORG端口是否有信号输入。")
    << tr("[117]")
    << tr("[118] 删除程序重新教导，若不能解决请联系厂商。")
    << tr("[119] 请检查IO板和主控板的通讯线是否正常，正常则用替换法找出问题扩展板。")
    << tr("[120] 请检查IO板和主控板的通讯线是否正常，正常则用替换法找出问题扩展板。")
    << tr("[121] 请检查IO板和主控板的通讯线是否正常，正常则用替换法找出问题扩展板。")
    << tr("[122] 请检查IO板和主控板的通讯线是否正常，正常则用替换法找出问题扩展板。")
    << tr("[123] 请检查模外下行安全检测装置是否正常，正常则检查主板CN3的X13是否有0V输入，若无则检查线路。")
    << tr("[124] 请进入系统设置界面，设置倒角垂直允许机械手横行，再进行操作。")
    << tr("[125] 请检查伺服设置里的安全区域。")
    << tr("[126] 请检查伺服设置里的安全区域。")
    << tr("[127] 请检查机械手的接近开关是否正常，主板SCN4的ORG端口是否有信号输入。")
    << tr("[128] 请确认注塑机状态，检查主板CN2的MID是否有0V输入，若无则检查线路。")
    << tr("[129] 请检查主板CN1的AUTO的两个端口是否有24V电压，没有则检查线路。")
    << tr("[130] 请检查程序，确认正臂和%1位置是否安全。").arg((GetServoName(AXIS_IDX_RHOR)))
    << tr("[131]")
    << tr("[132] 请检查注塑机状态，确认主板CN1的MOP两个端口是否有24V电压，若无则检查线路。")
    << tr("[133] 请检查注塑机状态，确认主板CN2的MID端口是否有0V电压，若无则检查线路。")
    << tr("[134] 请检查注塑机状态，确认主板CN1的MOP两个端口是否有24V电压，若无则检查线路。")
    << tr("[135] 请检查注塑机状态，确认主板CN2的MID端口是否有0V电压，若无则检查线路。")
    << tr("[136] 删除程序，重新教导。若不能解决问题请联系厂商。")
    << tr("[137] 请确认系统设置是否使用气动副臂，检查机械手是否动作，检查副臂气动上行输入是否有0V输入，检查线路。")
    << tr("[138] 请确认系统设置是否使用气动副臂，检查机械手是否动作，检查检查线路。")
    << tr("[139] 请确认系统设置是否使用气动副臂，检查机械手是否动作，检查副臂气动上行输入是否有0V输入，检查线路。")
    << tr("[140] 请确认系统设置是否使用气动副臂，检查机械手是否动作，检查检查线路。")
    << tr("[141] 请确认机械手当前位置，只有在安全区域才能下行。")
    << tr("[142] 请检查注塑机状态，确认主板CN1的MOP两个端口是否有24V电压，若无则检查线路，检查开模完信号是否有闪断。")
    << tr("[143] 请检查注塑机状态，确认主板CN2的MID端口是否有0V电压，若无则检查线路，检查信号是否有闪断。")
    << tr("[144]")
    << tr("[145]")
    << tr("[146]")
    << tr("[147]")
    << tr("[148]")
    << tr("[149]")
    << tr("[150] 请检查程序，连续路径开始要有对应的路径结束指令。")
    << tr("[151] 请联系厂商。")
    << tr("[152] 请联系厂商。")
    << tr("[153]")
    << tr("[154]")
    << tr("[155] 请确认机械手位置状态，检查线路，主板SCN3的ORG端口和CN3的X8端口。")
    << tr("[156]")
    << tr("[157] 请联系厂商。")
    << tr("[158]")
    << tr("[159]")
    << tr("[160]")
    << tr("[161]")
    << tr("[162]")
    << tr("[163]")
    << tr("[164]")
    << tr("[165]")
    << tr("[166]")
    << tr("[167]")
    << tr("[168]")
    << tr("[169]")
    << tr("[170]")
    << tr("[171]")
    << tr("[172]")
    << tr("[173]")
    << tr("[174]")
    << tr("[175]")
    << tr("[176]")
    << tr("[177]")
    << tr("[178]")
    << tr("[179]")
    << tr("[180]")
    << tr("[181]")
    << tr("[182]")
    << tr("[183]")
    << tr("[184]")
    << tr("[185]")
    << tr("[186]")
    << tr("[187]")
    << tr("[188]")
    << tr("[189]")
    << tr("[190]")
    << tr("[191]")
    << tr("[192]")
    << tr("[193]")
    << tr("[194]")
    << tr("[195]")
    << tr("[196]")
    << tr("[197]")
    << tr("[198]")
    << tr("[199] 系统走到某一位置但是机械实际没走到。可以把安全区设置小点或模内模外电眼距离大点。")
    << tr("[200] 伺服未到达目标位置")
    << tr("[201]")
    << tr("[202]")
    << tr("[203]")
    << tr("[204]")
    << tr("[205]")
    << tr("[206]")
    << tr("[207]")
    << tr("[208]")
    << tr("[209]")
    << tr("[210]")
    << tr("[211]")
    << tr("[212]")
    << tr("[213]")
    << tr("[214]")
    << tr("[215]")
    << tr("[216]")
    << tr("[217]")
    << tr("[218]")
    << tr("[219]")
    << tr("[220]")
    << tr("[221]")
    << tr("[222]")
    << tr("[223]")
    << tr("[224]")
    << tr("[225]")
    << tr("[226]")
    << tr("[227]")
    << tr("[228]")
    << tr("[229]")
    << tr("[230]")
    << tr("[231]")
    << tr("[232]")
    << tr("[233]")
    << tr("[234]")
    << tr("[235]")
    << tr("[236]")
    << tr("[237] EtherCat总线错误")
    << tr("[238] 绝对值编码器电池没电或掉线,需要在【伺服设置】【原点】里重新设置绝对值编码器原点")
    << tr("[239]")
    << tr("[240]")
    << tr("[241]手臂在模内。不允许塑机信号长输出")
    << tr("[242]手臂进入模内，但没有X11信号")
    << tr("[243]")
    << tr("[244]")
    << tr("[245] ") + GetServoName(AXIS_IDX_PHOR) + tr("轴驱动器超温")
    << tr("[246] ") + GetServoName(AXIS_IDX_PVER) + tr("轴驱动器超温")
    << tr("[247] ") + GetServoName(AXIS_IDX_TRV) + tr("轴驱动器超温")
    << tr("[248] ") + GetServoName(AXIS_IDX_RVER) + tr("轴驱动器超温")
    << tr("[249] ") + GetServoName(AXIS_IDX_RHOR) + tr("轴驱动器超温")
    << tr("[250] ") + GetServoName(AXIS_IDX_EXT) + tr("轴驱动器超温")
    << tr("[251]")
    << tr("[252]")
    << tr("[253]")
    << tr("[254]")
    << tr("[255]")
    << tr("[256]")
    << tr("[257]")
    << tr("[258]")
    << tr("[259]")
    << tr("[260] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_PHOR))
    << tr("[261] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_PVER))
    << tr("[262] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_TRV))
    << tr("[263] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_RVER))
    << tr("[264] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_RHOR))
    << tr("[265] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_EXT))
    << tr("[266]")
    << tr("[267]")
    << tr("[268]")
    << tr("[269]")
    << tr("[270]")
    << tr("[271]")
    << tr("[272]")
    << tr("[273]")
    << tr("[274]")
    << tr("[275]")
    << tr("[276]")
    << tr("[277]")
    << tr("[278]")
    << tr("[279]")
    << tr("[280]")
    << tr("[281]")
    << tr("[282]")
    << tr("[283]")
    << tr("[284]")
    << tr("[285]")
    << tr("[286]")
    << tr("[287]")
    << tr("[288]")
    << tr("[289]")
    << tr("[290]")
    << tr("[291]")
    << tr("[292]")
    << tr("[293]")
    << tr("[294]")
    << tr("[295]")
    << tr("[296]")
    << tr("[297]")
    << tr("[298]")
    << tr("[299]")
    << tr("[300]")
    << tr("[301]")
    << tr("[302]")
    << tr("[303]")
    << tr("[304]")
    << tr("[305]")
    << tr("[306]")
    << tr("[307]")
    << tr("[308]")
    << tr("[309]")
    << tr("[310]");
#endif
}

// 初始化系统报警字符串资源
void xStringResource::initAlarmRes(void)
{
    // 六轴单臂、高速六轴单臂 / 压铸 / 六轴双臂、高速六轴双臂
	AlarmResource.clear();
    if ((CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_E4) || (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_F4))
    {
        AlarmResource
        << tr("[000] 没有任何提示或者报警。")
        << tr("[001] 无效的气动正臂动作。")
#if FACTORY == FA_SINROBOT_JC
        << tr("[002] 无效的机床指令。")
#else
        << tr("[002] 无效的注塑机指令。")
#endif
        << tr("[003] 无效的IF条件指令。")
        << tr("[004] 无效的系统运行方式。")
        << tr("[005] 无效的系统状态。")
        << tr("[006] 无效的指令参数。")
        << tr("[007] 无效的指令。")
        << tr("[008] 无效的扩展类型。")
        << tr("[009]")
        << tr("[010] [FOR]指令格式不匹配，缺少[ENDFOR]。")
        << tr("[011] [FOR]指令格式不匹配，缺少[FOR]。")
        << tr("[012] [IF]指令格式错误，缺少[ENDIF]。")
        << tr("[013] 程序缺少程序结束指令。")
        << tr("[014] 组合中的动作指令大于30条。")
        << tr("[015] 组合指令格式错误，缺少[组合结束]。")
        << tr("[016] 系统变量是只读变量，不能执行写操作。")
        << tr("[017] 用户变量编号超范围，合法的编号在0到255范围内。")
        << tr("[018]")
#if FACTORY == FA_SINROBOT_JC
        << tr("[019] 自动运行时机床没有安全门信号。")
        << tr("[020] 自动运行时没有机床中板模信号。")
#else
        << tr("[019] 自动运行时注塑机没有安全门信号。")
        << tr("[020] 自动运行时没有注塑机中板模信号。")
#endif
        << tr("[021] 设定的生产计划已经完成。")
        << tr("[022] 累计不良产品数量达到设定报警值。")
        << tr("[023]")
        << tr("[024] 手动且错误状态下不能改变运行方式。")
        << tr("[025] 系统在错误状态，不能改变系统的工作状态。")
        << tr("[026] 系统正在运行，不能改变系统的工作状态。")
#if FACTORY == FA_SINROBOT_JC
        << tr("[027] %1轴位置不在安全区域，禁止机床关模。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[028] %1轴位置不在安全区域，禁止机床关模。").arg(GetServoName(AXIS_IDX_PVER))
#else
        << tr("[027] %1轴位置不在安全区域，禁止注塑机关模。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[028] %1轴位置不在安全区域，禁止注塑机关模。").arg(GetServoName(AXIS_IDX_PVER))
#endif
        << tr("[029] 在模内下位倒角不安全。")

		<< tr("[030] %1轴没有原点信号。").arg(GetServoName(AXIS_IDX_PVER))
		<< tr("[031] %1轴没有原点信号。").arg(GetServoName(AXIS_IDX_RVER))

        << tr("[032]")
        << tr("[033]")
        << tr("[034] 系统设置[倒角状态]为垂直，正臂或副臂气动倒角不垂直，不能自动运行。")
        << tr("[035] 系统设置[倒角状态]为水平，正臂或副臂气动倒角不水平，不能自动运行。")
        << tr("[036] 伺服没有经过原点复归操作。")

		<< tr("[037] %1轴不在上位，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_PVER)).arg(GetServoName(AXIS_IDX_TRV))
        << tr("[038] %1轴不在上位，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_RVER)).arg(GetServoName(AXIS_IDX_TRV))
        << tr("[039] %1轴不在上位，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_PVER)).arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[040]")
        << tr("[041]")
        << tr("[042]")
        << tr("[043] 没有开模完信号，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[044] 没有中板模信号，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[045] %1轴不在安全区内，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_PVER))
        << tr("[046]")
        << tr("[047] 模内超出安全区，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_PHOR))

        << tr("[048]")
        << tr("[049] 副臂不在上位，不能自动运行。")
        << tr("[050] 系统需要进行维护，请联系生产厂商。")
        << tr("[051]")
        << tr("[052]")
        << tr("[053] 机械手正在动作中，不能执行其他操作。")
        << tr("[054] 系统程序指令指针错误。")
        << tr("[055]")
        << tr("[056] 安全门开启，暂停系统自动运行。")
        << tr("[057] 系统工作状态错误。")
        << tr("[058] 正臂或副臂气动倒角水平时，禁止在模内下行。")

		<< tr("[059] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[060] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[061] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[062] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[063] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[064] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[065] %1轴位置在模内安全区域内，但没有检测到模内安全区域信号。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[066] %1轴位置在模外安全区域内，但没有检测到模外安全区域信号。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[067] %1轴位置不在安全区内，%2轴运动不安全。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[068] %1轴位置不在安全区内，%2轴运动不安全。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[069] %1轴位置在上位待机安全区内，但没有上位安全区信号。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[070] %1轴位置在上位待机安全区内，但没有上位安全区信号。").arg(GetServoName(AXIS_IDX_RVER))

        << tr("[071]")
        << tr("[072] 循环定位子程序中定位点数量太大。")
        << tr("[073] 自动生产的产品数达到设定的提醒值。")
        << tr("[074] 组合中[IF]指令不能嵌套使用。")
        << tr("[075] 正臂气动倒角水平，但没有检测到水平到位信号。")
        << tr("[076] 正臂气动倒角水平，但检测到垂直到位信号。")
        << tr("[077] 正臂气动倒角垂直，但没有检测到垂直到位信号。")
        << tr("[078] 正臂气动倒角垂直，但检测到水平到位信号。")

       << tr("[079] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_PHOR))
       << tr("[080] 主臂引拔伺服没有就绪")
       << tr("[081] 主臂引拔伺服不在线")
       << tr("[082] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_PVER))
       << tr("[083] 主臂上下伺服没有就绪")
       << tr("[084] 等待开模动作超时。")
       << tr("[085] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_TRV))
       << tr("[086] 横行伺服没有就绪")
       << tr("[087] 横行伺服不在线")
       << tr("[088] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_RVER))
       << tr("[089] 副臂上下伺服没有就绪")
       << tr("[090] 副臂上下伺服不在线")
       << tr("[091] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_RHOR))
       << tr("[092] 副臂引拔伺服没有就绪")
       << tr("[093] 副臂引拔伺服不在线")
       << tr("[094] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_EXT))

        << tr("[095] 扩展伺服没有就绪 ")
        << tr("[096] 扩展伺服不在线")
#if FACTORY == FA_SINROBOT_JC
        << tr("[097] 机床紧急停止，请检查机床。")
#else
        << tr("[097] 注塑机紧急停止，请检查注塑机。")
#endif
        << tr("[098] 机械手紧急停止，请检查机械手。")
        << tr("[099] 气源气压过低，请检查气源压力。")
        << tr("[100] %1轴在模内区域，机床开模完信号消失。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[101] %1轴在模内区域，机床中板模信号消失。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[102] %1轴在模内区域，机床开模完信号消失。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[103] %1轴在模内区域，机床中板模信号消失。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[104] %1轴伺服运行到正极限。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[105] %1轴伺服运行到负极限。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[106] %1轴伺服运行到负极限。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[107] %1轴伺服运行到正极限。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[108] %1轴伺服运行到正极限。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[109] %1轴伺服运行到负极限。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[110] %1轴伺服运行到正极限。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[111] %1轴伺服运行到负极限。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[112] %1轴伺服运行到负极限。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[113] %1轴伺服运行到正极限。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[114] %1轴伺服运行到正极限。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[115] %1轴伺服运行到负极限。").arg(GetServoName(AXIS_IDX_EXT))

        << tr("[116]")
        << tr("[117] 伺服定位超时，请检查伺服驱动器参数设置。")
        << tr("[118] 伺服定位动作的伺服轴索引无效。")
        << tr("[119] IO扩展模块1通讯错误。")
        << tr("[120] IO扩展模块2通讯错误。")
        << tr("[121] IO扩展模块3通讯错误。")
        << tr("[122] IO扩展模块4通讯错误。")
        << tr("[123] 没有模外下行安全检测信号，手臂不能下行。")
        << tr("[124] 系统设置倒角垂直时，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[125]%1轴不在上位，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_RVER)).arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[126]%1轴运行不安全，超出模内安全区。").arg(GetServoName(AXIS_IDX_RHOR))

        << tr("[127]")
#if FACTORY == FA_SINROBOT_JC
        << tr("[128] 自动运行时机床开模完但没有中板模信号。")
        << tr("[129] 自动运行时没有机床全自动信号。")
#else
        << tr("[128] 自动运行时注塑机开模完但没有中板模信号。")
        << tr("[129] 自动运行时没有注塑机全自动信号。")
#endif
		<< tr("[130] %1轴和%2轴位置冲突。").arg(GetServoName(AXIS_IDX_PHOR)).arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[131] 组合中不能出现[允许关模]之外的动作。")
        << tr("[132] 手臂在模内没有开模完信号(模外待机)。")
        << tr("[133] 手臂在模内没有中板模信号(模外待机)。")

        << tr("[134] %1轴入模不安全,没有开模完信号(模外待机)。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[135] %1轴入模不安全,没有中板模信号(模外待机)。").arg(GetServoName(AXIS_IDX_TRV))

        << tr("[136] 无效的气动副臂动作。")
        << tr("[137] 气动副臂下行但电眼不亮。")
        << tr("[138] 气动副臂下行但上行电眼亮。")
        << tr("[139] 气动副臂上行但电眼不亮。")
        << tr("[140] 气动副臂上行但下行电眼亮。")
#if ((FACTORY == FA_XIONGCHUANG) || (FACTORY == FA_VICTOR) || (FACTORY == FA_KEHUI) || (FACTORY == FA_WEILIHE) || (FACTORY == FA_SIGMA) ||  (FACTORY == FA_SINROBOT_CN) || (FACTORY == FA_BEISHITE_CN))
        << tr("[141] %1轴不在安全区内，副臂气动下行不安全。").arg(GetServoName(AXIS_IDX_TRV))
#elif (FACTORY == FA_GH)
        << tr("[141] %1轴不在安全区内，副臂气动下行不安全。").arg(GetServoName(AXIS_IDX_PHOR))
#elif ((FACTORY == FA_KINGROBOT) || (FACTORY == FA_BEISHITE) || (FACTORY == FA_AIERFA))
        << tr("[141] %1轴不在安全区内，副臂气动下行不安全。").arg(GetServoName(AXIS_IDX_PHOR))
#else
        << tr("[141] %1轴不在安全区内，副臂气动下行不安全。").arg(GetServoName(AXIS_IDX_PVER))
#endif
        << tr("[142] 模内没有开模完信号，副臂气动下行不安全。")
        << tr("[143] 模内没有中板模信号，副臂气动下行不安全。")
#if FACTORY == FA_SINROBOT_JC
        << tr("[144] 副臂气动在模内下位，机床开模中间信号消失。")
        << tr("[145] %1轴模内下位，机床开模中间信号消失。").arg(GetServoName(AXIS_IDX_PVER))
#else
        << tr("[144] 副臂气动在模内下位，塑机开模中间信号消失。")
        << tr("[145] %1轴模内下位，塑机开模中间信号消失。").arg(GetServoName(AXIS_IDX_PVER))
#endif
        << tr("[146] 连续路径中的指令太多。")
        << tr("[147]")
        << tr("[148]")
        << tr("[149]")
        << tr("[150] 连续路径格式错误，缺少[路径结束]。")
        << tr("[151] 无效激活码。")
        << tr("[152] JOG模式只能转换到手动模式。")
        << tr("[153] 有效激活码。")
        << tr("[154] 连续路径中不能使用等待开模语句。")
        << tr("[155] 模内安全和模外安全同时有信号。")
        << tr("[156] 变量操作不能为0。")
        << tr("[157] 激活码过期。")

        << tr("[158] 手臂下行不安全，%1轴不在模内安全区。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[159] 手臂下行不安全，%1轴不在模内安全区。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[160] 手臂下行不安全，%1轴不在模内安全区。").arg(GetServoName(AXIS_IDX_EXT))

        << tr("[161]")
        << tr("[162] 副臂气动引进但电眼不亮。")
        << tr("[163] 副臂气动引进但引退电眼亮。")
        << tr("[164] 副臂气动引退但电眼不亮。")
        << tr("[165] 副臂气动引退但引进电眼亮。")
        << tr("[166] 扩展IO板5通讯错误。")

        << tr("[167] %1轴不在模内安全区，手臂下行不安全。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[168] %1轴不在模内安全区，手臂下行不安全。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[169] %1轴不在上位，手臂倒角不安全。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[170] %1轴不在上位，手臂旋转不安全。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[171] %1轴不在安全位，手臂横行不安全。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[172] 手臂倒角不安全,不能超过模内安全区。")
        << tr("[173] 手臂旋转不安全,不能超过模内安全区。")
        << tr("[174] %1轴位置超过软件行程。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[175] %1轴位置超过软件行程。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[176] %1轴不在安全区，手臂横行不安全。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[177] %1轴不在安全区，手臂横行不安全。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[178] %1轴运行不安全，不能超过模内安全区。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[179] %1轴不在安全区，手臂横行不安全。").arg(GetServoName(AXIS_IDX_PHOR))

        << tr("[180] 副臂气动倒角水平，但电眼不亮。")
        << tr("[181] 副臂气动倒角水平，但垂直电眼亮。")
        << tr("[182] 副臂气动倒角垂直，但电眼不亮。")
        << tr("[183] 副臂气动倒角垂直，但水平电眼亮。")

        << tr("[184] %1轴不支持的绝对值编码器。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[185] %1轴不支持的绝对值编码器。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[186] %1轴不支持的绝对值编码器。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[187] %1轴不支持的绝对值编码器。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[188] %1轴不支持的绝对值编码器。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[189] %1轴不支持的绝对值编码器。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[190] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[191] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[192] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[193] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[194] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[195] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_EXT))

        << tr("[196] 打油报警。")
            << tr("[197] 外部安全门开暂停。")
        << tr("[198]")

        << tr("[199] %1轴模内和模外安全区有重叠。").arg(GetServoName(AXIS_IDX_TRV))

        << tr("[200] 伺服未到达目标位置")
        << tr("[201]")
        << tr("[202]")
        << tr("[203]")
        << tr("[204]")
        << tr("[205]")
        << tr("[206]")
        << tr("[207]")
        << tr("[208] 系统软件没有合法授权！盗版软件会影响系统的安全和稳定。www.sinrobot.com.cn")
        << tr("[209] 横行不安全,%1轴不在模内安全区。").arg(GetServoName(AXIS_IDX_PHOR))

        << tr("[210] 不在模外，倒角水平不安全。")
        << tr("[211] 电池掉电。")
        << tr("[212] 系统掉电。")

        << tr("[213] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[214] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[215] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[216] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[217] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[218] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[219]")
        << tr("[220] %1轴不安全,不能超过横行时安全区(横行当前不在安全区)。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[221] %1轴不安全,不能超过横行时安全区(横行当前不在安全区)。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[222] %1轴不安全,不能超过横行时安全区(横行当前不在安全区)。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[223] %1轴不安全,不能超过横行时安全区(横行当前不在安全区)。").arg(GetServoName(AXIS_IDX_PHOR))

        << tr("[224]")
        << tr("[225]")
        << tr("[226]")
        << tr("[227]")
        << tr("[228]")
        << tr("[229]")
        << tr("[230] 无效的视觉编号")
        << tr("[231] 无效的匹配编号")
        << tr("[232] 视觉系统忙")
        << tr("[233] 网络错误")
        << tr("[234] 视觉超时")
        << tr("[235] %1轴不在上位安全区").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[236] %1轴不在上位安全区").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[237] EtherCat总线错误")
        << tr("[238] 绝对值编码器电池没电或掉线")
        << tr("[239]")
        << tr("[240]")
        << tr("[241] 手臂在模内。不允许塑机信号长输出")
        << tr("[242] 手臂进入模内，但没有X11信号")
        << tr("[243]")
        << tr("[244]")
        << tr("[245] ") + GetServoName(AXIS_IDX_PHOR) + tr("轴驱动器超温")
        << tr("[246] ") + GetServoName(AXIS_IDX_PVER) + tr("轴驱动器超温")
        << tr("[247] ") + GetServoName(AXIS_IDX_TRV) + tr("轴驱动器超温")
        << tr("[248] ") + GetServoName(AXIS_IDX_RVER) + tr("轴驱动器超温")
        << tr("[249] ") + GetServoName(AXIS_IDX_RHOR) + tr("轴驱动器超温")
        << tr("[250] ") + GetServoName(AXIS_IDX_EXT) + tr("轴驱动器超温")
        << tr("[251] 驱动器电源模块报警")
        << tr("[252]")
        << tr("[253]")
        << tr("[254]")
        << tr("[255] 系统通讯错误：操作器与主控模块无法正常通讯，请关闭系统然后检查通讯链路是否正常。")
        << tr("[256]")
        << tr("[257]")
        << tr("[258]")
        << tr("[259]")
        << tr("[260] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[261] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[262] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[263] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[264] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[265] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[266]")
        << tr("[267]")
        << tr("[268]")
        << tr("[269]")
        << tr("[270]")
        << tr("[271]")
        << tr("[272]")
        << tr("[273]")
        << tr("[274]")
        << tr("[275]")
        << tr("[276]")
        << tr("[277]")
        << tr("[278]")
        << tr("[279]")
        << tr("[280]")
        << tr("[281]")
        << tr("[282]")
        << tr("[283]")
        << tr("[284]")
        << tr("[285]")
        << tr("[286]")
        << tr("[287]")
        << tr("[288]")
        << tr("[289]")
        << tr("[290]")
        << tr("[291]")
        << tr("[292]")
        << tr("[293]")
        << tr("[294]")
        << tr("[295]")
        << tr("[296]")
        << tr("[297]")
        << tr("[298]")
        << tr("[299]")
        << tr("[300] 找不到文件系统！")
        << tr("[301]")
        << tr("[302]")
        << tr("[303]")
        << tr("[304] 文件系统初始化错误！")
        << tr("[305]")
        << tr("[306]")
        << tr("[307]")
        << tr("[308]")
        << tr("[309]")
        << tr("[310]");
    }
        else if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_YZ)
    {
            AlarmResource
        << tr("[000] 没有任何提示或者报警。")
        << tr("[001] 无效的气动正臂动作。")
        << tr("[002] 无效的压铸机指令。")
        << tr("[003] 无效的IF条件指令。")
        << tr("[004] 无效的系统运行方式。")
        << tr("[005] 无效的系统状态。")
        << tr("[006] 无效的指令参数。")
        << tr("[007] 无效的指令。")
        << tr("[008] 无效的扩展类型。")
        << tr("[009]")
        << tr("[010] 程序中[FOR]指令格式错误，缺少[ENDFOR]指令。")
        << tr("[011] 程序中[FOR]指令格式错误，缺少[FOR]指令。")
        << tr("[012] 程序中[IF]指令格式错误，缺少[ENDIF]指令。")
        << tr("[013] 程序中缺少[程序结束]指令。")
        << tr("[014] 组合中的动作指令大于30条。")
        << tr("[015] 组合指令格式错误，缺少[组合结束]。")
        << tr("[016] 系统变量是只读变量，不能执行写操作。")
        << tr("[017] 用户变量编号超范围，合法的编号在0到255范围内。")
        << tr("[018]")
        << tr("[019] 自动运行时压铸机安全门没有关闭。")
        << tr("[020] 自动运行时没有压铸机中板模信号。")
        << tr("[021] 设定的生产计划已经完成。")
        << tr("[022] 累计不良产品数量达到设定报警值。")
        << tr("[023]")
        << tr("[024] 手动且错误状态下不能改变运行方式。")
        << tr("[025] 系统在错误状态，不能改变系统的工作状态。")
        << tr("[026] 系统正在运行，不能改变系统的工作状态。")

        << tr("[027] 喷雾臂上下位置不在安全区域，禁止压铸机关模。")
        << tr("[028] 取件臂上下位置不在安全区域，禁止压铸机关模。")
        << tr("[029] 系统设置中禁止[模内倒角]，在模内执行主臂或副臂气动倒角动作不安全。")
        << tr("[030] %1轴伺服没有原点信号。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[031] 横行%1轴伺服没有原点信号。").arg(GetServoName(AXIS_IDX_PHOR))

		<< tr("[032]")
        << tr("[033]")
#if (FACTORY == FA_YIDAO)
        << tr("[034] 系统设置[倒角状态]为垂直，正臂或副臂气动倒角不垂直，不能自动运行。")
        << tr("[035] 系统设置[倒角状态]为水平，正臂或副臂气动倒角不水平，不能自动运行。")
#else
        << tr("[034] 系统设置[倒角状态]为垂直，取件臂或喷雾臂气动倒角不垂直，不能自动运行。")
        << tr("[035] 系统设置[倒角状态]为水平，取件臂或喷雾臂气动倒角不水平，不能自动运行。")
#endif
        << tr("[036] 伺服没有经过原点复归操作。")

		<< tr("[037] %1轴不在上位，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_PVER)).arg(GetServoName(AXIS_IDX_TRV))
		<< tr("[038] %1轴不在上位，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_RVER)).arg(GetServoName(AXIS_IDX_TRV))
		<< tr("[039] %1轴不在上位，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_PHOR)).arg(GetServoName(AXIS_IDX_PVER))

		<< tr("[040]")
#if (FACTORY == FA_YIDAO)
        << tr("[041] 没有开模完信号，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[042] 没有中板模信号，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[043] 没有开模完信号，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[044] 没有中板模信号，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[045] %1轴不在安全区内，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_PVER))
        << tr("[046] %1轴不在安全区内，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_RVER))
        << tr("[047] 超出模内安全区，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_PHOR))
#else
        << tr("[041] 没有开模完成信号，禁止喷雾轴运转。")
        << tr("[042] 没有开中板模确认信号，禁止喷雾轴运转。")
        << tr("[043] 没有开模完成信号，禁止取件%1轴运转。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[044] 没有开中板模确认信号，禁止取件%1轴运转。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[045] %1轴不在安全区域内，%2轴运转不安全。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_PVER))
        << tr("[046] %1轴不在安全区域内，喷雾%2轴运转不安全。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_RVER))
        << tr("[047] 超出模内安全区，前后Y1轴运行不安全。")
#endif
        << tr("[048]")
        << tr("[049] 气动副臂不在上位，不能自动运行。")
        << tr("[050] 系统需要进行维护，请联系生产厂商。")
        << tr("[051]")
        << tr("[052]")
        << tr("[053] 机械手正在动作中，不能执行其他操作。")
        << tr("[054] 系统程序指令指针错误。")
        << tr("[055]")
        << tr("[056] 安全门开启，暂停系统自动运行；请检查系统相关参数设置。")
        << tr("[057] 系统工作状态错误。")

        << tr("[058] 取件臂或喷雾臂气动倒角水平时，禁止在模内下行；请检查系统参数设置。")
        << tr("[059] 前后%1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[060] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[061] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[062] 喷雾%1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[063] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[064] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[065] %1轴位置在模内安全区域内，但没有检测到模内安全区域信号。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[066] %1轴位置在模外安全区域内，但没有检测到模外安全区域信号。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[067] %1轴不在安全区内，%2轴运动不安全。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[068] %1轴不在安全区内，前后%2轴运动不安全。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[069] %1轴位置在上位待机安全区内，但没有上位安全区信号。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[070] 喷雾%1轴位置在上位待机安全区内，但没有上位安全区信号。").arg(GetServoName(AXIS_IDX_RVER))

		<< tr("[071] 主臂上下伺服不在线")
        << tr("[072] 循环定位子程序中定位点数量太大。")
        << tr("[073] 自动生产的产品数达到设定的提醒值。")
        << tr("[074] 在组合指令中，[IF]指令不能嵌套使用。")

        << tr("[075] 正臂气动倒角水平，但没有检测到水平到位信号。")
        << tr("[076] 正臂气动倒角水平，但检测到垂直到位信号。")
        << tr("[077] 正臂气动倒角垂直，但没有检测到垂直到位信号。")
        << tr("[078] 正臂气动倒角垂直，但检测到水平到位信号。")
        << tr("[079] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[080] 主臂引拔伺服没有就绪")
        << tr("[081] 主臂引拔伺服不在线")
        << tr("[082] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[083] 主臂上下伺服没有就绪")
        << tr("[084] 等待开模动作超时。")
        << tr("[085] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[086] 横行伺服没有就绪")
        << tr("[087] 横行伺服不在线")
        << tr("[088] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[089] 副臂上下伺服没有就绪 ")
        << tr("[090] 副臂上下伺服不在线")
        << tr("[091] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_RHOR))

        << tr("[114] %1轴伺服运行到正极限。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[115] %1轴伺服运行到负极限。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[116]")
        << tr("[117] 伺服定位超时，请检查伺服驱动器参数设置。")
        << tr("[118] 伺服定位动作的伺服轴索引无效。")
        << tr("[119] IO扩展模块1通讯错误。")
        << tr("[120] IO扩展模块2通讯错误。")
        << tr("[121] IO扩展模块3通讯错误。")
        << tr("[122] IO扩展模块4通讯错误。")
        << tr("[123] 没有模外下行安全检测信号，手臂不能下行。")
        << tr("[124] 系统设置正臂或副臂气动倒角垂直时，横行运行不安全。")
        << tr("[125] %1轴不在上位，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_RHOR)).arg(GetServoName(AXIS_IDX_PVER))
        << tr("[126] %1轴运行不安全，超出模内安全区。").arg(GetServoName(AXIS_IDX_RHOR))

        << tr("[127]")
        << tr("[128] 自动运行时压铸机开模完但没有中板模信号。")
        << tr("[129] 自动运行时没有压铸机全自动信号。")
        << tr("[130] %1轴和%1轴位置冲突。").arg(GetServoName(AXIS_IDX_PHOR)).arg(GetServoName(AXIS_IDX_RHOR))

        << tr("[131] 组合中不能出现[允许关模]之外的动作。")
        << tr("[132] 手臂在模内没有开模完(模外待机)。")
        << tr("[133] 手臂在模内没有中板模确认信号(模外待机)。")

        << tr("[134] %1轴入模不安全,没有开模完信号(模外待机)。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[135] %1轴入模不安全,没有中板模信号(模外待机)。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[136] 无效的气动副臂动作。")
        << tr("[137] 副臂气动下行但电眼不亮。")
        << tr("[138] 副臂气动下行但上行电眼亮。")
        << tr("[139] 副臂气动上行但电眼不亮。")
        << tr("[140] 副臂气动上行但下行电眼亮。")
        << tr("[141] %1轴不在安全区内，副臂气动下行不安全。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[142] 模内没有开模完信号，副臂气动下行不安全。")
        << tr("[143] 模内没有中板模信号，副臂气动下行不安全。")
        << tr("[144] 副臂气动在模内下位，铸机开模中间信号消失。")
        << tr("[145] %1轴模内下位，铸机开模中间信号消失。").arg(GetServoName(AXIS_IDX_PVER))

        << tr("[146] 连续路径太多。")
        << tr("[147]")
        << tr("[148]")
        << tr("[149]")
        << tr("[150] 连续路径格式错误，缺少[路径结束]。")
        << tr("[151] 无效激活码。")
        << tr("[152] JOG模式只能转换到手动模式。")
        << tr("[153] 有效激活码。")
        << tr("[154] 连续路径中不能使用等待开模语句。")
        << tr("[155] 模内安全和模外安全同时有信号。")
        << tr("[156] 变量操作不能为0。")
        << tr("[157] 激活码过期。")

        << tr("[158] 手臂下行不安全，%1轴不在模内安全区。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[159] 手臂下行不安全，%1轴不在模内安全区").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[160] 手臂下行不安全，%1轴不在模内安全区。").arg(GetServoName(AXIS_IDX_EXT))

        << tr("[161]")
#if (FACTORY == FA_YIDAO)
        << tr("[162] 副臂气动引进但电眼不亮。")
        << tr("[163] 副臂气动引进但引退电眼亮。")
        << tr("[164] 副臂气动引退但电眼不亮。")
        << tr("[165] 副臂气动引退但引进电眼亮。")
#else
        << tr("[162] 喷雾臂气动引进但电眼不亮。")
        << tr("[163] 喷雾臂气动引进但引退电眼亮。")
        << tr("[164] 喷雾臂气动引退但电眼不亮。")
        << tr("[165] 喷雾臂气动引退但引进电眼亮。")
#endif
        << tr("[166] 扩展IO板5通讯错误。")

        << tr("[167] %1轴不在模内安全区，手臂下行不安全。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[168] 喷雾%1轴不在模内安全区，手臂下行不安全。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[169] %1轴不在上位，手臂倒角不安全。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[170] %1轴不在上位，手臂旋转不安全。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[171] 喷雾%1轴不在安全位，手臂横行不安全。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[172] 手臂倒角不安全,不能超过模内安全区。")
        << tr("[173] 手臂旋转不安全,不能超过模内安全区。")
        << tr("[174] 喷雾%1轴位置超过软件行程。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[175] %1轴位置超过软件行程。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[176] %1轴不在安全区，手臂横行不安全。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[177] %1轴不在安全区，手臂横行不安全。").arg(GetServoName(AXIS_IDX_EXT))
            << tr("[178] %1轴运行不安全，不能超过模内安全区。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[179] 前后%1轴不在安全区，手臂横行不安全。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[180] 喷雾臂气动倒角水平，但电眼不亮。")
        << tr("[181] 喷雾臂气动倒角水平，但垂直电眼亮。")
        << tr("[182] 取件臂气动倒角垂直，但电眼不亮。")
        << tr("[183] 取件臂气动倒角垂直，但水平电眼亮。")

        << tr("[184] 前后%1轴不支持的绝对值编码器。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[185] %1轴不支持的绝对值编码器。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[186] 横行%1轴不支持的绝对值编码器。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[187] 喷雾%1轴不支持的绝对值编码器。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[188] %1轴不支持的绝对值编码器。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[189] %1轴不支持的绝对值编码器。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[190] 前后%1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[191] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[192] 横行%1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[193] 喷雾%1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[194] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_RHOR))

        << tr("[195] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[196] 打油报警。")
            << tr("[197] 外部安全门开暂停。")
        << tr("[198]")
        << tr("[199] %1轴模内和模外安全区有重叠。").arg(GetServoName(AXIS_IDX_TRV))

        << tr("[200] 伺服未到达目标位置")
        << tr("[201]")
        << tr("[202]")
        << tr("[203]")
        << tr("[204]")
        << tr("[205]")
        << tr("[206]")
        << tr("[207]")
        << tr("[208] 系统软件没有合法授权！盗版软件会影响系统的安全和稳定。www.sinrobot.com.cn")
        << tr("[209]")
        << tr("[210]")
        << tr("[211] 电池掉电。")
        << tr("[212] 系统掉电。")

        << tr("[213] 前后%1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[214] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[215] 横行X1轴绝对值编码器电池电压低。")
        << tr("[216] 喷雾%1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[217] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[218] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[219]")
        << tr("[220] 喷雾%1轴不安全,不能超过横行时安全区(横行当前不在安全区)。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[221] %1轴不安全,不能超过横行时安全区(横行当前不在安全区)。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[222] %1轴不安全,不能超过横行时安全区(横行当前不在安全区)。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[223] 前后%1轴不安全,不能超过横行时安全区(横行当前不在安全区)。").arg(GetServoName(AXIS_IDX_PHOR))

        << tr("[224]")
        << tr("[225]")
        << tr("[226]")
        << tr("[227]")
        << tr("[228]")
        << tr("[229]")
        << tr("[230]")
        << tr("[231]")
        << tr("[232]")
        << tr("[233]")
        << tr("[234]")
        << tr("[235]")
        << tr("[236]")
        << tr("[237]")
        << tr("[238]")
        << tr("[239]")
        << tr("[240]")
        << tr("[241] 手臂在模内。不允许塑机信号长输出")
        << tr("[242] 手臂进入模内，但没有X11信号")
        << tr("[243]")
        << tr("[244]")
        << tr("[245] ") + GetServoName(AXIS_IDX_PHOR) + tr("轴驱动器超温")
        << tr("[246] ") + GetServoName(AXIS_IDX_PVER) + tr("轴驱动器超温")
        << tr("[247] ") + GetServoName(AXIS_IDX_TRV) + tr("轴驱动器超温")
        << tr("[248] ") + GetServoName(AXIS_IDX_RVER) + tr("轴驱动器超温")
        << tr("[249] ") + GetServoName(AXIS_IDX_RHOR) + tr("轴驱动器超温")
        << tr("[250] ") + GetServoName(AXIS_IDX_EXT) + tr("轴驱动器超温")
        << tr("[251] 驱动器电源模块报警")
        << tr("[252]")
        << tr("[253]")
        << tr("[254]")
        << tr("[255] 系统通讯错误：操作器与主控模块无法正常通讯，请关闭系统然后检查通讯链路是否正常。")
        << tr("[256]")
        << tr("[257]")
        << tr("[258]")
        << tr("[259]")
        << tr("[260] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[261] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[262] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[263] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[264] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[265] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[266]")
        << tr("[267]")
        << tr("[268]")
        << tr("[269]")
        << tr("[270]")
        << tr("[271]")
        << tr("[272]")
        << tr("[273]")
        << tr("[274]")
        << tr("[275]")
        << tr("[276]")
        << tr("[277]")
        << tr("[278]")
        << tr("[279]")
        << tr("[280]")
        << tr("[281]")
        << tr("[282]")
        << tr("[283]")
        << tr("[284]")
        << tr("[285]")
        << tr("[286]")
        << tr("[287]")
        << tr("[288]")
        << tr("[289]")
        << tr("[290]")
        << tr("[291]")
        << tr("[292]")
        << tr("[293]")
        << tr("[294]")
        << tr("[295]")
        << tr("[296]")
        << tr("[297]")
        << tr("[298]")
        << tr("[299]")
        << tr("[300] 找不到文件系统！")
        << tr("[301]")
        << tr("[302]")
        << tr("[303]")
        << tr("[304] 文件系统初始化错误！")
        << tr("[305]")
        << tr("[306]")
        << tr("[307]")
        << tr("[308]")
        << tr("[309]")
        << tr("[310]");
    }
    else
    {
        // 双臂 高速双臂
        AlarmResource
        << tr("[000] 没有任何提示或者报警。")
        << tr("[001] 无效的气动正臂动作。")
#if FACTORY == FA_SINROBOT_JC
        << tr("[002] 无效的机床指令。")
#else
        << tr("[002] 无效的注塑机指令。")
#endif
        << tr("[003] 无效的IF条件指令。")
        << tr("[004] 无效的系统运行方式。")
        << tr("[005] 无效的系统状态。")
        << tr("[006] 无效的指令参数。")
        << tr("[007] 无效的指令。")
        << tr("[008] 无效的扩展动作类型。")
        << tr("[009] ")
        << tr("[010] 程序中[FOR]指令格式错误，缺少[ENDFOR]指令。")
        << tr("[011] 程序中[FOR]指令格式错误，缺少[FOR]指令。")
        << tr("[012] 程序中[IF]指令格式错误，缺少[ENDFOR]指令。")
        << tr("[013] 程序中缺少[程序结束]指令。")
        << tr("[014] 组合中的动作指令大于30条。")
        << tr("[015] 组合指令格式错误，缺少[组合结束]。")
        << tr("[016] 系统变量是只读变量，不能执行修改操作。")
        << tr("[017] 用户变量编号超范围，合法的编号在0到255范围内。")
        << tr("[018] ")
#if FACTORY == FA_SINROBOT_JC
        << tr("[019] 自动运行时机床安全门没有关闭。")
        << tr("[020] 自动运行时没有机床中板模信号。")
#else
        << tr("[019] 自动运行时注塑机安全门没有关闭。")
        << tr("[020] 自动运行时没有注塑机中板模信号。")
#endif
        << tr("[021] 设定的生产计划已经完成。")
        << tr("[022] 累计不良产品数量达到设定报警值。")
        << tr("[023] ")
        << tr("[024] 手动且错误状态下不能改变运行方式。")
        << tr("[025] 系统在错误状态，不能改变系统的工作状态。")
        << tr("[026] 系统正在运行，不能改变系统的工作状态。")
#if ((FACTORY == FA_AIERFA) || (FACTORY == FA_GH) || (FACTORY == FA_SINROBOT_JC) || (FACTORY == FA_KINGROBOT) || (FACTORY == FA_BEISHITE) ||(FACTORY == FA_XIONGCHUANG) || (FACTORY == FA_VICTOR) || (FACTORY == FA_KEHUI) || (FACTORY == FA_WEILIHE) || (FACTORY == FA_SIGMA) ||  (FACTORY == FA_SINROBOT_CN) || (FACTORY == FA_BEISHITE_CN))
        << tr("[027] %1轴不在安全区域，禁止机床关模。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[028] %1轴不在安全区域，禁止机床关模。").arg(GetServoName(AXIS_IDX_PVER))
#elif (FACTORY ==FA_VICTOR_SPECIAL)
        << tr("[027] %1轴不在安全区域，禁止机床加工。").arg(GetServoName(AXIS_IDX_RVER))   //轴不在安全区域，禁止机床关模  2023-12-6 关模 -> 加工
        << tr("[028] %1轴不在安全区域，禁止机床加工。").arg(GetServoName(AXIS_IDX_PVER))
#else
        << tr("[027] %1轴不在安全区域，禁止机床加工。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[028] %1轴不在安全区域，禁止机床加工。").arg(GetServoName(AXIS_IDX_PVER))
#endif
        << tr("[029] 系统设置中禁止[模内倒角]，在模内执行正臂或副臂气动倒角动作不安全。")

		<< tr("[030] %1轴不在原点位置，不能自动运行。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[031] %1轴不在模外安全区域，不能自动运行。").arg(GetServoName(AXIS_IDX_TRV))

        << tr("[032] ")
        << tr("[033] ")
        << tr("[034] 系统设置[倒角状态]为垂直，正臂或副臂气动倒角不垂直，不能自动运行。")
        << tr("[035] 系统设置[倒角状态]为水平，正臂或副臂气动倒角不水平，不能自动运行。")
        << tr("[036] 伺服没有经过原点复归操作。")

		<< tr("[037] %1轴不在上位，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_PVER)).arg(GetServoName(AXIS_IDX_TRV))
        << tr("[038] %1轴不在上位，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_PVER)).arg(GetServoName(AXIS_IDX_RVER))
        << tr("[039] %1轴不在上位，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[040] ")
        << tr("[041] 没有开模完信号，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[042] 没有中板模信号，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[043] 没有开模完信号，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[044] 没有中板模信号，%1轴运行不安全。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[045] %1轴不在安全区内，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_PVER))
        << tr("[046] %1轴不在安全区内，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_RVER))
        << tr("[047] %1轴运行不安全，超出模内安全区。").arg(GetServoName(AXIS_IDX_PHOR))

        << tr("[048] ")
        << tr("[049] 气动副臂不在上位，不能自动运行。")
        << tr("[050] 系统需要进行维护，请联系生产厂商。")
        << tr("[051] ")
        << tr("[052] ")
        << tr("[053] 机械手正在动作中，不能执行其他操作。")
        << tr("[054] 系统程序指令指针错误。")
        << tr("[055] ")
        << tr("[056] 安全门开启，暂停系统自动运行。")
        << tr("[057] 系统工作状态错误。")
        << tr("[058] 正臂或副臂气动倒角水平时，禁止在模内下行。")

		<< tr("[059] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[060] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[061] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[062] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[063] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[064] %1轴位置超出了软件行程。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[065] %1轴位置在模内安全区内，但没有检测到模内安全区域信号。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[066] %1轴位置在模外安全区内，但没有检测到模外安全区域信号。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[067] %1轴位置不在安全区内，%2轴运动不安全。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[068] %1轴位置不在安全区内，%2轴运动不安全。").arg(GetServoName(AXIS_IDX_TRV)).arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[069] %1轴位置在上位待机安全区内，但没有上位安全区信号。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[070] %1轴位置在上位待机安全区内，但没有上位安全区信号。").arg(GetServoName(AXIS_IDX_RVER))

        << tr("[071] ")
        << tr("[072] 循环定位子程序中定位点数量太大。")
        << tr("[073] 自动生产的产品数达到设定的提醒值。")
        << tr("[074] 组合中条件指令不能嵌套使用。")
        << tr("[075] 正臂气动倒角水平，但没有检测到水平到位信号。")
        << tr("[076] 正臂气动倒角水平，但检测到垂直到位信号。")
        << tr("[077] 正臂气动倒角垂直，但没有检测到垂直到位信号。")
        << tr("[078] 正臂气动倒角垂直，但检测到水平到位信号。")

        << tr("[079] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[080] 主臂引拔伺服没有就绪")
        << tr("[081] 主臂引拔伺服不在线")
        << tr("[082] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[083] 主臂上下伺服没有就绪")
        << tr("[084] 等待开模动作超时。")
        << tr("[085] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[086] 横行伺服没有就绪")
        << tr("[087] 横行伺服不在线")
        << tr("[088] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[089] 副臂上下伺服没有就绪 ")
        << tr("[090] 副臂上下伺服不在线")
        << tr("[091] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[092] 副臂引拔伺服没有就绪 ")
        << tr("[093] 副臂引拔伺服不在线")
        << tr("[094] %1轴伺服报警，请检查伺服驱动器。").arg(GetServoName(AXIS_IDX_EXT))

        << tr("[095] 扩展伺服没有就绪 ")
        << tr("[096] 扩展伺服不在线")
#if FACTORY == FA_SINROBOT_JC
        << tr("[097] 机床紧急停止，请检查注机床。")
#else
        << tr("[097] 注塑机紧急停止，请检查注塑机。")
#endif
        << tr("[098] 机械手紧急停止，请检查机械手。")
        << tr("[099] 气源气压过低，请检查气源压力。")

        << tr("[100] %1轴在模内区域，机床开模完信号消失。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[101] %1轴在模内区域，机床中板模信号消失。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[102] %1轴在模内区域，机床开模完信号消失。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[103] %1轴在模内区域，机床中板模信号消失。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[104] %1轴伺服运行到正极限。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[105] %1轴伺服运行到负极限。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[106] %1轴伺服运行到负极限。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[107] %1轴伺服运行到正极限。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[108] %1轴伺服运行到正极限。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[109] %1轴伺服运行到负极限。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[110] %1轴伺服运行到正极限。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[111] %1轴伺服运行到负极限。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[112] %1轴伺服运行到负极限。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[113] %1轴伺服运行到正极限。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[114] %1轴伺服运行到正极限。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[115] %1轴伺服运行到负极限。").arg(GetServoName(AXIS_IDX_EXT))

        << tr("[116] ")
        << tr("[117] 伺服定位超时，请检查伺服驱动器参数设置。")
        << tr("[118] 伺服定位动作的伺服轴索引无效。")
        << tr("[119] IO扩展模块1通讯错误。")
        << tr("[120] IO扩展模块2通讯错误。")
        << tr("[121] IO扩展模块3通讯错误。")
        << tr("[122] IO扩展模块4通讯错误。")
        << tr("[123] 没有模外下行安全信号，手臂不能下行。")

        << tr("[124] 系统设置正臂或副臂气动倒角垂直时，横行运行不安全。")
        << tr("[125] %1轴不在上位，%2轴运行不安全。").arg(GetServoName(AXIS_IDX_RVER)).arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[126] %1轴运行不安全，超出模内安全区。").arg(GetServoName(AXIS_IDX_RHOR))

        << tr("[127] ")
#if FACTORY == FA_SINROBOT_JC
        << tr("[128] 自动运行时机床开模完但没有中板模信号。")
        << tr("[129] 自动运行时没有机床全自动信号。")
#else
        << tr("[128] 自动运行时注塑机开模完但没有中板模信号。")
        << tr("[129] 自动运行时没有注塑机全自动信号。")
#endif
        <<tr("[130] %1轴和%2轴位置冲突。").arg(GetServoName(AXIS_IDX_PHOR)).arg(GetServoName(AXIS_IDX_RHOR)).arg(GetServoName(AXIS_IDX_PHOR)).arg(GetServoName(AXIS_IDX_RHOR))

        << tr("[131] 组合中不能出现[允许关模]之外的动作。")
        << tr("[132] 手臂在模内没有开模完信号(模外待机)。")
        << tr("[133] 手臂在模内没有中板模信号(模外待机)。")

        << tr("[134] %1轴入模不安全,没有开模完信号(模外待机)。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[135] %1轴入模不安全,没有中板模信号(模外待机)。").arg(GetServoName(AXIS_IDX_TRV))

        << tr("[136] 无效的气动副臂动作。")
        << tr("[137] 副臂气动下行但电眼不亮。")
        << tr("[138] 副臂气动下行但上行电眼亮。")
        << tr("[139] 副臂气动上行但电眼不亮。")
        << tr("[140] 副臂气动上行但下行电眼亮。")
        << tr("[141] 不在取物点也不在置物点，副臂下行不安全。")
        << tr("[142] 模内没有开模完信号，副臂下行不安全。")
        << tr("[143] 模内没有中板模信号，副臂下行不安全。")
#if FACTORY == FA_SINROBOT_JC
        << tr("[144] 副臂在模内下位，机床开模中间信号消失。")
        << tr("[145] %1轴模内下位，机床开模中间信号消失。").arg(GetServoName(AXIS_IDX_PVER))
#else
        << tr("[144] 副臂在模内下位，塑机开模中间信号消失。")
        << tr("[145] %1轴模内下位，机床开模中间信号消失。").arg(GetServoName(AXIS_IDX_PVER))
#endif
        << tr("[146] 连续路径中的指令太多。")
        << tr("[147] ")
        << tr("[148] ")
        << tr("[149] ")
        << tr("[150] 连续路径格式错误，缺少[路径结束]。")
        << tr("[151] 无效激活码。")
        << tr("[152] JOG模式只能转换到手动模式。")
        << tr("[153] 有效激活码。")
        << tr("[154] 连续路径中不能使用等待开模语句。")
        << tr("[155] 模内安全和模外安全同时有信号。")
        << tr("[156] 变量操作不能为0。")
        << tr("[157] 激活码过期。")

        << tr("[158] %1轴不在模内安全区，手臂下行不安全。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[159] %1轴不在模内安全区，手臂下行不安全。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[160] %1轴不在模内安全区，手臂下行不安全。").arg(GetServoName(AXIS_IDX_EXT))

        << tr("[161]")
#if FACTORY == FA_SINROBOT_JC
		<< tr("[162] 副臂气动引退但电眼不亮。")
		<< tr("[163] 副臂气动引退但引进电眼亮。")
		<< tr("[164] 副臂气动引进但电眼不亮。")
		<< tr("[165] 副臂气动引进但引退电眼亮。")
#else
		<< tr("[162] 副臂气动引进但电眼不亮。")
		<< tr("[163] 副臂气动引进但引退电眼亮。")
		<< tr("[164] 副臂气动引退但电眼不亮。")
		<< tr("[165] 副臂气动引退但引进电眼亮。")
#endif
        << tr("[166] 扩展IO板5通讯错误。")

        << tr("[167] %1轴不在模内安全区，手臂下行不安全。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[168] %1轴不在模内安全区，手臂下行不安全。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[169] %1轴不在上位，手臂倒角不安全。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[170] %1轴不在上位，手臂旋转不安全。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[171] %1轴不在安全位，手臂横行不安全。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[172] 手臂倒角不安全,不能超过模内安全区。")
        << tr("[173] 手臂旋转不安全,不能超过模内安全区。")
        << tr("[174] %1轴位置超过软件行程。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[175] %1轴位置超过软件行程。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[176] %1轴不在安全区，手臂横行不安全。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[177] %1轴不在安全区，手臂横行不安全。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[178] %1轴运行不安全，不能超过模内安全区。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[179] %1轴不在安全区，手臂横行不安全。").arg(GetServoName(AXIS_IDX_PHOR))

        << tr("[180] 副臂气动倒角水平，但电眼不亮。")
        << tr("[181] 副臂气动倒角水平，但垂直电眼亮。")
        << tr("[182] 副臂气动倒角垂直，但电眼不亮。")
        << tr("[183] 副臂气动倒角垂直，但水平电眼亮。")

        << tr("[184] %1轴不支持绝对值编码器。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[185] %1轴不支持绝对值编码器。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[186] %1轴不支持绝对值编码器。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[187] %1轴不支持绝对值编码器。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[188] %1轴不支持绝对值编码器。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[189] %1轴不支持绝对值编码器。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[190] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[191] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[192] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[193] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[194] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[195] %1轴绝对值编码器通讯错误。").arg(GetServoName(AXIS_IDX_EXT))

        << tr("[196] 打油报警。")
        << tr("[197] 外部安全门开暂停。")
        << tr("[198]")
        << tr("[199] %1轴模内和模外安全区有重叠。").arg(GetServoName(AXIS_IDX_TRV))

        << tr("[200] 伺服未到达目标位置")
        << tr("[201]")
        << tr("[202]")
        << tr("[203]")
        << tr("[204]")
        << tr("[205]")
        << tr("[206]")
        << tr("[207]")
        << tr("[208] 系统软件没有合法授权！盗版软件会影响系统的安全和稳定。www.sinrobot.com.cn")
#if ((FACTORY == FA_XIONGCHUANG) || (FACTORY == FA_VICTOR) || (FACTORY == FA_KEHUI) || (FACTORY == FA_WEILIHE) || (FACTORY == FA_SIGMA) ||  (FACTORY == FA_SINROBOT_CN) || (FACTORY == FA_BEISHITE_CN))
        << tr("[209] 横行不安全，%1轴不在模内安全区。").arg(GetServoName(AXIS_IDX_PHOR))
#elif((FACTORY == FA_SINROBOT_SIDE)|| FACTORY == FA_JIEJIA_SIDE)
        << tr("[209] 横行不安全，%1轴不在模内安全区。").arg(GetServoName(AXIS_IDX_PHOR))
#elif (FACTORY == FA_GH)
        << tr("[209] 横行不安全，%1或%2轴不在模内安全区。").arg(GetServoName(AXIS_IDX_PHOR)).arg(GetServoName(AXIS_IDX_RHOR))
#elif ((FACTORY == FA_KINGROBOT) || (FACTORY == FA_BEISHITE))
        << tr("[209] 横行不安全，%1或%2轴不在模内安全区。").arg(GetServoName(AXIS_IDX_PHOR)).arg(GetServoName(AXIS_IDX_RHOR))
#elif (FACTORY == FA_AIERFA)
        << tr("[209] 横行不安全，%1或%2轴不在模内安全区。").arg(GetServoName(AXIS_IDX_PHOR)).arg(GetServoName(AXIS_IDX_RHOR))
#elif (FACTORY ==FA_VICTOR_SPECIAL)
        << tr("[209] 横行不安全，%1或%2轴不在模内安全区。").arg(GetServoName(AXIS_IDX_PHOR)).arg(GetServoName(AXIS_IDX_RHOR))
#else
        << tr("[209] 横行不安全，%1或%2轴不在模内安全区。").arg(GetServoName(AXIS_IDX_PHOR)).arg(GetServoName(AXIS_IDX_RHOR))
#endif
        << tr("[210] 不在模外，倒角水平不安全。")
        << tr("[211] 电池掉电。")
        << tr("[212] 系统掉电。")

        << tr("[213] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[214] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[215] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[216] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[217] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[218] %1轴绝对值编码器电池电压低。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[219]")
        << tr("[220] %1轴不安全,不能超过横行时安全区(横行当前不在安全区)。").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[221] %1轴不安全,不能超过横行时安全区(横行当前不在安全区)。").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[222] %1轴不安全,不能超过横行时安全区(横行当前不在安全区)。").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[223] %1轴不安全,不能超过横行时安全区(横行当前不在安全区)。").arg(GetServoName(AXIS_IDX_PHOR))

        << tr("[224]")
        << tr("[225]")
        << tr("[226]")
        << tr("[227]")
        << tr("[228]")
        << tr("[229]")
        << tr("[230] 无效的视觉编号")
        << tr("[231] 无效的匹配编号")
        << tr("[232] 视觉系统忙")
        << tr("[233] 网络错误")
        << tr("[234] 视觉超时")
        << tr("[235] %1轴不在上位安全区").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[236] %1轴不在上位安全区").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[237] EtherCat总线错误")
        << tr("[238] 绝对值编码器电池没电或掉线")
        << tr("[239]")
        << tr("[240]")
        << tr("[241] 手臂在模内。不允许塑机信号长输出")
        << tr("[242] 手臂进入模内，但没有X11信号")
        << tr("[243]")
        << tr("[244]")
        << tr("[245] ") + GetServoName(AXIS_IDX_PHOR) + tr("轴驱动器超温")
        << tr("[246] ") + GetServoName(AXIS_IDX_PVER) + tr("轴驱动器超温")
        << tr("[247] ") + GetServoName(AXIS_IDX_TRV) + tr("轴驱动器超温")
        << tr("[248] ") + GetServoName(AXIS_IDX_RVER) + tr("轴驱动器超温")
        << tr("[249] ") + GetServoName(AXIS_IDX_RHOR) + tr("轴驱动器超温")
        << tr("[250] ") + GetServoName(AXIS_IDX_EXT) + tr("轴驱动器超温")
        << tr("[251] 驱动器电源模块报警")
        << tr("[252]")
        << tr("[253]")
        << tr("[254]")
        << tr("[255] 系统通讯错误：操作器与主控模块无法正常通讯，请关闭系统然后检查通讯链路是否正常。")
        << tr("[256]")
        << tr("[257]")
        << tr("[258]")
        << tr("[259]")
        << tr("[260] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_PHOR))
        << tr("[261] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_PVER))
        << tr("[262] ") + GetServoName(AXIS_IDX_TRV) + tr("轴跟随误差过大").arg(GetServoName(AXIS_IDX_TRV))
        << tr("[263] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_RVER))
        << tr("[264] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_RHOR))
        << tr("[265] %1轴跟随误差过大").arg(GetServoName(AXIS_IDX_EXT))
        << tr("[266]")
        << tr("[267]")
        << tr("[268]")
        << tr("[269]")
        << tr("[270]")
        << tr("[271]")
        << tr("[272]")
        << tr("[273]")
        << tr("[274]")
        << tr("[275]")
        << tr("[276]")
        << tr("[277]")
        << tr("[278]")
        << tr("[279]")
        << tr("[280]")
        << tr("[281]")
        << tr("[282]")
        << tr("[283]")
        << tr("[284]")
        << tr("[285]")
        << tr("[286]")
        << tr("[287]")
        << tr("[288]")
        << tr("[289]")
        << tr("[290]")
        << tr("[291]")
        << tr("[292]")
        << tr("[293]")
        << tr("[294]")
        << tr("[295]")
        << tr("[296]")
        << tr("[297]")
        << tr("[298]")
        << tr("[299]")
        << tr("[300] 找不到文件系统！")
        << tr("[301]")
        << tr("[302]")
        << tr("[303]")
        << tr("[304] 文件系统初始化错误！")
        << tr("[305]")
        << tr("[306]")
        << tr("[307]")
        << tr("[308]")
        << tr("[309]")
        << tr("[310]");
    }
}

// *************************************************
// 初始化IO变量名字字符串资源
// *************************************************
void xStringResource::initIoVarRes(quint8 lan)
{
	QString curLan;
	curLan.clear();
	switch (lan)
	{
	case LAN_CHINESE_T:
		curLan.append("chineset/");
		break;
	case LAN_ENGLISH:
		curLan.append("english/");
		break;
    case LAN_RUSSIAN:
        curLan.append("russian/");
        break;
    case LAN_TURKISH:
        curLan.append("turkish/");
        break;
    case LAN_VIETNAM:
        curLan.append("vietnam/");
        break;
    case LAN_PORTUGAL:
        curLan.append("portugal/");
        break;
	default:
		curLan.append("chineses/");
		break;
	}

	QSettings nameCfg(XPAD_IO_NAME, QSettings::IniFormat);
	nameCfg.setIniCodec("UTF-8");
	// *************************************************
	// 输入变量名称
	inputVarName.clear();
    // 主控模块扩展输入
    if(CMBProtocol::GetSysTypeHigh() == BOARD_VERSION_H750_DVS)
    {
        inputVarName[MAIN_VAR_X00] = nameCfg.value(curLan + QString("MAIN_VAR_X00"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X01] = nameCfg.value(curLan + QString("MAIN_VAR_X01"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X02] = nameCfg.value(curLan + QString("MAIN_VAR_X02"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X03] = nameCfg.value(curLan + QString("MAIN_VAR_X03"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X04] = nameCfg.value(curLan + QString("MAIN_VAR_X04"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X05] = nameCfg.value(curLan + QString("MAIN_VAR_X05"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X06] = nameCfg.value(curLan + QString("MAIN_VAR_X06"), "Main").toString();
        inputVarName[MAIN_VAR_X07] = nameCfg.value(curLan + QString("MAIN_VAR_X07"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X08] = nameCfg.value(curLan + QString("MAIN_VAR_X08"), tr("吸具1")).toString();
        inputVarName[MAIN_VAR_X09] = nameCfg.value(curLan + QString("MAIN_VAR_X09"), tr("吸具2")).toString();
        inputVarName[MAIN_VAR_X10] = nameCfg.value(curLan + QString("MAIN_VAR_X10"), tr("抱具1")).toString();
        inputVarName[MAIN_VAR_X11] = nameCfg.value(curLan + QString("MAIN_VAR_X11"), tr("抱具2")).toString();
        inputVarName[MAIN_VAR_X12] = nameCfg.value(curLan + QString("MAIN_VAR_X12"), tr("抱具3")).toString();
        inputVarName[MAIN_VAR_X13] = nameCfg.value(curLan + QString("MAIN_VAR_X13"), tr("抱具4")).toString();
        inputVarName[MAIN_VAR_X14] = nameCfg.value(curLan + QString("MAIN_VAR_X14"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X15] = nameCfg.value(curLan + QString("MAIN_VAR_X15"), "Main").toString();
        inputVarName[MAIN_VAR_X16] = nameCfg.value(curLan + QString("MAIN_VAR_X16"), "Main").toString();
        inputVarName[MAIN_VAR_X17] = nameCfg.value(curLan + QString("MAIN_VAR_X17"), "Main").toString();
        inputVarName[MAIN_VAR_X18] = nameCfg.value(curLan + QString("MAIN_VAR_X18"), "Main").toString();
        inputVarName[MAIN_VAR_X19] = nameCfg.value(curLan + QString("MAIN_VAR_X19"), "Main").toString();
        inputVarName[MAIN_VAR_X20] = nameCfg.value(curLan + QString("MAIN_VAR_X20"), "Main").toString();
        inputVarName[MAIN_VAR_X21] = nameCfg.value(curLan + QString("MAIN_VAR_X21"), "Main").toString();
        inputVarName[MAIN_VAR_X22] = nameCfg.value(curLan + QString("MAIN_VAR_X22"), tr("低气压检测")).toString();
        inputVarName[MAIN_VAR_X23] = nameCfg.value(curLan + QString("MAIN_VAR_X23"), "Main").toString();
    }
    else if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_E0)
    {

    inputVarName[MAIN_VAR_X00] = nameCfg.value(curLan + QString("MAIN_VAR_X00"), "Main").toString();
    inputVarName[MAIN_VAR_X01] = nameCfg.value(curLan + QString("MAIN_VAR_X01"), "Main").toString();
    inputVarName[MAIN_VAR_X02] = nameCfg.value(curLan + QString("MAIN_VAR_X02"), "Main").toString();
    inputVarName[MAIN_VAR_X03] = nameCfg.value(curLan + QString("MAIN_VAR_X03"), "Main").toString();
    inputVarName[MAIN_VAR_X04] = nameCfg.value(curLan + QString("MAIN_VAR_X04"), "Main").toString();
    inputVarName[MAIN_VAR_X05] = nameCfg.value(curLan + QString("MAIN_VAR_X05"), "Main").toString();
    inputVarName[MAIN_VAR_X06] = nameCfg.value(curLan + QString("MAIN_VAR_X06"), "Main").toString();
    inputVarName[MAIN_VAR_X07] = nameCfg.value(curLan + QString("MAIN_VAR_X07"), tr("低气压检测")).toString();
    inputVarName[MAIN_VAR_X08] = nameCfg.value(curLan + QString("MAIN_VAR_X08"), "Main").toString();
    inputVarName[MAIN_VAR_X09] = nameCfg.value(curLan + QString("MAIN_VAR_X09"), "Main").toString();
    inputVarName[MAIN_VAR_X10] = nameCfg.value(curLan + QString("MAIN_VAR_X10"), "Main").toString();
    inputVarName[MAIN_VAR_X11] = nameCfg.value(curLan + QString("MAIN_VAR_X11"), "Main").toString();
        inputVarName[MAIN_VAR_X12] = nameCfg.value(curLan + QString("MAIN_VAR_X12"), tr("吸具1")).toString();
        inputVarName[MAIN_VAR_X13] = nameCfg.value(curLan + QString("MAIN_VAR_X13"), tr("夹具1")).toString();
        inputVarName[MAIN_VAR_X14] = nameCfg.value(curLan + QString("MAIN_VAR_X14"), tr("抱具1")).toString();
        inputVarName[MAIN_VAR_X15] = nameCfg.value(curLan + QString("MAIN_VAR_X15"), "Main").toString();
        inputVarName[MAIN_VAR_X16] = nameCfg.value(curLan + QString("MAIN_VAR_X16"), "Main").toString();
        inputVarName[MAIN_VAR_X17] = nameCfg.value(curLan + QString("MAIN_VAR_X17"), "Main").toString();
        inputVarName[MAIN_VAR_X18] = nameCfg.value(curLan + QString("MAIN_VAR_X18"), "Main").toString();
        inputVarName[MAIN_VAR_X19] = nameCfg.value(curLan + QString("MAIN_VAR_X19"), "Main").toString();
        inputVarName[MAIN_VAR_X20] = nameCfg.value(curLan + QString("MAIN_VAR_X20"), "Main").toString();
        inputVarName[MAIN_VAR_X21] = nameCfg.value(curLan + QString("MAIN_VAR_X21"), "Main").toString();
        inputVarName[MAIN_VAR_X22] = nameCfg.value(curLan + QString("MAIN_VAR_X22"), "Main").toString();
        inputVarName[MAIN_VAR_X23] = nameCfg.value(curLan + QString("MAIN_VAR_X23"), "Main").toString();
    }
    else if(CMBProtocol::GetSysTypeHigh() == BOARD_VERSION_H750_5AXIS)
    {

        inputVarName[MAIN_VAR_X00] = nameCfg.value(curLan + QString("MAIN_VAR_X00"), "Main").toString();
        inputVarName[MAIN_VAR_X01] = nameCfg.value(curLan + QString("MAIN_VAR_X01"), "Main").toString();
        inputVarName[MAIN_VAR_X02] = nameCfg.value(curLan + QString("MAIN_VAR_X02"), "Main").toString();
        inputVarName[MAIN_VAR_X03] = nameCfg.value(curLan + QString("MAIN_VAR_X03"), "Main").toString();
        inputVarName[MAIN_VAR_X04] = nameCfg.value(curLan + QString("MAIN_VAR_X04"), "Main").toString();
        inputVarName[MAIN_VAR_X05] = nameCfg.value(curLan + QString("MAIN_VAR_X05"), "Main").toString();
        inputVarName[MAIN_VAR_X06] = nameCfg.value(curLan + QString("MAIN_VAR_X06"), "Main").toString();
        inputVarName[MAIN_VAR_X07] = nameCfg.value(curLan + QString("MAIN_VAR_X07"), tr("低气压检测")).toString();
        inputVarName[MAIN_VAR_X08] = nameCfg.value(curLan + QString("MAIN_VAR_X08"), "Main").toString();
#if FACTORY == FA_BOHANG
        inputVarName[MAIN_VAR_X09] = nameCfg.value(curLan + QString("MAIN_VAR_X09"), tr("光栅1")).toString();
        inputVarName[MAIN_VAR_X10] = nameCfg.value(curLan + QString("MAIN_VAR_X10"), tr("光栅2")).toString();
#else
        inputVarName[MAIN_VAR_X09] = nameCfg.value(curLan + QString("MAIN_VAR_X09"), "Main").toString();
        inputVarName[MAIN_VAR_X10] = nameCfg.value(curLan + QString("MAIN_VAR_X10"), "Main").toString();
#endif
        inputVarName[MAIN_VAR_X11] = nameCfg.value(curLan + QString("MAIN_VAR_X11"), "Main").toString();
        inputVarName[MAIN_VAR_X12] = nameCfg.value(curLan + QString("MAIN_VAR_X12"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X13] = nameCfg.value(curLan + QString("MAIN_VAR_X13"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X14] = nameCfg.value(curLan + QString("MAIN_VAR_X14"), tr("吸具1")).toString();
        inputVarName[MAIN_VAR_X15] = nameCfg.value(curLan + QString("MAIN_VAR_X15"), tr("吸具2")).toString();
        inputVarName[MAIN_VAR_X16] = nameCfg.value(curLan + QString("MAIN_VAR_X16"), tr("抱具1")).toString();
		inputVarName[MAIN_VAR_X17] = nameCfg.value(curLan + QString("MAIN_VAR_X17"), tr("抱具2")).toString();
		inputVarName[MAIN_VAR_X18] = nameCfg.value(curLan + QString("MAIN_VAR_X18"), tr("抱具3")).toString();
        inputVarName[MAIN_VAR_X19] = nameCfg.value(curLan + QString("MAIN_VAR_X19"), tr("抱具4")).toString();
#if FACTORY == FA_BOHANG
        inputVarName[MAIN_VAR_X20] = nameCfg.value(curLan + QString("MAIN_VAR_X20"), tr("上胚启动")).toString();
#else
        inputVarName[MAIN_VAR_X20] = nameCfg.value(curLan + QString("MAIN_VAR_X20"), "Main").toString();
#endif
#if (FACTORY == FA_BEISHITE_CN)
        inputVarName[MAIN_VAR_X21] = nameCfg.value(curLan + QString("MAIN_VAR_X21"), tr("副夹")).toString();
#else
        inputVarName[MAIN_VAR_X21] = nameCfg.value(curLan + QString("MAIN_VAR_X21"), "Main").toString();
#endif


        inputVarName[MAIN_VAR_X22] = nameCfg.value(curLan + QString("MAIN_VAR_X22"), "Main").toString();
        inputVarName[MAIN_VAR_X23] = nameCfg.value(curLan + QString("MAIN_VAR_X23"), "Main").toString();
    }
    else if(CMBProtocol::GetSysTypeHigh() == BOARD_VERSION_ECAT_CANOPEN)
    {

        inputVarName[MAIN_VAR_X00] = nameCfg.value(curLan + QString("MAIN_VAR_X00"), "Main").toString();
        inputVarName[MAIN_VAR_X01] = nameCfg.value(curLan + QString("MAIN_VAR_X01"), "Main").toString();
        inputVarName[MAIN_VAR_X02] = nameCfg.value(curLan + QString("MAIN_VAR_X02"), "Main").toString();
        inputVarName[MAIN_VAR_X03] = nameCfg.value(curLan + QString("MAIN_VAR_X03"), "Main").toString();
        inputVarName[MAIN_VAR_X04] = nameCfg.value(curLan + QString("MAIN_VAR_X04"), "Main").toString();
        inputVarName[MAIN_VAR_X05] = nameCfg.value(curLan + QString("MAIN_VAR_X05"), "Main").toString();
        inputVarName[MAIN_VAR_X06] = nameCfg.value(curLan + QString("MAIN_VAR_X06"), "Main").toString();
        inputVarName[MAIN_VAR_X07] = nameCfg.value(curLan + QString("MAIN_VAR_X07"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X08] = nameCfg.value(curLan + QString("MAIN_VAR_X08"), "Main").toString();
        inputVarName[MAIN_VAR_X09] = nameCfg.value(curLan + QString("MAIN_VAR_X09"), "Main").toString();
        inputVarName[MAIN_VAR_X10] = nameCfg.value(curLan + QString("MAIN_VAR_X10"), "Main").toString();
        inputVarName[MAIN_VAR_X11] = nameCfg.value(curLan + QString("MAIN_VAR_X11"), "Main").toString();
        inputVarName[MAIN_VAR_X12] = nameCfg.value(curLan + QString("MAIN_VAR_X12"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X13] = nameCfg.value(curLan + QString("MAIN_VAR_X13"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X14] = nameCfg.value(curLan + QString("MAIN_VAR_X14"), "Main").toString();
        inputVarName[MAIN_VAR_X15] = nameCfg.value(curLan + QString("MAIN_VAR_X15"), "Main").toString();
        inputVarName[MAIN_VAR_X16] = nameCfg.value(curLan + QString("MAIN_VAR_X16"), tr("吸具1")).toString();
        inputVarName[MAIN_VAR_X17] = nameCfg.value(curLan + QString("MAIN_VAR_X17"), tr("吸具2")).toString();
        inputVarName[MAIN_VAR_X18] = nameCfg.value(curLan + QString("MAIN_VAR_X18"), tr("抱具1")).toString();
        inputVarName[MAIN_VAR_X19] = nameCfg.value(curLan + QString("MAIN_VAR_X19"), tr("抱具2")).toString();
        inputVarName[MAIN_VAR_X20] = nameCfg.value(curLan + QString("MAIN_VAR_X20"), tr("抱具3")).toString();
        inputVarName[MAIN_VAR_X21] = nameCfg.value(curLan + QString("MAIN_VAR_X21"), tr("抱具4")).toString();
        inputVarName[MAIN_VAR_X22] = nameCfg.value(curLan + QString("MAIN_VAR_X22"), tr("吸具3")).toString();
        inputVarName[MAIN_VAR_X23] = nameCfg.value(curLan + QString("MAIN_VAR_X23"), tr("吸具4")).toString();
    }
    else
    {
       inputVarName[MAIN_VAR_X00] = nameCfg.value(curLan + QString("MAIN_VAR_X00"), "Main").toString();
       inputVarName[MAIN_VAR_X01] = nameCfg.value(curLan + QString("MAIN_VAR_X01"), "Main").toString();
       inputVarName[MAIN_VAR_X02] = nameCfg.value(curLan + QString("MAIN_VAR_X02"), "Main").toString();
       inputVarName[MAIN_VAR_X03] = nameCfg.value(curLan + QString("MAIN_VAR_X03"), "Main").toString();
       inputVarName[MAIN_VAR_X04] = nameCfg.value(curLan + QString("MAIN_VAR_X04"), "Main").toString();
       inputVarName[MAIN_VAR_X05] = nameCfg.value(curLan + QString("MAIN_VAR_X05"), "Main").toString();
       inputVarName[MAIN_VAR_X06] = nameCfg.value(curLan + QString("MAIN_VAR_X06"), "Main").toString();
       inputVarName[MAIN_VAR_X07] = nameCfg.value(curLan + QString("MAIN_VAR_X07"), tr("低气压检测")).toString();
       inputVarName[MAIN_VAR_X08] = nameCfg.value(curLan + QString("MAIN_VAR_X08"), "Main").toString();
       inputVarName[MAIN_VAR_X09] = nameCfg.value(curLan + QString("MAIN_VAR_X09"), "Main").toString();
       inputVarName[MAIN_VAR_X10] = nameCfg.value(curLan + QString("MAIN_VAR_X10"), "Main").toString();
       inputVarName[MAIN_VAR_X11] = nameCfg.value(curLan + QString("MAIN_VAR_X11"), "Main").toString();
       inputVarName[MAIN_VAR_X12] = nameCfg.value(curLan + QString("MAIN_VAR_X12"), tr("Main")).toString();
       inputVarName[MAIN_VAR_X13] = nameCfg.value(curLan + QString("MAIN_VAR_X13"), tr("Main")).toString();
       inputVarName[MAIN_VAR_X14] = nameCfg.value(curLan + QString("MAIN_VAR_X14"), tr("Main")).toString();
        inputVarName[MAIN_VAR_X15] = nameCfg.value(curLan + QString("MAIN_VAR_X15"), "Main").toString();
        inputVarName[MAIN_VAR_X16] = nameCfg.value(curLan + QString("MAIN_VAR_X16"), "Main").toString();
        inputVarName[MAIN_VAR_X17] = nameCfg.value(curLan + QString("MAIN_VAR_X17"), "Main").toString();
        inputVarName[MAIN_VAR_X18] = nameCfg.value(curLan + QString("MAIN_VAR_X18"), "Main").toString();
        inputVarName[MAIN_VAR_X19] = nameCfg.value(curLan + QString("MAIN_VAR_X19"), "Main").toString();
	inputVarName[MAIN_VAR_X20] = nameCfg.value(curLan + QString("MAIN_VAR_X20"), "Main").toString();
	inputVarName[MAIN_VAR_X21] = nameCfg.value(curLan + QString("MAIN_VAR_X21"), "Main").toString();
	inputVarName[MAIN_VAR_X22] = nameCfg.value(curLan + QString("MAIN_VAR_X22"), "Main").toString();
	inputVarName[MAIN_VAR_X23] = nameCfg.value(curLan + QString("MAIN_VAR_X23"), "Main").toString();
    }
	inputVarName[MAIN_VAR_X24] = nameCfg.value(curLan + QString("MAIN_VAR_X24"), "Main").toString();
	inputVarName[MAIN_VAR_X25] = nameCfg.value(curLan + QString("MAIN_VAR_X25"), "Main").toString();
#if (FACTORY == FA_BEISHITE_CN)
    inputVarName[MAIN_VAR_X26] = nameCfg.value(curLan + QString("MAIN_VAR_X26"), tr("吸3")).toString();
    inputVarName[MAIN_VAR_X27] = nameCfg.value(curLan + QString("MAIN_VAR_X27"), tr("吸4")).toString();
#else
    inputVarName[MAIN_VAR_X26] = nameCfg.value(curLan + QString("MAIN_VAR_X26"), "Main").toString();
    inputVarName[MAIN_VAR_X27] = nameCfg.value(curLan + QString("MAIN_VAR_X27"), "Main").toString();
#endif
    inputVarName[MAIN_VAR_X28] = nameCfg.value(curLan + QString("MAIN_VAR_X28"), "Main").toString();
    inputVarName[MAIN_VAR_X29] = nameCfg.value(curLan + QString("MAIN_VAR_X29"), "Main").toString();
    inputVarName[MAIN_VAR_X30] = nameCfg.value(curLan + QString("MAIN_VAR_X30"), "Main").toString();
    inputVarName[MAIN_VAR_X31] = nameCfg.value(curLan + QString("MAIN_VAR_X31"), "Main").toString();
    inputVarName[MAIN_VAR_X32] = nameCfg.value(curLan + QString("MAIN_VAR_X32"), "Main").toString();
    inputVarName[MAIN_VAR_X33] = nameCfg.value(curLan + QString("MAIN_VAR_X33"), "Main").toString();
    inputVarName[MAIN_VAR_X34] = nameCfg.value(curLan + QString("MAIN_VAR_X34"), "Main").toString();
    inputVarName[MAIN_VAR_X35] = nameCfg.value(curLan + QString("MAIN_VAR_X35"), "Main").toString();
    inputVarName[MAIN_VAR_X36] = nameCfg.value(curLan + QString("MAIN_VAR_X36"), "Main").toString();
    inputVarName[MAIN_VAR_X37] = nameCfg.value(curLan + QString("MAIN_VAR_X37"), "Main").toString();
    inputVarName[MAIN_VAR_X38] = nameCfg.value(curLan + QString("MAIN_VAR_X38"), "Main").toString();
    inputVarName[MAIN_VAR_X39] = nameCfg.value(curLan + QString("MAIN_VAR_X39"), "Main").toString();
    inputVarName[MAIN_VAR_X40] = nameCfg.value(curLan + QString("MAIN_VAR_X40"), "Main").toString();
    inputVarName[MAIN_VAR_X41] = nameCfg.value(curLan + QString("MAIN_VAR_X41"), "Main").toString();
    inputVarName[MAIN_VAR_X42] = nameCfg.value(curLan + QString("MAIN_VAR_X42"), "Main").toString();
    inputVarName[MAIN_VAR_X43] = nameCfg.value(curLan + QString("MAIN_VAR_X43"), "Main").toString();
    inputVarName[MAIN_VAR_X44] = nameCfg.value(curLan + QString("MAIN_VAR_X44"), "Main").toString();
    inputVarName[MAIN_VAR_X45] = nameCfg.value(curLan + QString("MAIN_VAR_X45"), "Main").toString();
    inputVarName[MAIN_VAR_X46] = nameCfg.value(curLan + QString("MAIN_VAR_X46"), "Main").toString();
    inputVarName[MAIN_VAR_X47] = nameCfg.value(curLan + QString("MAIN_VAR_X47"), "Main").toString();
    inputVarName[MAIN_VAR_X48] = nameCfg.value(curLan + QString("MAIN_VAR_X48"), "Main").toString();
    inputVarName[MAIN_VAR_X49] = nameCfg.value(curLan + QString("MAIN_VAR_X49"), "Main").toString();
    inputVarName[MAIN_VAR_X50] = nameCfg.value(curLan + QString("MAIN_VAR_X50"), "Main").toString();
    inputVarName[MAIN_VAR_X51] = nameCfg.value(curLan + QString("MAIN_VAR_X51"), "Main").toString();
    inputVarName[MAIN_VAR_X52] = nameCfg.value(curLan + QString("MAIN_VAR_X52"), "Main").toString();
    inputVarName[MAIN_VAR_X53] = nameCfg.value(curLan + QString("MAIN_VAR_X53"), "Main").toString();
    inputVarName[MAIN_VAR_X54] = nameCfg.value(curLan + QString("MAIN_VAR_X54"), "Main").toString();
    inputVarName[MAIN_VAR_X55] = nameCfg.value(curLan + QString("MAIN_VAR_X55"), "Main").toString();
    inputVarName[MAIN_VAR_X56] = nameCfg.value(curLan + QString("MAIN_VAR_X56"), "Main").toString();
    inputVarName[MAIN_VAR_X57] = nameCfg.value(curLan + QString("MAIN_VAR_X57"), "Main").toString();
    inputVarName[MAIN_VAR_X58] = nameCfg.value(curLan + QString("MAIN_VAR_X58"), "Main").toString();
    inputVarName[MAIN_VAR_X59] = nameCfg.value(curLan + QString("MAIN_VAR_X59"), "Main").toString();
    inputVarName[MAIN_VAR_X60] = nameCfg.value(curLan + QString("MAIN_VAR_X60"), "Main").toString();
    inputVarName[MAIN_VAR_X61] = nameCfg.value(curLan + QString("MAIN_VAR_X61"), "Main").toString();
    inputVarName[MAIN_VAR_X62] = nameCfg.value(curLan + QString("MAIN_VAR_X62"), "Main").toString();
    inputVarName[MAIN_VAR_X63] = nameCfg.value(curLan + QString("MAIN_VAR_X63"), "Main").toString();
	// 扩展模块1扩展输入
    inputVarName[EM1_VAR_X00] = nameCfg.value(curLan + QString("EM1_VAR_X00"), tr("EM1")).toString();
    inputVarName[EM1_VAR_X01] = nameCfg.value(curLan + QString("EM1_VAR_X01"), tr("EM1")).toString();
#if ((FACTORY == FA_KEWEI) || (FACTORY == FA_KEHAO) || (FACTORY == FA_WOERDA) || (FACTORY == FA_ZHENJIE) || (FACTORY == FA_SINROBOT_4AS_YZ))
	inputVarName[EM1_VAR_X02] = nameCfg.value(curLan + QString("EM1_VAR_X02"), tr("EM1")).toString();
    inputVarName[EM1_VAR_X03] = nameCfg.value(curLan + QString("EM1_VAR_X03"), tr("爪手产品检知1")).toString();
    inputVarName[EM1_VAR_X04] = nameCfg.value(curLan + QString("EM1_VAR_X04"), tr("爪手产品检知2")).toString();
    inputVarName[EM1_VAR_X05] = nameCfg.value(curLan + QString("EM1_VAR_X05"), tr("备用")).toString();
    inputVarName[EM1_VAR_X06] = nameCfg.value(curLan + QString("EM1_VAR_X06"), tr("备用")).toString();
    inputVarName[EM1_VAR_X07] = nameCfg.value(curLan + QString("EM1_VAR_X07"), tr("EM1")).toString();
    inputVarName[EM1_VAR_X09] = nameCfg.value(curLan + QString("EM1_VAR_X09"), tr("压铸完成")).toString();
#else
    if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_YZ)
    {
        inputVarName[EM1_VAR_X02] = nameCfg.value(curLan + QString("EM1_VAR_X02"), tr("EM1")).toString();
        inputVarName[EM1_VAR_X03] = nameCfg.value(curLan + QString("EM1_VAR_X03"), tr("爪手产品检知1")).toString();
        inputVarName[EM1_VAR_X04] = nameCfg.value(curLan + QString("EM1_VAR_X04"), tr("爪手产品检知2")).toString();
        inputVarName[EM1_VAR_X05] = nameCfg.value(curLan + QString("EM1_VAR_X05"), tr("备用")).toString();
        inputVarName[EM1_VAR_X06] = nameCfg.value(curLan + QString("EM1_VAR_X06"), tr("备用")).toString();
        inputVarName[EM1_VAR_X07] = nameCfg.value(curLan + QString("EM1_VAR_X07"), tr("EM1")).toString();
        inputVarName[EM1_VAR_X09] = nameCfg.value(curLan + QString("EM1_VAR_X09"), tr("压铸完成")).toString();
    }
   else if ((CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_E0) || (CMBProtocol::GetSysTypeHigh() == BOARD_VERSION_H750_5AXIS) || (CMBProtocol::GetSysTypeHigh() == BOARD_VERSION_H750_DVS))
    {
        inputVarName[EM1_VAR_X02] = nameCfg.value(curLan + QString("EM1_VAR_X02"), "EM1").toString();
        inputVarName[EM1_VAR_X03] = nameCfg.value(curLan + QString("EM1_VAR_X03"), "EM1").toString();
        inputVarName[EM1_VAR_X04] = nameCfg.value(curLan + QString("EM1_VAR_X04"), "EM1").toString();
        inputVarName[EM1_VAR_X05] = nameCfg.value(curLan + QString("EM1_VAR_X05"), "EM1").toString();
        inputVarName[EM1_VAR_X06] = nameCfg.value(curLan + QString("EM1_VAR_X06"), "EM1").toString();
        inputVarName[EM1_VAR_X07] = nameCfg.value(curLan + QString("EM1_VAR_X07"), "EM1").toString();
        inputVarName[EM1_VAR_X09] = nameCfg.value(curLan + QString("EM1_VAR_X09"), "EM1").toString();
    }
    else
    {
        inputVarName[EM1_VAR_X02] = nameCfg.value(curLan + QString("EM1_VAR_X02"), tr("吸具1")).toString();
        inputVarName[EM1_VAR_X03] = nameCfg.value(curLan + QString("EM1_VAR_X03"), tr("吸具2")).toString();
        inputVarName[EM1_VAR_X04] = nameCfg.value(curLan + QString("EM1_VAR_X04"), tr("抱具1")).toString();
        inputVarName[EM1_VAR_X05] = nameCfg.value(curLan + QString("EM1_VAR_X05"), tr("抱具2")).toString();
        inputVarName[EM1_VAR_X06] = nameCfg.value(curLan + QString("EM1_VAR_X06"), tr("抱具3")).toString();
        inputVarName[EM1_VAR_X07] = nameCfg.value(curLan + QString("EM1_VAR_X07"), tr("抱具4")).toString();
        inputVarName[EM1_VAR_X09] = nameCfg.value(curLan + QString("EM1_VAR_X09"), "EM1").toString();
    }
#endif
    inputVarName[EM1_VAR_X08] = nameCfg.value(curLan + QString("EM1_VAR_X08"), "EM1").toString();
    inputVarName[EM1_VAR_X10] = nameCfg.value(curLan + QString("EM1_VAR_X10"), "EM1").toString();
    inputVarName[EM1_VAR_X11] = nameCfg.value(curLan + QString("EM1_VAR_X11"), "EM1").toString();
    inputVarName[EM1_VAR_X12] = nameCfg.value(curLan + QString("EM1_VAR_X12"), "EM1").toString();
    inputVarName[EM1_VAR_X13] = nameCfg.value(curLan + QString("EM1_VAR_X13"), "EM1").toString();
    inputVarName[EM1_VAR_X14] = nameCfg.value(curLan + QString("EM1_VAR_X14"), "EM1").toString();
    inputVarName[EM1_VAR_X15] = nameCfg.value(curLan + QString("EM1_VAR_X15"), "EM1").toString();
    // 扩展模块2扩展输入
    inputVarName[EM2_VAR_X00] = nameCfg.value(curLan + QString("EM2_VAR_X00"), "EM2").toString();
    inputVarName[EM2_VAR_X01] = nameCfg.value(curLan + QString("EM2_VAR_X01"), "EM2").toString();
    inputVarName[EM2_VAR_X02] = nameCfg.value(curLan + QString("EM2_VAR_X02"), "EM2").toString();
    inputVarName[EM2_VAR_X03] = nameCfg.value(curLan + QString("EM2_VAR_X03"), "EM2").toString();
    inputVarName[EM2_VAR_X04] = nameCfg.value(curLan + QString("EM2_VAR_X04"), "EM2").toString();
    inputVarName[EM2_VAR_X05] = nameCfg.value(curLan + QString("EM2_VAR_X05"), "EM2").toString();
    inputVarName[EM2_VAR_X06] = nameCfg.value(curLan + QString("EM2_VAR_X06"), "EM2").toString();
    inputVarName[EM2_VAR_X07] = nameCfg.value(curLan + QString("EM2_VAR_X07"), "EM2").toString();
    inputVarName[EM2_VAR_X08] = nameCfg.value(curLan + QString("EM2_VAR_X08"), "EM2").toString();
    inputVarName[EM2_VAR_X09] = nameCfg.value(curLan + QString("EM2_VAR_X09"), "EM2").toString();
    inputVarName[EM2_VAR_X10] = nameCfg.value(curLan + QString("EM2_VAR_X10"), "EM2").toString();
    inputVarName[EM2_VAR_X11] = nameCfg.value(curLan + QString("EM2_VAR_X11"), "EM2").toString();
    inputVarName[EM2_VAR_X12] = nameCfg.value(curLan + QString("EM2_VAR_X12"), "EM2").toString();
    inputVarName[EM2_VAR_X13] = nameCfg.value(curLan + QString("EM2_VAR_X13"), "EM2").toString();
    inputVarName[EM2_VAR_X14] = nameCfg.value(curLan + QString("EM2_VAR_X14"), "EM2").toString();
    inputVarName[EM2_VAR_X15] = nameCfg.value(curLan + QString("EM2_VAR_X15"), "EM2").toString();
    // 扩展模块3扩展输入
    inputVarName[EM3_VAR_X00] = nameCfg.value(curLan + QString("EM3_VAR_X00"), "EM3").toString();
    inputVarName[EM3_VAR_X01] = nameCfg.value(curLan + QString("EM3_VAR_X01"), "EM3").toString();
    inputVarName[EM3_VAR_X02] = nameCfg.value(curLan + QString("EM3_VAR_X02"), "EM3").toString();
    inputVarName[EM3_VAR_X03] = nameCfg.value(curLan + QString("EM3_VAR_X03"), "EM3").toString();
    inputVarName[EM3_VAR_X04] = nameCfg.value(curLan + QString("EM3_VAR_X04"), "EM3").toString();
    inputVarName[EM3_VAR_X05] = nameCfg.value(curLan + QString("EM3_VAR_X05"), "EM3").toString();
    inputVarName[EM3_VAR_X06] = nameCfg.value(curLan + QString("EM3_VAR_X06"), "EM3").toString();
    inputVarName[EM3_VAR_X07] = nameCfg.value(curLan + QString("EM3_VAR_X07"), "EM3").toString();
    inputVarName[EM3_VAR_X08] = nameCfg.value(curLan + QString("EM3_VAR_X08"), "EM3").toString();
    inputVarName[EM3_VAR_X09] = nameCfg.value(curLan + QString("EM3_VAR_X09"), "EM3").toString();
    inputVarName[EM3_VAR_X10] = nameCfg.value(curLan + QString("EM3_VAR_X10"), "EM3").toString();
    inputVarName[EM3_VAR_X11] = nameCfg.value(curLan + QString("EM3_VAR_X11"), "EM3").toString();
    inputVarName[EM3_VAR_X12] = nameCfg.value(curLan + QString("EM3_VAR_X12"), "EM3").toString();
    inputVarName[EM3_VAR_X13] = nameCfg.value(curLan + QString("EM3_VAR_X13"), "EM3").toString();
    inputVarName[EM3_VAR_X14] = nameCfg.value(curLan + QString("EM3_VAR_X14"), "EM3").toString();
    inputVarName[EM3_VAR_X15] = nameCfg.value(curLan + QString("EM3_VAR_X15"), "EM3").toString();
    // 扩展模块4扩展输入
    inputVarName[EM4_VAR_X00] = nameCfg.value(curLan + QString("EM4_VAR_X00"), "EM4").toString();
    inputVarName[EM4_VAR_X01] = nameCfg.value(curLan + QString("EM4_VAR_X01"), "EM4").toString();
    inputVarName[EM4_VAR_X02] = nameCfg.value(curLan + QString("EM4_VAR_X02"), "EM4").toString();
    inputVarName[EM4_VAR_X03] = nameCfg.value(curLan + QString("EM4_VAR_X03"), "EM4").toString();
    inputVarName[EM4_VAR_X04] = nameCfg.value(curLan + QString("EM4_VAR_X04"), "EM4").toString();
    inputVarName[EM4_VAR_X05] = nameCfg.value(curLan + QString("EM4_VAR_X05"), "EM4").toString();
    inputVarName[EM4_VAR_X06] = nameCfg.value(curLan + QString("EM4_VAR_X06"), "EM4").toString();
    inputVarName[EM4_VAR_X07] = nameCfg.value(curLan + QString("EM4_VAR_X07"), "EM4").toString();
    inputVarName[EM4_VAR_X08] = nameCfg.value(curLan + QString("EM4_VAR_X08"), "EM4").toString();
    inputVarName[EM4_VAR_X09] = nameCfg.value(curLan + QString("EM4_VAR_X09"), "EM4").toString();
    inputVarName[EM4_VAR_X10] = nameCfg.value(curLan + QString("EM4_VAR_X10"), "EM4").toString();
    inputVarName[EM4_VAR_X11] = nameCfg.value(curLan + QString("EM4_VAR_X11"), "EM4").toString();
    inputVarName[EM4_VAR_X12] = nameCfg.value(curLan + QString("EM4_VAR_X12"), "EM4").toString();
    inputVarName[EM4_VAR_X13] = nameCfg.value(curLan + QString("EM4_VAR_X13"), "EM4").toString();
    inputVarName[EM4_VAR_X14] = nameCfg.value(curLan + QString("EM4_VAR_X14"), "EM4").toString();
    inputVarName[EM4_VAR_X15] = nameCfg.value(curLan + QString("EM4_VAR_X15"), "EM4").toString();
    // 初始化注塑机输入
#if ((FACTORY == FA_KEWEI) || (FACTORY == FA_KEHAO) || (FACTORY == FA_YIDAO) || (FACTORY == FA_WOERDA) || (FACTORY == FA_ZHENJIE) || (FACTORY == FA_SINROBOT_4AS_YZ))
    inputVarName[IMM_VAR_IN_STOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_STOP"), tr("ESM 紧急停止", "翻译时无论什么语言一律使用(中文除外): IMM-ESM")).toString();
    inputVarName[IMM_VAR_IN_SAFE] = nameCfg.value(curLan + QString("IMM_VAR_IN_SAFE"), tr("SDM 安全设备", "翻译时无论什么语言一律使用(中文除外): IMM-SDM")).toString();
    inputVarName[IMM_VAR_IN_REJECT] = nameCfg.value(curLan + QString("IMM_VAR_IN_REJECT"), tr("REJ 成型不良", "翻译时无论什么语言一律使用(中文除外): IMM-REJ")).toString();
    inputVarName[IMM_VAR_IN_MCP] = nameCfg.value(curLan + QString("IMM_VAR_IN_MCP"), tr("MCP 关模完", "翻译时无论什么语言一律使用(中文除外): IMM-MC")).toString();
    inputVarName[IMM_VAR_IN_MOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_MOP"), tr("MOP 开模完", "翻译时无论什么语言一律使用(中文除外): IMM-MOP")).toString();
    inputVarName[IMM_VAR_IN_IMOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_IMOP"), tr("IMOP 开模中间", "翻译时无论什么语言一律使用(中文除外): IMM-IMOP")).toString();
    inputVarName[IMM_VAR_IN_AUTO] = nameCfg.value(curLan + QString("IMM_VAR_IN_AUTO"), tr("AUTO 全自动", "翻译时无论什么语言一律使用(中文除外): IMM-AUTO")).toString();
    inputVarName[IMM_VAR_IN_EBP] = nameCfg.value(curLan + QString("IMM_VAR_IN_EBP"), tr("压射完成", "翻译时无论什么语言一律使用(中文除外): IMM-EBP")).toString();
    inputVarName[IMM_VAR_IN_EFP] = nameCfg.value(curLan + QString("IMM_VAR_IN_EFP"), tr("顶针进位", "翻译时无论什么语言一律使用(中文除外): IMM-EFP")).toString();
    inputVarName[IMM_VAR_IN_MID] = nameCfg.value(curLan + QString("IMM_VAR_IN_MID"), tr("MID 中板模确认", "翻译时无论什么语言一律使用(中文除外): IMM-MMOP")).toString();
#elif FACTORY == FA_SINROBOT_JC
    inputVarName[IMM_VAR_IN_MOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_MOP"), tr("MOP 加工完成", "翻译时无论什么语言一律使用(中文除外): IMM-MOP")).toString();
    inputVarName[IMM_VAR_IN_SAFE] = nameCfg.value(curLan + QString("IMM_VAR_IN_SAFE"), tr("SDM 防护门", "翻译时无论什么语言一律使用(中文除外): IMM-SDM")).toString();
    inputVarName[IMM_VAR_IN_MCP] = nameCfg.value(curLan + QString("IMM_VAR_IN_MCP"), tr("MCP 加工启动", "翻译时无论什么语言一律使用(中文除外): IMM-MC")).toString();
    inputVarName[IMM_VAR_IN_STOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_STOP"), tr("ESM 急停", "翻译时无论什么语言一律使用(中文除外): IMM-ESM")).toString();
    inputVarName[IMM_VAR_IN_REJECT] = nameCfg.value(curLan + QString("IMM_VAR_IN_REJECT"), tr("REJ 成型不良", "翻译时无论什么语言一律使用(中文除外): IMM-REJ")).toString();
    inputVarName[IMM_VAR_IN_IMOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_IMOP"), tr("IMOP 开模中间", "翻译时无论什么语言一律使用(中文除外): IMM-IMOP")).toString();
    inputVarName[IMM_VAR_IN_AUTO] = nameCfg.value(curLan + QString("IMM_VAR_IN_AUTO"), tr("AUTO 全自动", "翻译时无论什么语言一律使用(中文除外): IMM-AUTO")).toString();
    inputVarName[IMM_VAR_IN_EBP] = nameCfg.value(curLan + QString("IMM_VAR_IN_EBP"), tr("压射完成", "翻译时无论什么语言一律使用(中文除外): IMM-EBP")).toString();
    inputVarName[IMM_VAR_IN_EFP] = nameCfg.value(curLan + QString("IMM_VAR_IN_EFP"), tr("顶针进位", "翻译时无论什么语言一律使用(中文除外): IMM-EFP")).toString();
    inputVarName[IMM_VAR_IN_MID] = nameCfg.value(curLan + QString("IMM_VAR_IN_MID"), tr("MID 中板模确认", "翻译时无论什么语言一律使用(中文除外): IMM-MMOP")).toString();
#else
    if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_YZ)
    {
        inputVarName[IMM_VAR_IN_STOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_STOP"), tr("ESM 急停", "翻译时无论什么语言一律使用(中文除外): IMM-ESM")).toString();
        inputVarName[IMM_VAR_IN_SAFE] = nameCfg.value(curLan + QString("IMM_VAR_IN_SAFE"), tr("SDM 安全设备", "翻译时无论什么语言一律使用(中文除外): IMM-SDM")).toString();
        inputVarName[IMM_VAR_IN_REJECT] = nameCfg.value(curLan + QString("IMM_VAR_IN_REJECT"), tr("REJ 成型不良", "翻译时无论什么语言一律使用(中文除外): IMM-REJ")).toString();
        inputVarName[IMM_VAR_IN_MCP] = nameCfg.value(curLan + QString("IMM_VAR_IN_MCP"), tr("MCP 关模完", "翻译时无论什么语言一律使用(中文除外): IMM-MC")).toString();
        inputVarName[IMM_VAR_IN_MOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_MOP"), tr("MOP 开模完", "翻译时无论什么语言一律使用(中文除外): IMM-MOP")).toString();
        inputVarName[IMM_VAR_IN_IMOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_IMOP"), tr("开模中间", "翻译时无论什么语言一律使用(中文除外): IMM-IMOP")).toString();
        inputVarName[IMM_VAR_IN_AUTO] = nameCfg.value(curLan + QString("IMM_VAR_IN_AUTO"), tr("AUTO 全自动", "翻译时无论什么语言一律使用(中文除外): IMM-AUTO")).toString();
        inputVarName[IMM_VAR_IN_EBP] = nameCfg.value(curLan + QString("IMM_VAR_IN_EBP"), tr("压射完成", "翻译时无论什么语言一律使用(中文除外): IMM-EBP")).toString();
        inputVarName[IMM_VAR_IN_EFP] = nameCfg.value(curLan + QString("IMM_VAR_IN_EFP"), tr("顶针进位", "翻译时无论什么语言一律使用(中文除外): IMM-EFP")).toString();
        inputVarName[IMM_VAR_IN_MID] = nameCfg.value(curLan + QString("IMM_VAR_IN_MID"), tr("MID 中板模确认", "翻译时无论什么语言一律使用(中文除外): IMM-MMOP")).toString();
    }
    else
    {
#if (FACTORY == FA_VICTOR_SPECIAL)
		inputVarName[IMM_VAR_IN_MOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_MOP"), tr("MOP 加工完成", "翻译时无论什么语言一律使用(中文除外): IMM-MOP")).toString();
#else
		inputVarName[IMM_VAR_IN_MOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_MOP"), tr("MOP 开模完", "翻译时无论什么语言一律使用(中文除外): IMM-MOP")).toString();
#endif
        inputVarName[IMM_VAR_IN_SAFE] = nameCfg.value(curLan + QString("IMM_VAR_IN_SAFE"), tr("SDM 安全门", "翻译时无论什么语言一律使用(中文除外): IMM-SDM")).toString();
        inputVarName[IMM_VAR_IN_MCP] = nameCfg.value(curLan + QString("IMM_VAR_IN_MCP"), tr("MCP 关模完", "翻译时无论什么语言一律使用(中文除外): IMM-MC")).toString();
        inputVarName[IMM_VAR_IN_STOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_STOP"), tr("ESM 急停", "翻译时无论什么语言一律使用(中文除外): IMM-ESM")).toString();
        inputVarName[IMM_VAR_IN_REJECT] = nameCfg.value(curLan + QString("IMM_VAR_IN_REJECT"), tr("REJ 不良品", "翻译时无论什么语言一律使用(中文除外): IMM-REJ")).toString();
        inputVarName[IMM_VAR_IN_IMOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_IMOP"), tr("开模中间", "翻译时无论什么语言一律使用(中文除外): IMM-IMOP")).toString();
        inputVarName[IMM_VAR_IN_AUTO] = nameCfg.value(curLan + QString("IMM_VAR_IN_AUTO"), tr("AUTO 全自动", "翻译时无论什么语言一律使用(中文除外): IMM-AUTO")).toString();
        inputVarName[IMM_VAR_IN_EBP] = nameCfg.value(curLan + QString("IMM_VAR_IN_EBP"), tr("顶针退位", "翻译时无论什么语言一律使用(中文除外): IMM-EBP")).toString();
        inputVarName[IMM_VAR_IN_EFP] = nameCfg.value(curLan + QString("IMM_VAR_IN_EFP"), tr("顶针进位", "翻译时无论什么语言一律使用(中文除外): IMM-EFP")).toString();
        inputVarName[IMM_VAR_IN_MID] = nameCfg.value(curLan + QString("IMM_VAR_IN_MID"), tr("MID 中板模", "翻译时无论什么语言一律使用(中文除外): IMM-MMOP")).toString();
    }
#endif

#if (FACTORY == FA_SHINI)
	{
		inputVarName[IMM_VAR_IN_C1P1] = nameCfg.value(curLan + QString("IMM_VAR_IN_C1P1"), tr("中子1进到位", "翻译时无论什么语言一律使用(中文除外): IMM-C1P1")).toString();
		inputVarName[IMM_VAR_IN_C1P2] = nameCfg.value(curLan + QString("IMM_VAR_IN_C1P2"), tr("中子1退到位", "翻译时无论什么语言一律使用(中文除外): IMM-C1P2")).toString();
		inputVarName[IMM_VAR_IN_C2P1] = nameCfg.value(curLan + QString("IMM_VAR_IN_C2P1"), tr("中子2进到位", "翻译时无论什么语言一律使用(中文除外): IMM-C2P1")).toString();
		inputVarName[IMM_VAR_IN_C2P2] = nameCfg.value(curLan + QString("IMM_VAR_IN_C2P2"), tr("中子2退到位", "翻译时无论什么语言一律使用(中文除外): IMM-C2P2")).toString();
	}
#elif ((FACTORY == FA_KEWEI) || (FACTORY == FA_KEHAO) || (FACTORY == FA_YIDAO) || (FACTORY == FA_WOERDA) || (FACTORY == FA_ZHENJIE) || (FACTORY == FA_SINROBOT_4AS_YZ))
	{
        inputVarName[IMM_VAR_IN_C1P1] = nameCfg.value(curLan + QString("IMM_VAR_IN_C1P1"), tr("抽芯1位1", "翻译时无论什么语言一律使用(中文除外): IMM-C1P1")).toString();
        inputVarName[IMM_VAR_IN_C1P2] = nameCfg.value(curLan + QString("IMM_VAR_IN_C1P2"), tr("抽芯1位2", "翻译时无论什么语言一律使用(中文除外): IMM-C1P2")).toString();
        inputVarName[IMM_VAR_IN_C2P1] = nameCfg.value(curLan + QString("IMM_VAR_IN_C2P1"), tr("抽芯2位1", "翻译时无论什么语言一律使用(中文除外): IMM-C2P1")).toString();
        inputVarName[IMM_VAR_IN_C2P2] = nameCfg.value(curLan + QString("IMM_VAR_IN_C2P2"), tr("抽芯2位2", "翻译时无论什么语言一律使用(中文除外): IMM-C2P2")).toString();
    }
#else
    if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_YZ)
    {
        inputVarName[IMM_VAR_IN_C1P1] = nameCfg.value(curLan + QString("IMM_VAR_IN_C1P1"), tr("抽芯1位1", "翻译时无论什么语言一律使用(中文除外): IMM-C1P1")).toString();
        inputVarName[IMM_VAR_IN_C1P2] = nameCfg.value(curLan + QString("IMM_VAR_IN_C1P2"), tr("抽芯1位2", "翻译时无论什么语言一律使用(中文除外): IMM-C1P2")).toString();
        inputVarName[IMM_VAR_IN_C2P1] = nameCfg.value(curLan + QString("IMM_VAR_IN_C2P1"), tr("抽芯2位1", "翻译时无论什么语言一律使用(中文除外): IMM-C2P1")).toString();
        inputVarName[IMM_VAR_IN_C2P2] = nameCfg.value(curLan + QString("IMM_VAR_IN_C2P2"), tr("抽芯2位2", "翻译时无论什么语言一律使用(中文除外): IMM-C2P2")).toString();
    }
    else
    {
        inputVarName[IMM_VAR_IN_C1P1] = nameCfg.value(curLan + QString("IMM_VAR_IN_C1P1"), tr("抽芯1位1", "翻译时无论什么语言一律使用(中文除外): IMM-C1P1")).toString();
        inputVarName[IMM_VAR_IN_C1P2] = nameCfg.value(curLan + QString("IMM_VAR_IN_C1P2"), tr("抽芯1位2", "翻译时无论什么语言一律使用(中文除外): IMM-C1P2")).toString();
        inputVarName[IMM_VAR_IN_C2P1] = nameCfg.value(curLan + QString("IMM_VAR_IN_C2P1"), tr("抽芯2位1", "翻译时无论什么语言一律使用(中文除外): IMM-C2P1")).toString();
        inputVarName[IMM_VAR_IN_C2P2] = nameCfg.value(curLan + QString("IMM_VAR_IN_C2P2"), tr("抽芯2位2", "翻译时无论什么语言一律使用(中文除外): IMM-C2P2")).toString();
    }

#endif

#if ((FACTORY == FA_KEWEI) || (FACTORY == FA_KEHAO) || (FACTORY == FA_WOERDA) || (FACTORY == FA_ZHENJIE) || (FACTORY == FA_SINROBOT_4AS_YZ))
    // 正臂上下伺服输入
    inputVarName[SV_VAR_IN_YHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_YHOME"), tr("取件Z1原点", "翻译时无论什么语言一律使用(中文除外): S-PAV.ORG")).toString();
    inputVarName[SV_VAR_IN_YCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_YCCWL"), tr("取件Z1负限", "翻译时无论什么语言一律使用(中文除外): S-PAV.CCWL")).toString();
    inputVarName[SV_VAR_IN_YCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_YCWL"), tr("取件Z1正限", "翻译时无论什么语言一律使用(中文除外): S-PAV.CWL")).toString();
    inputVarName[SV_VAR_IN_YALM] = nameCfg.value(curLan + QString("SV_VAR_IN_YALM"), tr("取件Z1报警", "翻译时无论什么语言一律使用(中文除外): S-PAV.ALM")).toString();
    inputVarName[SV_VAR_IN_YRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_YRDY"), tr("取件Z1就绪", "翻译时无论什么语言一律使用(中文除外): S-PAV.RDY")).toString();
    inputVarName[SV_VAR_IN_YINP] = nameCfg.value(curLan + QString("SV_VAR_IN_YINP"), tr("取件Z1到位", "翻译时无论什么语言一律使用(中文除外): S-PAV.INP")).toString();
    inputVarName[SV_VAR_IN_YWPOS] = nameCfg.value(curLan + QString("SV_VAR_IN_YWPOS"), tr("取件Z1安全区", "翻译时无论什么语言一律使用(中文除外): S-PAV.USAF")).toString();
    // 副臂上下伺服输入
    inputVarName[SV_VAR_IN_AHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_AHOME"), tr("喷雾Z2原点", "翻译时无论什么语言一律使用(中文除外): S-RAV.ORG")).toString();
    inputVarName[SV_VAR_IN_ACCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ACCWL"), tr("喷雾Z2负限", "翻译时无论什么语言一律使用(中文除外): S-RAV.CCWL")).toString();
    inputVarName[SV_VAR_IN_ACWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ACWL"), tr("喷雾Z2正限", "翻译时无论什么语言一律使用(中文除外): S-RAV.CWL")).toString();
    inputVarName[SV_VAR_IN_AALM] = nameCfg.value(curLan + QString("SV_VAR_IN_AALM"), tr("喷雾Z2报警", "翻译时无论什么语言一律使用(中文除外): S-RAV.ALM")).toString();
    inputVarName[SV_VAR_IN_ARDY] = nameCfg.value(curLan + QString("SV_VAR_IN_ARDY"), tr("喷雾Z2就绪", "翻译时无论什么语言一律使用(中文除外): S-RAV.RDY")).toString();
    inputVarName[SV_VAR_IN_AINP] = nameCfg.value(curLan + QString("SV_VAR_IN_AINP"), tr("喷雾Z2到位", "翻译时无论什么语言一律使用(中文除外): S-RAV.INP")).toString();
    inputVarName[SV_VAR_IN_AWPOS] = nameCfg.value(curLan + QString("SV_VAR_IN_AWPOS"), tr("喷雾Z2安全区", "翻译时无论什么语言一律使用(中文除外): S-RAV.USAF")).toString();
    // 正臂引拔伺服输入
    inputVarName[SV_VAR_IN_XHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_XHOME"), tr("前后Y原点", "翻译时无论什么语言一律使用(中文除外): S-PAH.ORG")).toString();
    inputVarName[SV_VAR_IN_XCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_XCCWL"), tr("前后Y负限", "翻译时无论什么语言一律使用(中文除外): S-PAH.CCWL")).toString();
    inputVarName[SV_VAR_IN_XCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_XCWL"), tr("前后Y正限", "翻译时无论什么语言一律使用(中文除外): S-PAH.CWL")).toString();
    inputVarName[SV_VAR_IN_XALM] = nameCfg.value(curLan + QString("SV_VAR_IN_XALM"), tr("前后Y报警", "翻译时无论什么语言一律使用(中文除外): S-PAH.ALM")).toString();
    inputVarName[SV_VAR_IN_XRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_XRDY"), tr("前后Y就绪", "翻译时无论什么语言一律使用(中文除外): S-PAH.RDY")).toString();
    inputVarName[SV_VAR_IN_XINP] = nameCfg.value(curLan + QString("SV_VAR_IN_XINP"), tr("前后Y到位", "翻译时无论什么语言一律使用(中文除外): S-PAH.INP")).toString();
    // 副臂引拔伺服输入
    inputVarName[SV_VAR_IN_BHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_BHOME"), tr("副臂引拔原点", "翻译时无论什么语言一律使用(中文除外): S-RAH.ORG")).toString();
    inputVarName[SV_VAR_IN_BCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_BCCWL"), tr("副臂引拔负限", "翻译时无论什么语言一律使用(中文除外): S-RAH.CCWL")).toString();
    inputVarName[SV_VAR_IN_BCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_BCWL"), tr("副臂引拔正限", "翻译时无论什么语言一律使用(中文除外): S-RAH.CWL")).toString();
    inputVarName[SV_VAR_IN_BALM] = nameCfg.value(curLan + QString("SV_VAR_IN_BALM"), tr("副臂引拔报警", "翻译时无论什么语言一律使用(中文除外): S-RAH.ALM")).toString();
    inputVarName[SV_VAR_IN_BRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_BRDY"), tr("副臂引拔就绪", "翻译时无论什么语言一律使用(中文除外): S-RAH.RDY")).toString();
    inputVarName[SV_VAR_IN_BINP] = nameCfg.value(curLan + QString("SV_VAR_IN_BINP"), tr("副臂引拔到位", "翻译时无论什么语言一律使用(中文除外): S-RAH.INP")).toString();
    // 横行伺服输入
    inputVarName[SV_VAR_IN_ZHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_ZHOME"), tr("横行X原点", "翻译时无论什么语言一律使用(中文除外): S-TRV.ORG")).toString();
    inputVarName[SV_VAR_IN_ZCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ZCCWL"), tr("横行X负限", "翻译时无论什么语言一律使用(中文除外): S-TRV.CCWL")).toString();
    inputVarName[SV_VAR_IN_ZCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ZCWL"), tr("横行X正限", "翻译时无论什么语言一律使用(中文除外): S-TRV.CWL")).toString();
    inputVarName[SV_VAR_IN_ZALM] = nameCfg.value(curLan + QString("SV_VAR_IN_ZALM"), tr("横行X报警", "翻译时无论什么语言一律使用(中文除外): S-TRV.ALM")).toString();
    inputVarName[SV_VAR_IN_ZRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_ZRDY"), tr("横行X就绪", "翻译时无论什么语言一律使用(中文除外): S-TRV.RDY")).toString();
    inputVarName[SV_VAR_IN_ZINP] = nameCfg.value(curLan + QString("SV_VAR_IN_ZINP"), tr("横行X到位", "翻译时无论什么语言一律使用(中文除外): S-TRV.INP")).toString();
    inputVarName[SV_VAR_IN_INMOLD] = nameCfg.value(curLan + QString("SV_VAR_IN_INMOLD"), tr("横行X模内安全", "翻译时无论什么语言一律使用(中文除外): S-TRV.ISAF")).toString();
    inputVarName[SV_VAR_IN_OUTMOLD] = nameCfg.value(curLan + QString("SV_VAR_IN_OUTMOLD"), tr("横行X模外安全", "翻译时无论什么语言一律使用(中文除外): S-TRV.OSAF")).toString();
    // 扩展伺服输入
    inputVarName[SV_VAR_IN_CHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_CHOME"), tr("扩展原点", "翻译时无论什么语言一律使用(中文除外): S-EXT.ORG")).toString();
    inputVarName[SV_VAR_IN_CCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_CCCWL"), tr("扩展负限", "翻译时无论什么语言一律使用(中文除外): S-EXT.CCWL")).toString();
    inputVarName[SV_VAR_IN_CCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_CCWL"), tr("扩展正限", "翻译时无论什么语言一律使用(中文除外): S-EXT.CWL")).toString();
    inputVarName[SV_VAR_IN_CALM] = nameCfg.value(curLan + QString("SV_VAR_IN_CALM"), tr("扩展报警", "翻译时无论什么语言一律使用(中文除外): S-EXT.ALM")).toString();
    inputVarName[SV_VAR_IN_CRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_CRDY"), tr("扩展就绪", "翻译时无论什么语言一律使用(中文除外): S-EXT.RDY")).toString();
    inputVarName[SV_VAR_IN_CINP] = nameCfg.value(curLan + QString("SV_VAR_IN_CINP"), tr("扩展到位", "翻译时无论什么语言一律使用(中文除外): S-EXT.INP")).toString();
    // 机械手输入
    inputVarName[RBT_VAR_IN_LOW_AIR] = nameCfg.value(curLan + QString("RBT_VAR_IN_LOW_AIR"), tr("油缸缺油检测", "翻译时无论什么语言一律使用(中文除外): AIR-LP")).toString();
    inputVarName[RBT_VAR_IN_DWN_SAF] = nameCfg.value(curLan + QString("RBT_VAR_IN_DWN_SAF"), tr("模外下行安全", "翻译时无论什么语言一律使用(中文除外): S-DWN.SAFE")).toString();
    inputVarName[RBT_VAR_IN_ARM_SAF] = nameCfg.value(curLan + QString("RBT_VAR_IN_ARM_SAF"), tr("手臂干涉检测", "翻译时无论什么语言一律使用(中文除外): S-ARM.CLASH")).toString();
    inputVarName[RBT_VAR_IN_PRO_HOR] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_HOR"), tr("正臂水平到位", "翻译时无论什么语言一律使用(中文除外): PA-I.HOR")).toString();
    inputVarName[RBT_VAR_IN_PRO_VER] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_VER"), tr("正臂垂直到位", "翻译时无论什么语言一律使用(中文除外): PA-I.VER")).toString();
    inputVarName[RBT_VAR_IN_RUN_ASC] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_ASC"), tr("副臂上位", "翻译时无论什么语言一律使用(中文除外): RA-I.ASC")).toString();
    inputVarName[RBT_VAR_IN_RUN_DES] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_DES"), tr("副臂下位", "翻译时无论什么语言一律使用(中文除外): RA-I.DES")).toString();
    inputVarName[RBT_VAR_IN_PRO_ADV] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_ADV"), tr("正臂前进到位", "翻译时无论什么语言一律使用(中文除外): PA-I.ADV")).toString();
    inputVarName[RBT_VAR_IN_PRO_RET] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_RET"), tr("正臂后退到位", "翻译时无论什么语言一律使用(中文除外): PA-I.RET")).toString();
    inputVarName[RBT_VAR_IN_RUN_ADV] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_ADV"), tr("副臂前进到位", "翻译时无论什么语言一律使用(中文除外): RA-I.ADV")).toString();
    inputVarName[RBT_VAR_IN_RUN_RET] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_RET"), tr("副臂后退到位", "翻译时无论什么语言一律使用(中文除外): RA-I.RET")).toString();
#elif (FACTORY == FA_YIDAO)
    // 正臂上下伺服输入
    inputVarName[SV_VAR_IN_YHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_YHOME"), tr("上下原点", "翻译时无论什么语言一律使用(中文除外): S-PAV.ORG")).toString();
    inputVarName[SV_VAR_IN_YCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_YCCWL"), tr("上下负限", "翻译时无论什么语言一律使用(中文除外): S-PAV.CCWL")).toString();
    inputVarName[SV_VAR_IN_YCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_YCWL"), tr("上下正限", "翻译时无论什么语言一律使用(中文除外): S-PAV.CWL")).toString();
    inputVarName[SV_VAR_IN_YALM] = nameCfg.value(curLan + QString("SV_VAR_IN_YALM"), tr("上下报警", "翻译时无论什么语言一律使用(中文除外): S-PAV.ALM")).toString();
    inputVarName[SV_VAR_IN_YRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_YRDY"), tr("上下就绪", "翻译时无论什么语言一律使用(中文除外): S-PAV.RDY")).toString();
    inputVarName[SV_VAR_IN_YINP] = nameCfg.value(curLan + QString("SV_VAR_IN_YINP"), tr("上下到位", "翻译时无论什么语言一律使用(中文除外): S-PAV.INP")).toString();
    inputVarName[SV_VAR_IN_YWPOS] = nameCfg.value(curLan + QString("SV_VAR_IN_YWPOS"), tr("正臂上位安全", "翻译时无论什么语言一律使用(中文除外): S-PAV.USAF")).toString();
    // 副臂上下伺服输入
    inputVarName[SV_VAR_IN_AHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_AHOME"), tr("上下2原点", "翻译时无论什么语言一律使用(中文除外): S-RAV.ORG")).toString();
    inputVarName[SV_VAR_IN_ACCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ACCWL"), tr("上下2负限", "翻译时无论什么语言一律使用(中文除外): S-RAV.CCWL")).toString();
    inputVarName[SV_VAR_IN_ACWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ACWL"), tr("上下2正限", "翻译时无论什么语言一律使用(中文除外): S-RAV.CWL")).toString();
    inputVarName[SV_VAR_IN_AALM] = nameCfg.value(curLan + QString("SV_VAR_IN_AALM"), tr("上下2报警", "翻译时无论什么语言一律使用(中文除外): S-RAV.ALM")).toString();
    inputVarName[SV_VAR_IN_ARDY] = nameCfg.value(curLan + QString("SV_VAR_IN_ARDY"), tr("上下2就绪", "翻译时无论什么语言一律使用(中文除外): S-RAV.RDY")).toString();
    inputVarName[SV_VAR_IN_AINP] = nameCfg.value(curLan + QString("SV_VAR_IN_AINP"), tr("上下2到位", "翻译时无论什么语言一律使用(中文除外): S-RAV.INP")).toString();
    inputVarName[SV_VAR_IN_AWPOS] = nameCfg.value(curLan + QString("SV_VAR_IN_AWPOS"), tr("副臂上位安全", "翻译时无论什么语言一律使用(中文除外): S-RAV.USAF")).toString();
    // 正臂引拔伺服输入
    inputVarName[SV_VAR_IN_XHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_XHOME"), tr("引拔原点", "翻译时无论什么语言一律使用(中文除外): S-PAH.ORG")).toString();
    inputVarName[SV_VAR_IN_XCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_XCCWL"), tr("引拔负限", "翻译时无论什么语言一律使用(中文除外): S-PAH.CCWL")).toString();
    inputVarName[SV_VAR_IN_XCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_XCWL"), tr("引拔正限", "翻译时无论什么语言一律使用(中文除外): S-PAH.CWL")).toString();
    inputVarName[SV_VAR_IN_XALM] = nameCfg.value(curLan + QString("SV_VAR_IN_XALM"), tr("引拔报警", "翻译时无论什么语言一律使用(中文除外): S-PAH.ALM")).toString();
    inputVarName[SV_VAR_IN_XRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_XRDY"), tr("引拔就绪", "翻译时无论什么语言一律使用(中文除外): S-PAH.RDY")).toString();
    inputVarName[SV_VAR_IN_XINP] = nameCfg.value(curLan + QString("SV_VAR_IN_XINP"), tr("引拔到位", "翻译时无论什么语言一律使用(中文除外): S-PAH.INP")).toString();
    // 副臂引拔伺服输入
    inputVarName[SV_VAR_IN_BHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_BHOME"), tr("引拔2原点", "翻译时无论什么语言一律使用(中文除外): S-RAH.ORG")).toString();
    inputVarName[SV_VAR_IN_BCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_BCCWL"), tr("引拔2负限", "翻译时无论什么语言一律使用(中文除外): S-RAH.CCWL")).toString();
    inputVarName[SV_VAR_IN_BCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_BCWL"), tr("引拔2正限", "翻译时无论什么语言一律使用(中文除外): S-RAH.CWL")).toString();
    inputVarName[SV_VAR_IN_BALM] = nameCfg.value(curLan + QString("SV_VAR_IN_BALM"), tr("引拔2报警", "翻译时无论什么语言一律使用(中文除外): S-RAH.ALM")).toString();
    inputVarName[SV_VAR_IN_BRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_BRDY"), tr("引拔2就绪", "翻译时无论什么语言一律使用(中文除外): S-RAH.RDY")).toString();
    inputVarName[SV_VAR_IN_BINP] = nameCfg.value(curLan + QString("SV_VAR_IN_BINP"), tr("引拔2到位", "翻译时无论什么语言一律使用(中文除外): S-RAH.INP")).toString();
    // 横行伺服输入
    inputVarName[SV_VAR_IN_ZHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_ZHOME"), tr("横行原点", "翻译时无论什么语言一律使用(中文除外): S-TRV.ORG")).toString();
    inputVarName[SV_VAR_IN_ZCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ZCCWL"), tr("横行负限", "翻译时无论什么语言一律使用(中文除外): S-TRV.CCWL")).toString();
    inputVarName[SV_VAR_IN_ZCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ZCWL"), tr("横行正限", "翻译时无论什么语言一律使用(中文除外): S-TRV.CWL")).toString();
    inputVarName[SV_VAR_IN_ZALM] = nameCfg.value(curLan + QString("SV_VAR_IN_ZALM"), tr("横行报警", "翻译时无论什么语言一律使用(中文除外): S-TRV.ALM")).toString();
    inputVarName[SV_VAR_IN_ZRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_ZRDY"), tr("横行就绪", "翻译时无论什么语言一律使用(中文除外): S-TRV.RDY")).toString();
    inputVarName[SV_VAR_IN_ZINP] = nameCfg.value(curLan + QString("SV_VAR_IN_ZINP"), tr("横行到位", "翻译时无论什么语言一律使用(中文除外): S-TRV.INP")).toString();
    inputVarName[SV_VAR_IN_INMOLD] = nameCfg.value(curLan + QString("SV_VAR_IN_INMOLD"), tr("横行模内安全区", "翻译时无论什么语言一律使用(中文除外): S-TRV.ISAF")).toString();
    inputVarName[SV_VAR_IN_OUTMOLD] = nameCfg.value(curLan + QString("SV_VAR_IN_OUTMOLD"), tr("横行模外安全区", "翻译时无论什么语言一律使用(中文除外): S-TRV.OSAF")).toString();
    // 扩展伺服输入
    inputVarName[SV_VAR_IN_CHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_CHOME"), tr("扩展原点", "翻译时无论什么语言一律使用(中文除外): S-EXT.ORG")).toString();
    inputVarName[SV_VAR_IN_CCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_CCCWL"), tr("扩展负限", "翻译时无论什么语言一律使用(中文除外): S-EXT.CCWL")).toString();
    inputVarName[SV_VAR_IN_CCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_CCWL"), tr("扩展正限", "翻译时无论什么语言一律使用(中文除外): S-EXT.CWL")).toString();
    inputVarName[SV_VAR_IN_CALM] = nameCfg.value(curLan + QString("SV_VAR_IN_CALM"), tr("扩展报警", "翻译时无论什么语言一律使用(中文除外): S-EXT.ALM")).toString();
    inputVarName[SV_VAR_IN_CRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_CRDY"), tr("扩展就绪", "翻译时无论什么语言一律使用(中文除外): S-EXT.RDY")).toString();
    inputVarName[SV_VAR_IN_CINP] = nameCfg.value(curLan + QString("SV_VAR_IN_CINP"), tr("扩展到位", "翻译时无论什么语言一律使用(中文除外): S-EXT.INP")).toString();
    // 机械手输入
    inputVarName[RBT_VAR_IN_LOW_AIR] = nameCfg.value(curLan + QString("RBT_VAR_IN_LOW_AIR"), tr("低气压检测", "翻译时无论什么语言一律使用(中文除外): AIR-LP")).toString();
    inputVarName[RBT_VAR_IN_DWN_SAF] = nameCfg.value(curLan + QString("RBT_VAR_IN_DWN_SAF"), tr("模外下行安全检测", "翻译时无论什么语言一律使用(中文除外): S-DWN.SAFE")).toString();
    inputVarName[RBT_VAR_IN_ARM_SAF] = nameCfg.value(curLan + QString("RBT_VAR_IN_ARM_SAF"), tr("手臂引拔干涉检测", "翻译时无论什么语言一律使用(中文除外): S-ARM.CLASH")).toString();
    inputVarName[RBT_VAR_IN_PRO_HOR] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_HOR"), tr("正臂水平到位", "翻译时无论什么语言一律使用(中文除外): PA-I.HOR")).toString();
    inputVarName[RBT_VAR_IN_PRO_VER] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_VER"), tr("正臂垂直到位", "翻译时无论什么语言一律使用(中文除外): PA-I.VER")).toString();
    inputVarName[RBT_VAR_IN_RUN_ASC] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_ASC"), tr("副臂上位", "翻译时无论什么语言一律使用(中文除外): RA-I.ASC")).toString();
    inputVarName[RBT_VAR_IN_RUN_DES] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_DES"), tr("副臂下位", "翻译时无论什么语言一律使用(中文除外): RA-I.DES")).toString();
    inputVarName[RBT_VAR_IN_PRO_ADV] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_ADV"), tr("正臂前进到位", "翻译时无论什么语言一律使用(中文除外): PA-I.ADV")).toString();
    inputVarName[RBT_VAR_IN_PRO_RET] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_RET"), tr("正臂后退到位", "翻译时无论什么语言一律使用(中文除外): PA-I.RET")).toString();
    inputVarName[RBT_VAR_IN_RUN_ADV] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_ADV"), tr("副臂前进到位", "翻译时无论什么语言一律使用(中文除外): RA-I.ADV")).toString();
    inputVarName[RBT_VAR_IN_RUN_RET] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_RET"), tr("副臂后退到位", "翻译时无论什么语言一律使用(中文除外): RA-I.RET")).toString();
#else
    if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_YZ)
    {
        // 正臂上下伺服输入
        inputVarName[SV_VAR_IN_YHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_YHOME"), tr("取件Z1原点", "翻译时无论什么语言一律使用(中文除外): S-PAV.ORG")).toString();
        inputVarName[SV_VAR_IN_YCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_YCCWL"), tr("取件Z1负限", "翻译时无论什么语言一律使用(中文除外): S-PAV.CCWL")).toString();
        inputVarName[SV_VAR_IN_YCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_YCWL"), tr("取件Z1正限", "翻译时无论什么语言一律使用(中文除外): S-PAV.CWL")).toString();
        inputVarName[SV_VAR_IN_YALM] = nameCfg.value(curLan + QString("SV_VAR_IN_YALM"), tr("取件Z1报警", "翻译时无论什么语言一律使用(中文除外): S-PAV.ALM")).toString();
        inputVarName[SV_VAR_IN_YRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_YRDY"), tr("取件Z1就绪", "翻译时无论什么语言一律使用(中文除外): S-PAV.RDY")).toString();
        inputVarName[SV_VAR_IN_YINP] = nameCfg.value(curLan + QString("SV_VAR_IN_YINP"), tr("取件Z1到位", "翻译时无论什么语言一律使用(中文除外): S-PAV.INP")).toString();
        inputVarName[SV_VAR_IN_YWPOS] = nameCfg.value(curLan + QString("SV_VAR_IN_YWPOS"), tr("取件Z1安全区", "翻译时无论什么语言一律使用(中文除外): S-PAV.USAF")).toString();
        // 副臂上下伺服输入
        inputVarName[SV_VAR_IN_AHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_AHOME"), tr("喷雾Z2原点", "翻译时无论什么语言一律使用(中文除外): S-RAV.ORG")).toString();
        inputVarName[SV_VAR_IN_ACCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ACCWL"), tr("喷雾Z2负限", "翻译时无论什么语言一律使用(中文除外): S-RAV.CCWL")).toString();
        inputVarName[SV_VAR_IN_ACWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ACWL"), tr("喷雾Z2正限", "翻译时无论什么语言一律使用(中文除外): S-RAV.CWL")).toString();
        inputVarName[SV_VAR_IN_AALM] = nameCfg.value(curLan + QString("SV_VAR_IN_AALM"), tr("喷雾Z2报警", "翻译时无论什么语言一律使用(中文除外): S-RAV.ALM")).toString();
        inputVarName[SV_VAR_IN_ARDY] = nameCfg.value(curLan + QString("SV_VAR_IN_ARDY"), tr("喷雾Z2就绪", "翻译时无论什么语言一律使用(中文除外): S-RAV.RDY")).toString();
        inputVarName[SV_VAR_IN_AINP] = nameCfg.value(curLan + QString("SV_VAR_IN_AINP"), tr("喷雾Z2到位", "翻译时无论什么语言一律使用(中文除外): S-RAV.INP")).toString();
        inputVarName[SV_VAR_IN_AWPOS] = nameCfg.value(curLan + QString("SV_VAR_IN_AWPOS"), tr("喷雾Z2安全区", "翻译时无论什么语言一律使用(中文除外): S-RAV.USAF")).toString();
        // 正臂引拔伺服输入
        inputVarName[SV_VAR_IN_XHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_XHOME"), tr("前后Y原点", "翻译时无论什么语言一律使用(中文除外): S-PAH.ORG")).toString();
        inputVarName[SV_VAR_IN_XCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_XCCWL"), tr("前后Y负限", "翻译时无论什么语言一律使用(中文除外): S-PAH.CCWL")).toString();
        inputVarName[SV_VAR_IN_XCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_XCWL"), tr("前后Y正限", "翻译时无论什么语言一律使用(中文除外): S-PAH.CWL")).toString();
        inputVarName[SV_VAR_IN_XALM] = nameCfg.value(curLan + QString("SV_VAR_IN_XALM"), tr("前后Y报警", "翻译时无论什么语言一律使用(中文除外): S-PAH.ALM")).toString();
        inputVarName[SV_VAR_IN_XRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_XRDY"), tr("前后Y就绪", "翻译时无论什么语言一律使用(中文除外): S-PAH.RDY")).toString();
        inputVarName[SV_VAR_IN_XINP] = nameCfg.value(curLan + QString("SV_VAR_IN_XINP"), tr("前后Y到位", "翻译时无论什么语言一律使用(中文除外): S-PAH.INP")).toString();
        // 副臂引拔伺服输入
        inputVarName[SV_VAR_IN_BHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_BHOME"), tr("副臂引拔原点", "翻译时无论什么语言一律使用(中文除外): S-RAH.ORG")).toString();
        inputVarName[SV_VAR_IN_BCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_BCCWL"), tr("副臂引拔负限", "翻译时无论什么语言一律使用(中文除外): S-RAH.CCWL")).toString();
        inputVarName[SV_VAR_IN_BCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_BCWL"), tr("副臂引拔正限", "翻译时无论什么语言一律使用(中文除外): S-RAH.CWL")).toString();
        inputVarName[SV_VAR_IN_BALM] = nameCfg.value(curLan + QString("SV_VAR_IN_BALM"), tr("副臂引拔报警", "翻译时无论什么语言一律使用(中文除外): S-RAH.ALM")).toString();
        inputVarName[SV_VAR_IN_BRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_BRDY"), tr("副臂引拔就绪", "翻译时无论什么语言一律使用(中文除外): S-RAH.RDY")).toString();
        inputVarName[SV_VAR_IN_BINP] = nameCfg.value(curLan + QString("SV_VAR_IN_BINP"), tr("副臂引拔到位", "翻译时无论什么语言一律使用(中文除外): S-RAH.INP")).toString();
        // 横行伺服输入
        inputVarName[SV_VAR_IN_ZHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_ZHOME"), tr("横行X原点", "翻译时无论什么语言一律使用(中文除外): S-TRV.ORG")).toString();
        inputVarName[SV_VAR_IN_ZCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ZCCWL"), tr("横行X负限", "翻译时无论什么语言一律使用(中文除外): S-TRV.CCWL")).toString();
        inputVarName[SV_VAR_IN_ZCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ZCWL"), tr("横行X正限", "翻译时无论什么语言一律使用(中文除外): S-TRV.CWL")).toString();
        inputVarName[SV_VAR_IN_ZALM] = nameCfg.value(curLan + QString("SV_VAR_IN_ZALM"), tr("横行X报警", "翻译时无论什么语言一律使用(中文除外): S-TRV.ALM")).toString();
        inputVarName[SV_VAR_IN_ZRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_ZRDY"), tr("横行X就绪", "翻译时无论什么语言一律使用(中文除外): S-TRV.RDY")).toString();
        inputVarName[SV_VAR_IN_ZINP] = nameCfg.value(curLan + QString("SV_VAR_IN_ZINP"), tr("横行X到位", "翻译时无论什么语言一律使用(中文除外): S-TRV.INP")).toString();
        inputVarName[SV_VAR_IN_INMOLD] = nameCfg.value(curLan + QString("SV_VAR_IN_INMOLD"), tr("横行X模内安全", "翻译时无论什么语言一律使用(中文除外): S-TRV.ISAF")).toString();
        inputVarName[SV_VAR_IN_OUTMOLD] = nameCfg.value(curLan + QString("SV_VAR_IN_OUTMOLD"), tr("横行X模外安全", "翻译时无论什么语言一律使用(中文除外): S-TRV.OSAF")).toString();
        // 扩展伺服输入
        inputVarName[SV_VAR_IN_CHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_CHOME"), tr("扩展原点", "翻译时无论什么语言一律使用(中文除外): S-EXT.ORG")).toString();
        inputVarName[SV_VAR_IN_CCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_CCCWL"), tr("扩展负限", "翻译时无论什么语言一律使用(中文除外): S-EXT.CCWL")).toString();
        inputVarName[SV_VAR_IN_CCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_CCWL"), tr("扩展正限", "翻译时无论什么语言一律使用(中文除外): S-EXT.CWL")).toString();
        inputVarName[SV_VAR_IN_CALM] = nameCfg.value(curLan + QString("SV_VAR_IN_CALM"), tr("扩展报警", "翻译时无论什么语言一律使用(中文除外): S-EXT.ALM")).toString();
        inputVarName[SV_VAR_IN_CRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_CRDY"), tr("扩展就绪", "翻译时无论什么语言一律使用(中文除外): S-EXT.RDY")).toString();
        inputVarName[SV_VAR_IN_CINP] = nameCfg.value(curLan + QString("SV_VAR_IN_CINP"), tr("扩展到位", "翻译时无论什么语言一律使用(中文除外): S-EXT.INP")).toString();
        // 机械手输入
        inputVarName[RBT_VAR_IN_LOW_AIR] = nameCfg.value(curLan + QString("RBT_VAR_IN_LOW_AIR"), tr("油缸缺油检测", "翻译时无论什么语言一律使用(中文除外): AIR-LP")).toString();
        inputVarName[RBT_VAR_IN_DWN_SAF] = nameCfg.value(curLan + QString("RBT_VAR_IN_DWN_SAF"), tr("模外下行安全", "翻译时无论什么语言一律使用(中文除外): S-DWN.SAFE")).toString();
        inputVarName[RBT_VAR_IN_ARM_SAF] = nameCfg.value(curLan + QString("RBT_VAR_IN_ARM_SAF"), tr("手臂干涉检测", "翻译时无论什么语言一律使用(中文除外): S-ARM.CLASH")).toString();
        inputVarName[RBT_VAR_IN_PRO_HOR] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_HOR"), tr("正臂水平到位", "翻译时无论什么语言一律使用(中文除外): PA-I.HOR")).toString();
        inputVarName[RBT_VAR_IN_PRO_VER] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_VER"), tr("正臂垂直到位", "翻译时无论什么语言一律使用(中文除外): PA-I.VER")).toString();
        inputVarName[RBT_VAR_IN_RUN_ASC] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_ASC"), tr("副臂上位", "翻译时无论什么语言一律使用(中文除外): RA-I.ASC")).toString();
        inputVarName[RBT_VAR_IN_RUN_DES] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_DES"), tr("副臂下位", "翻译时无论什么语言一律使用(中文除外): RA-I.DES")).toString();
        inputVarName[RBT_VAR_IN_PRO_ADV] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_ADV"), tr("正臂前进到位", "翻译时无论什么语言一律使用(中文除外): PA-I.ADV")).toString();
        inputVarName[RBT_VAR_IN_PRO_RET] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_RET"), tr("正臂后退到位", "翻译时无论什么语言一律使用(中文除外): PA-I.RET")).toString();
        inputVarName[RBT_VAR_IN_RUN_ADV] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_ADV"), tr("副臂前进到位", "翻译时无论什么语言一律使用(中文除外): RA-I.ADV")).toString();
        inputVarName[RBT_VAR_IN_RUN_RET] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_RET"), tr("副臂后退到位", "翻译时无论什么语言一律使用(中文除外): RA-I.RET")).toString();
    }
    else
    {
        // 正臂上下伺服输入
        inputVarName[SV_VAR_IN_YHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_YHOME"), tr("正臂上下原点", "翻译时无论什么语言一律使用(中文除外): S-PAV.ORG")).toString();
        inputVarName[SV_VAR_IN_YCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_YCCWL"), tr("正臂上下负限", "翻译时无论什么语言一律使用(中文除外): S-PAV.CCWL")).toString();
        inputVarName[SV_VAR_IN_YCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_YCWL"), tr("正臂上下正限", "翻译时无论什么语言一律使用(中文除外): S-PAV.CWL")).toString();
        inputVarName[SV_VAR_IN_YALM] = nameCfg.value(curLan + QString("SV_VAR_IN_YALM"), tr("正臂上下报警", "翻译时无论什么语言一律使用(中文除外): S-PAV.ALM")).toString();
        inputVarName[SV_VAR_IN_YRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_YRDY"), tr("正臂上下就绪", "翻译时无论什么语言一律使用(中文除外): S-PAV.RDY")).toString();
        inputVarName[SV_VAR_IN_YINP] = nameCfg.value(curLan + QString("SV_VAR_IN_YINP"), tr("正臂上下到位", "翻译时无论什么语言一律使用(中文除外): S-PAV.INP")).toString();
        inputVarName[SV_VAR_IN_YWPOS] = nameCfg.value(curLan + QString("SV_VAR_IN_YWPOS"), tr("正臂上位安全", "翻译时无论什么语言一律使用(中文除外): S-PAV.USAF")).toString();
        // 副臂上下伺服输入
        inputVarName[SV_VAR_IN_AHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_AHOME"), tr("副臂上下原点", "翻译时无论什么语言一律使用(中文除外): S-RAV.ORG")).toString();
        inputVarName[SV_VAR_IN_ACCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ACCWL"), tr("副臂上下负限", "翻译时无论什么语言一律使用(中文除外): S-RAV.CCWL")).toString();
        inputVarName[SV_VAR_IN_ACWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ACWL"), tr("副臂上下正限", "翻译时无论什么语言一律使用(中文除外): S-RAV.CWL")).toString();
        inputVarName[SV_VAR_IN_AALM] = nameCfg.value(curLan + QString("SV_VAR_IN_AALM"), tr("副臂上下报警", "翻译时无论什么语言一律使用(中文除外): S-RAV.ALM")).toString();
        inputVarName[SV_VAR_IN_ARDY] = nameCfg.value(curLan + QString("SV_VAR_IN_ARDY"), tr("副臂上下就绪", "翻译时无论什么语言一律使用(中文除外): S-RAV.RDY")).toString();
        inputVarName[SV_VAR_IN_AINP] = nameCfg.value(curLan + QString("SV_VAR_IN_AINP"), tr("副臂上下到位", "翻译时无论什么语言一律使用(中文除外): S-RAV.INP")).toString();
        inputVarName[SV_VAR_IN_AWPOS] = nameCfg.value(curLan + QString("SV_VAR_IN_AWPOS"), tr("副臂上位安全", "翻译时无论什么语言一律使用(中文除外): S-RAV.USAF")).toString();
        // 正臂引拔伺服输入
        inputVarName[SV_VAR_IN_XHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_XHOME"), tr("正臂引拔原点", "翻译时无论什么语言一律使用(中文除外): S-PAH.ORG")).toString();
        inputVarName[SV_VAR_IN_XCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_XCCWL"), tr("正臂引拔负限", "翻译时无论什么语言一律使用(中文除外): S-PAH.CCWL")).toString();
        inputVarName[SV_VAR_IN_XCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_XCWL"), tr("正臂引拔正限", "翻译时无论什么语言一律使用(中文除外): S-PAH.CWL")).toString();
        inputVarName[SV_VAR_IN_XALM] = nameCfg.value(curLan + QString("SV_VAR_IN_XALM"), tr("正臂引拔报警", "翻译时无论什么语言一律使用(中文除外): S-PAH.ALM")).toString();
        inputVarName[SV_VAR_IN_XRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_XRDY"), tr("正臂引拔就绪", "翻译时无论什么语言一律使用(中文除外): S-PAH.RDY")).toString();
        inputVarName[SV_VAR_IN_XINP] = nameCfg.value(curLan + QString("SV_VAR_IN_XINP"), tr("正臂引拔到位", "翻译时无论什么语言一律使用(中文除外): S-PAH.INP")).toString();
        // 副臂引拔伺服输入
        inputVarName[SV_VAR_IN_BHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_BHOME"), tr("副臂引拔原点", "翻译时无论什么语言一律使用(中文除外): S-RAH.ORG")).toString();
        inputVarName[SV_VAR_IN_BCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_BCCWL"), tr("副臂引拔负限", "翻译时无论什么语言一律使用(中文除外): S-RAH.CCWL")).toString();
        inputVarName[SV_VAR_IN_BCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_BCWL"), tr("副臂引拔正限", "翻译时无论什么语言一律使用(中文除外): S-RAH.CWL")).toString();
        inputVarName[SV_VAR_IN_BALM] = nameCfg.value(curLan + QString("SV_VAR_IN_BALM"), tr("副臂引拔报警", "翻译时无论什么语言一律使用(中文除外): S-RAH.ALM")).toString();
        inputVarName[SV_VAR_IN_BRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_BRDY"), tr("副臂引拔就绪", "翻译时无论什么语言一律使用(中文除外): S-RAH.RDY")).toString();
        inputVarName[SV_VAR_IN_BINP] = nameCfg.value(curLan + QString("SV_VAR_IN_BINP"), tr("副臂引拔到位", "翻译时无论什么语言一律使用(中文除外): S-RAH.INP")).toString();
        // 横行伺服输入
        inputVarName[SV_VAR_IN_ZHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_ZHOME"), tr("横行原点", "翻译时无论什么语言一律使用(中文除外): S-TRV.ORG")).toString();
        inputVarName[SV_VAR_IN_ZCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ZCCWL"), tr("横行负限", "翻译时无论什么语言一律使用(中文除外): S-TRV.CCWL")).toString();
        inputVarName[SV_VAR_IN_ZCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ZCWL"), tr("横行正限", "翻译时无论什么语言一律使用(中文除外): S-TRV.CWL")).toString();
        inputVarName[SV_VAR_IN_ZALM] = nameCfg.value(curLan + QString("SV_VAR_IN_ZALM"), tr("横行报警", "翻译时无论什么语言一律使用(中文除外): S-TRV.ALM")).toString();
        inputVarName[SV_VAR_IN_ZRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_ZRDY"), tr("横行就绪", "翻译时无论什么语言一律使用(中文除外): S-TRV.RDY")).toString();
        inputVarName[SV_VAR_IN_ZINP] = nameCfg.value(curLan + QString("SV_VAR_IN_ZINP"), tr("横行到位", "翻译时无论什么语言一律使用(中文除外): S-TRV.INP")).toString();
        inputVarName[SV_VAR_IN_INMOLD] = nameCfg.value(curLan + QString("SV_VAR_IN_INMOLD"), tr("横行模内安全区", "翻译时无论什么语言一律使用(中文除外): S-TRV.ISAF")).toString();
        inputVarName[SV_VAR_IN_OUTMOLD] = nameCfg.value(curLan + QString("SV_VAR_IN_OUTMOLD"), tr("横行模外安全区", "翻译时无论什么语言一律使用(中文除外): S-TRV.OSAF")).toString();
        // 扩展伺服输入
        inputVarName[SV_VAR_IN_CHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_CHOME"), tr("扩展原点", "翻译时无论什么语言一律使用(中文除外): S-EXT.ORG")).toString();
        inputVarName[SV_VAR_IN_CCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_CCCWL"), tr("扩展负限", "翻译时无论什么语言一律使用(中文除外): S-EXT.CCWL")).toString();
        inputVarName[SV_VAR_IN_CCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_CCWL"), tr("扩展正限", "翻译时无论什么语言一律使用(中文除外): S-EXT.CWL")).toString();
        inputVarName[SV_VAR_IN_CALM] = nameCfg.value(curLan + QString("SV_VAR_IN_CALM"), tr("扩展报警", "翻译时无论什么语言一律使用(中文除外): S-EXT.ALM")).toString();
        inputVarName[SV_VAR_IN_CRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_CRDY"), tr("扩展就绪", "翻译时无论什么语言一律使用(中文除外): S-EXT.RDY")).toString();
        inputVarName[SV_VAR_IN_CINP] = nameCfg.value(curLan + QString("SV_VAR_IN_CINP"), tr("扩展到位", "翻译时无论什么语言一律使用(中文除外): S-EXT.INP")).toString();
    }
	// 机械手输入
#if (FACTORY == FA_CALET)
    inputVarName[RBT_VAR_IN_LOW_AIR] = nameCfg.value(curLan + QString("RBT_VAR_IN_LOW_AIR"), tr("油压低检测", "翻译时无论什么语言一律使用(中文除外): AIR-LP")).toString();
#else
    inputVarName[RBT_VAR_IN_LOW_AIR] = nameCfg.value(curLan + QString("RBT_VAR_IN_LOW_AIR"), tr("低气压检测", "翻译时无论什么语言一律使用(中文除外): AIR-LP")).toString();
#endif
    inputVarName[RBT_VAR_IN_DWN_SAF] = nameCfg.value(curLan + QString("RBT_VAR_IN_DWN_SAF"), tr("模外下行安全检测", "翻译时无论什么语言一律使用(中文除外): S-DWN.SAFE")).toString();
    inputVarName[RBT_VAR_IN_ARM_SAF] = nameCfg.value(curLan + QString("RBT_VAR_IN_ARM_SAF"), tr("手臂引拔干涉检测", "翻译时无论什么语言一律使用(中文除外): S-ARM.CLASH")).toString();
    inputVarName[RBT_VAR_IN_PRO_HOR] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_HOR"), tr("正臂水平到位", "翻译时无论什么语言一律使用(中文除外): PA-I.HOR")).toString();
    inputVarName[RBT_VAR_IN_PRO_VER] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_VER"), tr("正臂垂直到位", "翻译时无论什么语言一律使用(中文除外): PA-I.VER")).toString();
    inputVarName[RBT_VAR_IN_RUN_HOR] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_HOR"), tr("副臂水平到位", "翻译时无论什么语言一律使用(中文除外): RA-I.HOR")).toString();//-E1X10
    inputVarName[RBT_VAR_IN_RUN_VER] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_VER"), tr("副臂垂直到位", "翻译时无论什么语言一律使用(中文除外): RA-I.VER")).toString();//-E1X11
    inputVarName[RBT_VAR_IN_RUN_ASC] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_ASC"), tr("副臂上位", "翻译时无论什么语言一律使用(中文除外): RA-I.ASC")).toString();
    inputVarName[RBT_VAR_IN_RUN_DES] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_DES"), tr("副臂下位", "翻译时无论什么语言一律使用(中文除外): RA-I.DES")).toString();
    inputVarName[RBT_VAR_IN_PRO_ADV] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_ADV"), tr("正臂前进到位", "翻译时无论什么语言一律使用(中文除外): PA-I.ADV")).toString();
    inputVarName[RBT_VAR_IN_PRO_RET] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_RET"), tr("正臂后退到位", "翻译时无论什么语言一律使用(中文除外): PA-I.RET")).toString();
    inputVarName[RBT_VAR_IN_RUN_ADV] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_ADV"), tr("副臂前进到位", "翻译时无论什么语言一律使用(中文除外): RA-I.ADV")).toString();
    inputVarName[RBT_VAR_IN_RUN_RET] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_RET"), tr("副臂后退到位", "翻译时无论什么语言一律使用(中文除外): RA-I.RET")).toString();
#endif
	// *************************************************
	// 输出变量名称
	outputVarName.clear();
    // 主控模块输出
    if(CMBProtocol::GetSysTypeHigh() == BOARD_VERSION_H750_5AXIS)
    {
        outputVarName[MAIN_VAR_Y00] = nameCfg.value(curLan + QString("MAIN_VAR_Y00"), "Main").toString();
        outputVarName[MAIN_VAR_Y01] = nameCfg.value(curLan + QString("MAIN_VAR_Y01"), "Main").toString();
        outputVarName[MAIN_VAR_Y02] = nameCfg.value(curLan + QString("MAIN_VAR_Y02"), "Main").toString();
        outputVarName[MAIN_VAR_Y03] = nameCfg.value(curLan + QString("MAIN_VAR_Y03"), "Main").toString();
        outputVarName[MAIN_VAR_Y04] = nameCfg.value(curLan + QString("MAIN_VAR_Y04"), "Main").toString();
        outputVarName[MAIN_VAR_Y05] = nameCfg.value(curLan + QString("MAIN_VAR_Y05"), tr("报警灯")).toString();
#if (FACTORY == FA_BEISHITE_CN)
        outputVarName[MAIN_VAR_Y07] = nameCfg.value(curLan + QString("MAIN_VAR_Y07"), tr("输送带")).toString();
        outputVarName[MAIN_VAR_Y18] = nameCfg.value(curLan + QString("MAIN_VAR_Y18"), tr("副夹")).toString();
#else
        outputVarName[MAIN_VAR_Y07] = nameCfg.value(curLan + QString("MAIN_VAR_Y07"), "Main").toString();
        outputVarName[MAIN_VAR_Y18] = nameCfg.value(curLan + QString("MAIN_VAR_Y18"), "Main").toString();
#endif
        outputVarName[MAIN_VAR_Y06] = nameCfg.value(curLan + QString("MAIN_VAR_Y06"), tr("报警器")).toString();
//        outputVarName[MAIN_VAR_Y07] = nameCfg.value(curLan + QString("MAIN_VAR_Y07"), "Main").toString();
        outputVarName[MAIN_VAR_Y08] = nameCfg.value(curLan + QString("MAIN_VAR_Y08"), tr("打油")).toString();
        outputVarName[MAIN_VAR_Y09] = nameCfg.value(curLan + QString("MAIN_VAR_Y09"), "Main").toString();
        outputVarName[MAIN_VAR_Y10] = nameCfg.value(curLan + QString("MAIN_VAR_Y10"), "Main").toString();
        outputVarName[MAIN_VAR_Y11] = nameCfg.value(curLan + QString("MAIN_VAR_Y11"), tr("吸具1")).toString();
        outputVarName[MAIN_VAR_Y12] = nameCfg.value(curLan + QString("MAIN_VAR_Y12"), tr("吸具2")).toString();
        outputVarName[MAIN_VAR_Y13] = nameCfg.value(curLan + QString("MAIN_VAR_Y13"), tr("抱具1")).toString();
        outputVarName[MAIN_VAR_Y14] = nameCfg.value(curLan + QString("MAIN_VAR_Y14"), tr("抱具2")).toString();
        outputVarName[MAIN_VAR_Y15] = nameCfg.value(curLan + QString("MAIN_VAR_Y15"), tr("抱具3")).toString();
        outputVarName[MAIN_VAR_Y16] = nameCfg.value(curLan + QString("MAIN_VAR_Y16"), tr("抱具4")).toString();
        outputVarName[MAIN_VAR_Y17] = nameCfg.value(curLan + QString("MAIN_VAR_Y17"), "Main").toString();
//        outputVarName[MAIN_VAR_Y18] = nameCfg.value(curLan + QString("MAIN_VAR_Y18"), "Main").toString();
//        outputVarName[MAIN_VAR_Y14] = nameCfg.value(curLan + QString("MAIN_VAR_Y14"), tr("左交互")).toString();
//        outputVarName[MAIN_VAR_Y15] = nameCfg.value(curLan + QString("MAIN_VAR_Y15"), tr("右交互")).toString();
//        outputVarName[MAIN_VAR_Y16] = nameCfg.value(curLan + QString("MAIN_VAR_Y16"), tr("1号上下气缸")).toString();
//        outputVarName[MAIN_VAR_Y17] = nameCfg.value(curLan + QString("MAIN_VAR_Y17"), tr("2号上下气缸")).toString();
//        outputVarName[MAIN_VAR_Y18] = nameCfg.value(curLan + QString("MAIN_VAR_Y18"), tr("允许抓料")).toString();
#if (FACTORY == FA_BEISHITE_CN)
        outputVarName[MAIN_VAR_Y19] = nameCfg.value(curLan + QString("MAIN_VAR_Y19"), tr("刀1")).toString();
        outputVarName[MAIN_VAR_Y20] = nameCfg.value(curLan + QString("MAIN_VAR_Y20"), tr("刀2")).toString();
#else
        outputVarName[MAIN_VAR_Y19] = nameCfg.value(curLan + QString("MAIN_VAR_Y19"), "Main").toString();
        outputVarName[MAIN_VAR_Y20] = nameCfg.value(curLan + QString("MAIN_VAR_Y20"), "Main").toString();
#endif
        outputVarName[MAIN_VAR_Y21] = nameCfg.value(curLan + QString("MAIN_VAR_Y21"), "Main").toString();
        outputVarName[MAIN_VAR_Y22] = nameCfg.value(curLan + QString("MAIN_VAR_Y22"), "Main").toString();
#if (FACTORY == FA_BEISHITE_CN)
        outputVarName[MAIN_VAR_Y23] = nameCfg.value(curLan + QString("MAIN_VAR_Y23"), tr("吸3")).toString();
        outputVarName[MAIN_VAR_Y24] = nameCfg.value(curLan + QString("MAIN_VAR_Y24"), tr("吸4")).toString();
#else
        outputVarName[MAIN_VAR_Y23] = nameCfg.value(curLan + QString("MAIN_VAR_Y23"), "Main").toString();
        outputVarName[MAIN_VAR_Y24] = nameCfg.value(curLan + QString("MAIN_VAR_Y24"), "Main").toString();
#endif
        outputVarName[MAIN_VAR_Y25] = nameCfg.value(curLan + QString("MAIN_VAR_Y25"), "Main").toString();
        outputVarName[MAIN_VAR_Y26] = nameCfg.value(curLan + QString("MAIN_VAR_Y26"), "Main").toString();
        outputVarName[MAIN_VAR_Y27] = nameCfg.value(curLan + QString("MAIN_VAR_Y27"), "Main").toString();
        outputVarName[MAIN_VAR_Y28] = nameCfg.value(curLan + QString("MAIN_VAR_Y28"), "Main").toString();
        outputVarName[MAIN_VAR_Y29] = nameCfg.value(curLan + QString("MAIN_VAR_Y29"), "Main").toString();
        outputVarName[MAIN_VAR_Y30] = nameCfg.value(curLan + QString("MAIN_VAR_Y30"), "Main").toString();
        outputVarName[MAIN_VAR_Y31] = nameCfg.value(curLan + QString("MAIN_VAR_Y31"), "Main").toString();
        outputVarName[MAIN_VAR_Y32] = nameCfg.value(curLan + QString("MAIN_VAR_Y32"), "Main").toString();
        outputVarName[MAIN_VAR_Y33] = nameCfg.value(curLan + QString("MAIN_VAR_Y33"), "Main").toString();
        outputVarName[MAIN_VAR_Y34] = nameCfg.value(curLan + QString("MAIN_VAR_Y34"), "Main").toString();
        outputVarName[MAIN_VAR_Y35] = nameCfg.value(curLan + QString("MAIN_VAR_Y35"), "Main").toString();
        outputVarName[MAIN_VAR_Y36] = nameCfg.value(curLan + QString("MAIN_VAR_Y36"), "Main").toString();
        outputVarName[MAIN_VAR_Y37] = nameCfg.value(curLan + QString("MAIN_VAR_Y37"), "Main").toString();
        outputVarName[MAIN_VAR_Y38] = nameCfg.value(curLan + QString("MAIN_VAR_Y38"), "Main").toString();
        outputVarName[MAIN_VAR_Y39] = nameCfg.value(curLan + QString("MAIN_VAR_Y39"), "Main").toString();
        outputVarName[MAIN_VAR_Y40] = nameCfg.value(curLan + QString("MAIN_VAR_Y40"), "Main").toString();
        outputVarName[MAIN_VAR_Y41] = nameCfg.value(curLan + QString("MAIN_VAR_Y41"), "Main").toString();
        outputVarName[MAIN_VAR_Y42] = nameCfg.value(curLan + QString("MAIN_VAR_Y42"), "Main").toString();
        outputVarName[MAIN_VAR_Y43] = nameCfg.value(curLan + QString("MAIN_VAR_Y43"), "Main").toString();
        outputVarName[MAIN_VAR_Y44] = nameCfg.value(curLan + QString("MAIN_VAR_Y44"), "Main").toString();
        outputVarName[MAIN_VAR_Y45] = nameCfg.value(curLan + QString("MAIN_VAR_Y45"), "Main").toString();
        outputVarName[MAIN_VAR_Y46] = nameCfg.value(curLan + QString("MAIN_VAR_Y46"), "Main").toString();
        outputVarName[MAIN_VAR_Y47] = nameCfg.value(curLan + QString("MAIN_VAR_Y47"), "Main").toString();
        outputVarName[MAIN_VAR_Y48] = nameCfg.value(curLan + QString("MAIN_VAR_Y48"), "Main").toString();
        outputVarName[MAIN_VAR_Y49] = nameCfg.value(curLan + QString("MAIN_VAR_Y49"), "Main").toString();
        outputVarName[MAIN_VAR_Y50] = nameCfg.value(curLan + QString("MAIN_VAR_Y50"), "Main").toString();
        outputVarName[MAIN_VAR_Y51] = nameCfg.value(curLan + QString("MAIN_VAR_Y51"), "Main").toString();
        outputVarName[MAIN_VAR_Y52] = nameCfg.value(curLan + QString("MAIN_VAR_Y52"), "Main").toString();
        outputVarName[MAIN_VAR_Y53] = nameCfg.value(curLan + QString("MAIN_VAR_Y53"), "Main").toString();
        outputVarName[MAIN_VAR_Y54] = nameCfg.value(curLan + QString("MAIN_VAR_Y54"), "Main").toString();
        outputVarName[MAIN_VAR_Y55] = nameCfg.value(curLan + QString("MAIN_VAR_Y55"), "Main").toString();
        outputVarName[MAIN_VAR_Y56] = nameCfg.value(curLan + QString("MAIN_VAR_Y56"), "Main").toString();
        outputVarName[MAIN_VAR_Y57] = nameCfg.value(curLan + QString("MAIN_VAR_Y57"), "Main").toString();
        outputVarName[MAIN_VAR_Y58] = nameCfg.value(curLan + QString("MAIN_VAR_Y58"), "Main").toString();
        outputVarName[MAIN_VAR_Y59] = nameCfg.value(curLan + QString("MAIN_VAR_Y59"), "Main").toString();
        outputVarName[MAIN_VAR_Y60] = nameCfg.value(curLan + QString("MAIN_VAR_Y60"), "Main").toString();
        outputVarName[MAIN_VAR_Y61] = nameCfg.value(curLan + QString("MAIN_VAR_Y61"), "Main").toString();
        outputVarName[MAIN_VAR_Y62] = nameCfg.value(curLan + QString("MAIN_VAR_Y62"), "Main").toString();
        outputVarName[MAIN_VAR_Y63] = nameCfg.value(curLan + QString("MAIN_VAR_Y63"), "Main").toString();
    }
    else if(CMBProtocol::GetSysTypeHigh() == BOARD_VERSION_H750_DVS)            //nayu
    {
        outputVarName[MAIN_VAR_Y00] = nameCfg.value(curLan + QString("MAIN_VAR_Y00"), "Main").toString();
        outputVarName[MAIN_VAR_Y01] = nameCfg.value(curLan + QString("MAIN_VAR_Y01"), "Main").toString();
        outputVarName[MAIN_VAR_Y02] = nameCfg.value(curLan + QString("MAIN_VAR_Y02"), "Main").toString();
        outputVarName[MAIN_VAR_Y03] = nameCfg.value(curLan + QString("MAIN_VAR_Y03"), "Main").toString();
        outputVarName[MAIN_VAR_Y04] = nameCfg.value(curLan + QString("MAIN_VAR_Y04"), "Main").toString();
        outputVarName[MAIN_VAR_Y05] = nameCfg.value(curLan + QString("MAIN_VAR_Y05"), "Main").toString();
        outputVarName[MAIN_VAR_Y06] = nameCfg.value(curLan + QString("MAIN_VAR_Y06"), tr("报警灯")).toString();
        outputVarName[MAIN_VAR_Y07] = nameCfg.value(curLan + QString("MAIN_VAR_Y07"), tr("报警器")).toString();
        outputVarName[MAIN_VAR_Y08] = nameCfg.value(curLan + QString("MAIN_VAR_Y08"), tr("吸具1")).toString();
        outputVarName[MAIN_VAR_Y09] = nameCfg.value(curLan + QString("MAIN_VAR_Y09"), tr("吸具2")).toString();
        outputVarName[MAIN_VAR_Y10] = nameCfg.value(curLan + QString("MAIN_VAR_Y10"), tr("抱具1")).toString();
        outputVarName[MAIN_VAR_Y11] = nameCfg.value(curLan + QString("MAIN_VAR_Y11"), tr("抱具2")).toString();
        outputVarName[MAIN_VAR_Y12] = nameCfg.value(curLan + QString("MAIN_VAR_Y12"), tr("抱具3")).toString();
        outputVarName[MAIN_VAR_Y13] = nameCfg.value(curLan + QString("MAIN_VAR_Y13"), tr("抱具4")).toString();
        outputVarName[MAIN_VAR_Y14] = nameCfg.value(curLan + QString("MAIN_VAR_Y14"), "Main").toString();
        outputVarName[MAIN_VAR_Y15] = nameCfg.value(curLan + QString("MAIN_VAR_Y15"), "Main").toString();
        outputVarName[MAIN_VAR_Y16] = nameCfg.value(curLan + QString("MAIN_VAR_Y16"), tr("保留/副臂夹")).toString();
        outputVarName[MAIN_VAR_Y17] = nameCfg.value(curLan + QString("MAIN_VAR_Y17"), "Main").toString();
        outputVarName[MAIN_VAR_Y18] = nameCfg.value(curLan + QString("MAIN_VAR_Y18"), "Main").toString();
        outputVarName[MAIN_VAR_Y19] = nameCfg.value(curLan + QString("MAIN_VAR_Y19"), "Main").toString();
        outputVarName[MAIN_VAR_Y20] = nameCfg.value(curLan + QString("MAIN_VAR_Y20"), "Main").toString();
        outputVarName[MAIN_VAR_Y21] = nameCfg.value(curLan + QString("MAIN_VAR_Y21"), tr("运行灯")).toString();
        outputVarName[MAIN_VAR_Y22] = nameCfg.value(curLan + QString("MAIN_VAR_Y22"), tr("送料机")).toString();
        outputVarName[MAIN_VAR_Y23] = nameCfg.value(curLan + QString("MAIN_VAR_Y23"), "Main").toString();
        outputVarName[MAIN_VAR_Y24] = nameCfg.value(curLan + QString("MAIN_VAR_Y24"), "Main").toString();
        outputVarName[MAIN_VAR_Y25] = nameCfg.value(curLan + QString("MAIN_VAR_Y25"), "Main").toString();
        outputVarName[MAIN_VAR_Y26] = nameCfg.value(curLan + QString("MAIN_VAR_Y26"), "Main").toString();
        outputVarName[MAIN_VAR_Y27] = nameCfg.value(curLan + QString("MAIN_VAR_Y27"), "Main").toString();
        outputVarName[MAIN_VAR_Y28] = nameCfg.value(curLan + QString("MAIN_VAR_Y28"), "Main").toString();
        outputVarName[MAIN_VAR_Y29] = nameCfg.value(curLan + QString("MAIN_VAR_Y29"), "Main").toString();
        outputVarName[MAIN_VAR_Y30] = nameCfg.value(curLan + QString("MAIN_VAR_Y30"), "Main").toString();
        outputVarName[MAIN_VAR_Y31] = nameCfg.value(curLan + QString("MAIN_VAR_Y31"), "Main").toString();
        outputVarName[MAIN_VAR_Y32] = nameCfg.value(curLan + QString("MAIN_VAR_Y32"), "Main").toString();
        outputVarName[MAIN_VAR_Y33] = nameCfg.value(curLan + QString("MAIN_VAR_Y33"), "Main").toString();
        outputVarName[MAIN_VAR_Y34] = nameCfg.value(curLan + QString("MAIN_VAR_Y34"), "Main").toString();
        outputVarName[MAIN_VAR_Y35] = nameCfg.value(curLan + QString("MAIN_VAR_Y35"), "Main").toString();
        outputVarName[MAIN_VAR_Y36] = nameCfg.value(curLan + QString("MAIN_VAR_Y36"), "Main").toString();
        outputVarName[MAIN_VAR_Y37] = nameCfg.value(curLan + QString("MAIN_VAR_Y37"), "Main").toString();
        outputVarName[MAIN_VAR_Y38] = nameCfg.value(curLan + QString("MAIN_VAR_Y38"), "Main").toString();
        outputVarName[MAIN_VAR_Y39] = nameCfg.value(curLan + QString("MAIN_VAR_Y39"), "Main").toString();
        outputVarName[MAIN_VAR_Y40] = nameCfg.value(curLan + QString("MAIN_VAR_Y40"), "Main").toString();
        outputVarName[MAIN_VAR_Y41] = nameCfg.value(curLan + QString("MAIN_VAR_Y41"), "Main").toString();
        outputVarName[MAIN_VAR_Y42] = nameCfg.value(curLan + QString("MAIN_VAR_Y42"), "Main").toString();
        outputVarName[MAIN_VAR_Y43] = nameCfg.value(curLan + QString("MAIN_VAR_Y43"), "Main").toString();
        outputVarName[MAIN_VAR_Y44] = nameCfg.value(curLan + QString("MAIN_VAR_Y44"), "Main").toString();
        outputVarName[MAIN_VAR_Y45] = nameCfg.value(curLan + QString("MAIN_VAR_Y45"), "Main").toString();
        outputVarName[MAIN_VAR_Y46] = nameCfg.value(curLan + QString("MAIN_VAR_Y46"), "Main").toString();
        outputVarName[MAIN_VAR_Y47] = nameCfg.value(curLan + QString("MAIN_VAR_Y47"), "Main").toString();
        outputVarName[MAIN_VAR_Y48] = nameCfg.value(curLan + QString("MAIN_VAR_Y48"), "Main").toString();
        outputVarName[MAIN_VAR_Y49] = nameCfg.value(curLan + QString("MAIN_VAR_Y49"), "Main").toString();
        outputVarName[MAIN_VAR_Y50] = nameCfg.value(curLan + QString("MAIN_VAR_Y50"), "Main").toString();
        outputVarName[MAIN_VAR_Y51] = nameCfg.value(curLan + QString("MAIN_VAR_Y51"), "Main").toString();
        outputVarName[MAIN_VAR_Y52] = nameCfg.value(curLan + QString("MAIN_VAR_Y52"), "Main").toString();
        outputVarName[MAIN_VAR_Y53] = nameCfg.value(curLan + QString("MAIN_VAR_Y53"), "Main").toString();
        outputVarName[MAIN_VAR_Y54] = nameCfg.value(curLan + QString("MAIN_VAR_Y54"), "Main").toString();
        outputVarName[MAIN_VAR_Y55] = nameCfg.value(curLan + QString("MAIN_VAR_Y55"), "Main").toString();
        outputVarName[MAIN_VAR_Y56] = nameCfg.value(curLan + QString("MAIN_VAR_Y56"), "Main").toString();
        outputVarName[MAIN_VAR_Y57] = nameCfg.value(curLan + QString("MAIN_VAR_Y57"), "Main").toString();
        outputVarName[MAIN_VAR_Y58] = nameCfg.value(curLan + QString("MAIN_VAR_Y58"), "Main").toString();
        outputVarName[MAIN_VAR_Y59] = nameCfg.value(curLan + QString("MAIN_VAR_Y59"), "Main").toString();
        outputVarName[MAIN_VAR_Y60] = nameCfg.value(curLan + QString("MAIN_VAR_Y60"), "Main").toString();
        outputVarName[MAIN_VAR_Y61] = nameCfg.value(curLan + QString("MAIN_VAR_Y61"), "Main").toString();
        outputVarName[MAIN_VAR_Y62] = nameCfg.value(curLan + QString("MAIN_VAR_Y62"), "Main").toString();
        outputVarName[MAIN_VAR_Y63] = nameCfg.value(curLan + QString("MAIN_VAR_Y63"), "Main").toString();
    }
    else if(CMBProtocol::GetSysTypeHigh() == BOARD_VERSION_ECAT_CANOPEN)
    {
        outputVarName[MAIN_VAR_Y00] = nameCfg.value(curLan + QString("MAIN_VAR_Y00"), "Main").toString();
        outputVarName[MAIN_VAR_Y01] = nameCfg.value(curLan + QString("MAIN_VAR_Y01"), "Main").toString();
        outputVarName[MAIN_VAR_Y02] = nameCfg.value(curLan + QString("MAIN_VAR_Y02"), "Main").toString();
        outputVarName[MAIN_VAR_Y03] = nameCfg.value(curLan + QString("MAIN_VAR_Y03"), "Main").toString();
        outputVarName[MAIN_VAR_Y04] = nameCfg.value(curLan + QString("MAIN_VAR_Y04"), "Main").toString();
        outputVarName[MAIN_VAR_Y05] = nameCfg.value(curLan + QString("MAIN_VAR_Y05"), "Main").toString();
        outputVarName[MAIN_VAR_Y06] = nameCfg.value(curLan + QString("MAIN_VAR_Y06"), "Main").toString();
        outputVarName[MAIN_VAR_Y07] = nameCfg.value(curLan + QString("MAIN_VAR_Y07"), "Main").toString();
        outputVarName[MAIN_VAR_Y08] = nameCfg.value(curLan + QString("MAIN_VAR_Y08"), "Main").toString();
        outputVarName[MAIN_VAR_Y09] = nameCfg.value(curLan + QString("MAIN_VAR_Y09"), "Main").toString();
        outputVarName[MAIN_VAR_Y10] = nameCfg.value(curLan + QString("MAIN_VAR_Y10"), "Main").toString();
        outputVarName[MAIN_VAR_Y11] = nameCfg.value(curLan + QString("MAIN_VAR_Y11"), "Main").toString();
        outputVarName[MAIN_VAR_Y12] = nameCfg.value(curLan + QString("MAIN_VAR_Y12"), "Main").toString();
        outputVarName[MAIN_VAR_Y13] = nameCfg.value(curLan + QString("MAIN_VAR_Y13"), "Main").toString();
        outputVarName[MAIN_VAR_Y14] = nameCfg.value(curLan + QString("MAIN_VAR_Y14"), "Main").toString();
        outputVarName[MAIN_VAR_Y15] = nameCfg.value(curLan + QString("MAIN_VAR_Y15"), "Main").toString();
        outputVarName[MAIN_VAR_Y16] = nameCfg.value(curLan + QString("MAIN_VAR_Y16"), tr("吸具1")).toString();
        outputVarName[MAIN_VAR_Y17] = nameCfg.value(curLan + QString("MAIN_VAR_Y17"), tr("吸具2")).toString();
        outputVarName[MAIN_VAR_Y18] = nameCfg.value(curLan + QString("MAIN_VAR_Y18"), tr("抱具1")).toString();
        outputVarName[MAIN_VAR_Y19] = nameCfg.value(curLan + QString("MAIN_VAR_Y19"), tr("抱具2")).toString();
        outputVarName[MAIN_VAR_Y20] = nameCfg.value(curLan + QString("MAIN_VAR_Y20"), tr("抱具3")).toString();
        outputVarName[MAIN_VAR_Y21] = nameCfg.value(curLan + QString("MAIN_VAR_Y21"), tr("抱具4")).toString();
        outputVarName[MAIN_VAR_Y22] = nameCfg.value(curLan + QString("MAIN_VAR_Y22"), tr("吸具3")).toString();
        outputVarName[MAIN_VAR_Y23] = nameCfg.value(curLan + QString("MAIN_VAR_Y23"), tr("吸具4")).toString();
        outputVarName[MAIN_VAR_Y24] = nameCfg.value(curLan + QString("MAIN_VAR_Y24"), "Main").toString();
        outputVarName[MAIN_VAR_Y25] = nameCfg.value(curLan + QString("MAIN_VAR_Y25"), "Main").toString();
        outputVarName[MAIN_VAR_Y26] = nameCfg.value(curLan + QString("MAIN_VAR_Y26"), "Main").toString();
        outputVarName[MAIN_VAR_Y27] = nameCfg.value(curLan + QString("MAIN_VAR_Y27"), "Main").toString();
        outputVarName[MAIN_VAR_Y28] = nameCfg.value(curLan + QString("MAIN_VAR_Y28"), "Main").toString();
        outputVarName[MAIN_VAR_Y29] = nameCfg.value(curLan + QString("MAIN_VAR_Y29"), "Main").toString();
        outputVarName[MAIN_VAR_Y30] = nameCfg.value(curLan + QString("MAIN_VAR_Y30"), "Main").toString();
        outputVarName[MAIN_VAR_Y31] = nameCfg.value(curLan + QString("MAIN_VAR_Y31"), "Main").toString();
        outputVarName[MAIN_VAR_Y32] = nameCfg.value(curLan + QString("MAIN_VAR_Y32"), "Main").toString();
        outputVarName[MAIN_VAR_Y33] = nameCfg.value(curLan + QString("MAIN_VAR_Y33"), "Main").toString();
        outputVarName[MAIN_VAR_Y34] = nameCfg.value(curLan + QString("MAIN_VAR_Y34"), "Main").toString();
        outputVarName[MAIN_VAR_Y35] = nameCfg.value(curLan + QString("MAIN_VAR_Y35"), "Main").toString();
        outputVarName[MAIN_VAR_Y36] = nameCfg.value(curLan + QString("MAIN_VAR_Y36"), "Main").toString();
        outputVarName[MAIN_VAR_Y37] = nameCfg.value(curLan + QString("MAIN_VAR_Y37"), "Main").toString();
        outputVarName[MAIN_VAR_Y38] = nameCfg.value(curLan + QString("MAIN_VAR_Y38"), "Main").toString();
        outputVarName[MAIN_VAR_Y39] = nameCfg.value(curLan + QString("MAIN_VAR_Y39"), "Main").toString();
        outputVarName[MAIN_VAR_Y40] = nameCfg.value(curLan + QString("MAIN_VAR_Y40"), "Main").toString();
        outputVarName[MAIN_VAR_Y41] = nameCfg.value(curLan + QString("MAIN_VAR_Y41"), "Main").toString();
        outputVarName[MAIN_VAR_Y42] = nameCfg.value(curLan + QString("MAIN_VAR_Y42"), "Main").toString();
        outputVarName[MAIN_VAR_Y43] = nameCfg.value(curLan + QString("MAIN_VAR_Y43"), "Main").toString();
        outputVarName[MAIN_VAR_Y44] = nameCfg.value(curLan + QString("MAIN_VAR_Y44"), "Main").toString();
        outputVarName[MAIN_VAR_Y45] = nameCfg.value(curLan + QString("MAIN_VAR_Y45"), "Main").toString();
        outputVarName[MAIN_VAR_Y46] = nameCfg.value(curLan + QString("MAIN_VAR_Y46"), "Main").toString();
        outputVarName[MAIN_VAR_Y47] = nameCfg.value(curLan + QString("MAIN_VAR_Y47"), "Main").toString();
        outputVarName[MAIN_VAR_Y48] = nameCfg.value(curLan + QString("MAIN_VAR_Y48"), "Main").toString();
        outputVarName[MAIN_VAR_Y49] = nameCfg.value(curLan + QString("MAIN_VAR_Y49"), "Main").toString();
        outputVarName[MAIN_VAR_Y50] = nameCfg.value(curLan + QString("MAIN_VAR_Y50"), "Main").toString();
        outputVarName[MAIN_VAR_Y51] = nameCfg.value(curLan + QString("MAIN_VAR_Y51"), "Main").toString();
        outputVarName[MAIN_VAR_Y52] = nameCfg.value(curLan + QString("MAIN_VAR_Y52"), "Main").toString();
        outputVarName[MAIN_VAR_Y53] = nameCfg.value(curLan + QString("MAIN_VAR_Y53"), "Main").toString();
        outputVarName[MAIN_VAR_Y54] = nameCfg.value(curLan + QString("MAIN_VAR_Y54"), "Main").toString();
        outputVarName[MAIN_VAR_Y55] = nameCfg.value(curLan + QString("MAIN_VAR_Y55"), "Main").toString();
        outputVarName[MAIN_VAR_Y56] = nameCfg.value(curLan + QString("MAIN_VAR_Y56"), "Main").toString();
        outputVarName[MAIN_VAR_Y57] = nameCfg.value(curLan + QString("MAIN_VAR_Y57"), "Main").toString();
        outputVarName[MAIN_VAR_Y58] = nameCfg.value(curLan + QString("MAIN_VAR_Y58"), "Main").toString();
        outputVarName[MAIN_VAR_Y59] = nameCfg.value(curLan + QString("MAIN_VAR_Y59"), "Main").toString();
        outputVarName[MAIN_VAR_Y60] = nameCfg.value(curLan + QString("MAIN_VAR_Y60"), "Main").toString();
        outputVarName[MAIN_VAR_Y61] = nameCfg.value(curLan + QString("MAIN_VAR_Y61"), "Main").toString();
        outputVarName[MAIN_VAR_Y62] = nameCfg.value(curLan + QString("MAIN_VAR_Y62"), "Main").toString();
        outputVarName[MAIN_VAR_Y63] = nameCfg.value(curLan + QString("MAIN_VAR_Y63"), "Main").toString();
    }
    else
    {
        outputVarName[MAIN_VAR_Y00] = nameCfg.value(curLan + QString("MAIN_VAR_Y00"), "Main").toString();
        outputVarName[MAIN_VAR_Y01] = nameCfg.value(curLan + QString("MAIN_VAR_Y01"), "Main").toString();
        outputVarName[MAIN_VAR_Y02] = nameCfg.value(curLan + QString("MAIN_VAR_Y02"), "Main").toString();
        outputVarName[MAIN_VAR_Y03] = nameCfg.value(curLan + QString("MAIN_VAR_Y03"), "Main").toString();
        outputVarName[MAIN_VAR_Y04] = nameCfg.value(curLan + QString("MAIN_VAR_Y04"), "Main").toString();
        outputVarName[MAIN_VAR_Y05] = nameCfg.value(curLan + QString("MAIN_VAR_Y05"), "Main").toString();
        outputVarName[MAIN_VAR_Y06] = nameCfg.value(curLan + QString("MAIN_VAR_Y06"), "Main").toString();
        outputVarName[MAIN_VAR_Y07] = nameCfg.value(curLan + QString("MAIN_VAR_Y07"), "Main").toString();
        outputVarName[MAIN_VAR_Y08] = nameCfg.value(curLan + QString("MAIN_VAR_Y08"), "Main").toString();
        outputVarName[MAIN_VAR_Y09] = nameCfg.value(curLan + QString("MAIN_VAR_Y09"), "Main").toString();
        outputVarName[MAIN_VAR_Y10] = nameCfg.value(curLan + QString("MAIN_VAR_Y10"), "Main").toString();
        outputVarName[MAIN_VAR_Y11] = nameCfg.value(curLan + QString("MAIN_VAR_Y11"), "Main").toString();
        if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_E0)
        {
            outputVarName[MAIN_VAR_Y12] = nameCfg.value(curLan + QString("MAIN_VAR_Y12"), tr("吸具1")).toString();
            outputVarName[MAIN_VAR_Y13] = nameCfg.value(curLan + QString("MAIN_VAR_Y13"), tr("夹具1")).toString();
            outputVarName[MAIN_VAR_Y14] = nameCfg.value(curLan + QString("MAIN_VAR_Y14"), tr("抱具1")).toString();
            outputVarName[MAIN_VAR_Y15] = nameCfg.value(curLan + QString("MAIN_VAR_Y15"), tr("输送带")).toString();
        }
        else
        {
            outputVarName[MAIN_VAR_Y12] = nameCfg.value(curLan + QString("MAIN_VAR_Y12"), "Main").toString();
            outputVarName[MAIN_VAR_Y13] = nameCfg.value(curLan + QString("MAIN_VAR_Y13"), "Main").toString();
            outputVarName[MAIN_VAR_Y14] = nameCfg.value(curLan + QString("MAIN_VAR_Y14"), "Main").toString();
            outputVarName[MAIN_VAR_Y15] = nameCfg.value(curLan + QString("MAIN_VAR_Y15"), "Main").toString();
        }
        outputVarName[MAIN_VAR_Y16] = nameCfg.value(curLan + QString("MAIN_VAR_Y16"), "Main").toString();
        outputVarName[MAIN_VAR_Y17] = nameCfg.value(curLan + QString("MAIN_VAR_Y17"), "Main").toString();
        outputVarName[MAIN_VAR_Y18] = nameCfg.value(curLan + QString("MAIN_VAR_Y18"), "Main").toString();
        outputVarName[MAIN_VAR_Y19] = nameCfg.value(curLan + QString("MAIN_VAR_Y19"), "Main").toString();
        outputVarName[MAIN_VAR_Y20] = nameCfg.value(curLan + QString("MAIN_VAR_Y20"), "Main").toString();
        outputVarName[MAIN_VAR_Y21] = nameCfg.value(curLan + QString("MAIN_VAR_Y21"), "Main").toString();
        outputVarName[MAIN_VAR_Y22] = nameCfg.value(curLan + QString("MAIN_VAR_Y22"), "Main").toString();
        outputVarName[MAIN_VAR_Y23] = nameCfg.value(curLan + QString("MAIN_VAR_Y23"), "Main").toString();
        outputVarName[MAIN_VAR_Y24] = nameCfg.value(curLan + QString("MAIN_VAR_Y24"), "Main").toString();
        outputVarName[MAIN_VAR_Y25] = nameCfg.value(curLan + QString("MAIN_VAR_Y25"), "Main").toString();
        outputVarName[MAIN_VAR_Y26] = nameCfg.value(curLan + QString("MAIN_VAR_Y26"), "Main").toString();
        outputVarName[MAIN_VAR_Y27] = nameCfg.value(curLan + QString("MAIN_VAR_Y27"), "Main").toString();
        outputVarName[MAIN_VAR_Y28] = nameCfg.value(curLan + QString("MAIN_VAR_Y28"), "Main").toString();
        outputVarName[MAIN_VAR_Y29] = nameCfg.value(curLan + QString("MAIN_VAR_Y29"), "Main").toString();
        outputVarName[MAIN_VAR_Y30] = nameCfg.value(curLan + QString("MAIN_VAR_Y30"), "Main").toString();
        outputVarName[MAIN_VAR_Y31] = nameCfg.value(curLan + QString("MAIN_VAR_Y31"), "Main").toString();
        outputVarName[MAIN_VAR_Y32] = nameCfg.value(curLan + QString("MAIN_VAR_Y32"), "Main").toString();
        outputVarName[MAIN_VAR_Y33] = nameCfg.value(curLan + QString("MAIN_VAR_Y33"), "Main").toString();
        outputVarName[MAIN_VAR_Y34] = nameCfg.value(curLan + QString("MAIN_VAR_Y34"), "Main").toString();
        outputVarName[MAIN_VAR_Y35] = nameCfg.value(curLan + QString("MAIN_VAR_Y35"), "Main").toString();
        outputVarName[MAIN_VAR_Y36] = nameCfg.value(curLan + QString("MAIN_VAR_Y36"), "Main").toString();
        outputVarName[MAIN_VAR_Y37] = nameCfg.value(curLan + QString("MAIN_VAR_Y37"), "Main").toString();
        outputVarName[MAIN_VAR_Y38] = nameCfg.value(curLan + QString("MAIN_VAR_Y38"), "Main").toString();
        outputVarName[MAIN_VAR_Y39] = nameCfg.value(curLan + QString("MAIN_VAR_Y39"), "Main").toString();
        outputVarName[MAIN_VAR_Y40] = nameCfg.value(curLan + QString("MAIN_VAR_Y40"), "Main").toString();
        outputVarName[MAIN_VAR_Y41] = nameCfg.value(curLan + QString("MAIN_VAR_Y41"), "Main").toString();
        outputVarName[MAIN_VAR_Y42] = nameCfg.value(curLan + QString("MAIN_VAR_Y42"), "Main").toString();
        outputVarName[MAIN_VAR_Y43] = nameCfg.value(curLan + QString("MAIN_VAR_Y43"), "Main").toString();
        outputVarName[MAIN_VAR_Y44] = nameCfg.value(curLan + QString("MAIN_VAR_Y44"), "Main").toString();
        outputVarName[MAIN_VAR_Y45] = nameCfg.value(curLan + QString("MAIN_VAR_Y45"), "Main").toString();
        outputVarName[MAIN_VAR_Y46] = nameCfg.value(curLan + QString("MAIN_VAR_Y46"), "Main").toString();
        outputVarName[MAIN_VAR_Y47] = nameCfg.value(curLan + QString("MAIN_VAR_Y47"), "Main").toString();
        outputVarName[MAIN_VAR_Y48] = nameCfg.value(curLan + QString("MAIN_VAR_Y48"), "Main").toString();
        outputVarName[MAIN_VAR_Y49] = nameCfg.value(curLan + QString("MAIN_VAR_Y49"), "Main").toString();
        outputVarName[MAIN_VAR_Y50] = nameCfg.value(curLan + QString("MAIN_VAR_Y50"), "Main").toString();
        outputVarName[MAIN_VAR_Y51] = nameCfg.value(curLan + QString("MAIN_VAR_Y51"), "Main").toString();
        outputVarName[MAIN_VAR_Y52] = nameCfg.value(curLan + QString("MAIN_VAR_Y52"), "Main").toString();
        outputVarName[MAIN_VAR_Y53] = nameCfg.value(curLan + QString("MAIN_VAR_Y53"), "Main").toString();
        outputVarName[MAIN_VAR_Y54] = nameCfg.value(curLan + QString("MAIN_VAR_Y54"), "Main").toString();
        outputVarName[MAIN_VAR_Y55] = nameCfg.value(curLan + QString("MAIN_VAR_Y55"), "Main").toString();
        outputVarName[MAIN_VAR_Y56] = nameCfg.value(curLan + QString("MAIN_VAR_Y56"), "Main").toString();
        outputVarName[MAIN_VAR_Y57] = nameCfg.value(curLan + QString("MAIN_VAR_Y57"), "Main").toString();
        outputVarName[MAIN_VAR_Y58] = nameCfg.value(curLan + QString("MAIN_VAR_Y58"), "Main").toString();
        outputVarName[MAIN_VAR_Y59] = nameCfg.value(curLan + QString("MAIN_VAR_Y59"), "Main").toString();
        outputVarName[MAIN_VAR_Y60] = nameCfg.value(curLan + QString("MAIN_VAR_Y60"), "Main").toString();
        outputVarName[MAIN_VAR_Y61] = nameCfg.value(curLan + QString("MAIN_VAR_Y61"), "Main").toString();
        outputVarName[MAIN_VAR_Y62] = nameCfg.value(curLan + QString("MAIN_VAR_Y62"), "Main").toString();
        outputVarName[MAIN_VAR_Y63] = nameCfg.value(curLan + QString("MAIN_VAR_Y63"), "Main").toString();
    }
#if ((FACTORY == FA_KEWEI) || (FACTORY == FA_KEHAO) || (FACTORY == FA_WOERDA) || (FACTORY == FA_ZHENJIE))
    outputVarName[EM1_VAR_Y00] = nameCfg.value(curLan + QString("EM1_VAR_Y00"), tr("EM1")).toString();
    outputVarName[EM1_VAR_Y01] = nameCfg.value(curLan + QString("EM1_VAR_Y01"), tr("EM1")).toString();
    outputVarName[EM1_VAR_Y02] = nameCfg.value(curLan + QString("EM1_VAR_Y02"), tr("EM1")).toString();
    outputVarName[EM1_VAR_Y03] = nameCfg.value(curLan + QString("EM1_VAR_Y03"), tr("爪手阀")).toString();
    outputVarName[EM1_VAR_Y04] = nameCfg.value(curLan + QString("EM1_VAR_Y04"), tr("动模吹气1")).toString();
    outputVarName[EM1_VAR_Y05] = nameCfg.value(curLan + QString("EM1_VAR_Y05"), tr("动模吹气2")).toString();
    outputVarName[EM1_VAR_Y06] = nameCfg.value(curLan + QString("EM1_VAR_Y06"), tr("动模吹气3")).toString();
    outputVarName[EM1_VAR_Y07] = nameCfg.value(curLan + QString("EM1_VAR_Y07"), tr("动模吹气4")).toString();
    outputVarName[EM1_VAR_Y08] = nameCfg.value(curLan + QString("EM1_VAR_Y08"), tr("定模吹气1")).toString();
    outputVarName[EM1_VAR_Y09] = nameCfg.value(curLan + QString("EM1_VAR_Y09"), tr("定模吹气2")).toString();
    outputVarName[EM1_VAR_Y10] = nameCfg.value(curLan + QString("EM1_VAR_Y10"), tr("定模吹气3")).toString();
    outputVarName[EM1_VAR_Y11] = nameCfg.value(curLan + QString("EM1_VAR_Y11"), tr("定模吹气4")).toString();
    outputVarName[EM1_VAR_Y12] = nameCfg.value(curLan + QString("EM1_VAR_Y12"), tr("动模水阀1")).toString();
    outputVarName[EM1_VAR_Y13] = nameCfg.value(curLan + QString("EM1_VAR_Y13"), tr("动模水阀2")).toString();
    outputVarName[EM1_VAR_Y14] = nameCfg.value(curLan + QString("EM1_VAR_Y14"), tr("动模水阀3")).toString();
    outputVarName[EM1_VAR_Y15] = nameCfg.value(curLan + QString("EM1_VAR_Y15"), tr("动模水阀4")).toString();
    // 扩展模块2扩展输出
    outputVarName[EM2_VAR_Y00] = nameCfg.value(curLan + QString("EM2_VAR_Y00"), tr("定模水阀1")).toString();
    outputVarName[EM2_VAR_Y01] = nameCfg.value(curLan + QString("EM2_VAR_Y01"), tr("定模水阀2")).toString();
    outputVarName[EM2_VAR_Y02] = nameCfg.value(curLan + QString("EM2_VAR_Y02"), tr("定模水阀3")).toString();
    outputVarName[EM2_VAR_Y03] = nameCfg.value(curLan + QString("EM2_VAR_Y03"), tr("定模水阀4")).toString();
    outputVarName[EM2_VAR_Y04] = nameCfg.value(curLan + QString("EM2_VAR_Y04"), tr("输送带")).toString();
    outputVarName[EM2_VAR_Y05] = nameCfg.value(curLan + QString("EM2_VAR_Y05"), tr("备用")).toString();
    outputVarName[EM2_VAR_Y06] = nameCfg.value(curLan + QString("EM2_VAR_Y06"), tr("再循环启动")).toString();
    outputVarName[EM2_VAR_Y07] = nameCfg.value(curLan + QString("EM2_VAR_Y07"), tr("备用")).toString();
    outputVarName[EM2_VAR_Y08] = nameCfg.value(curLan + QString("EM2_VAR_Y08"), tr("备用")).toString();
    outputVarName[EM2_VAR_Y09] = nameCfg.value(curLan + QString("EM2_VAR_Y09"), tr("备用")).toString();
    outputVarName[EM2_VAR_Y10] = nameCfg.value(curLan + QString("EM2_VAR_Y10"), tr("EM2")).toString();
    outputVarName[EM2_VAR_Y11] = nameCfg.value(curLan + QString("EM2_VAR_Y11"), tr("EM2")).toString();
    outputVarName[EM2_VAR_Y12] = nameCfg.value(curLan + QString("EM2_VAR_Y12"), tr("EM2")).toString();
    outputVarName[EM2_VAR_Y13] = nameCfg.value(curLan + QString("EM2_VAR_Y13"), tr("EM2")).toString();
    outputVarName[EM2_VAR_Y14] = nameCfg.value(curLan + QString("EM2_VAR_Y14"), tr("EM2")).toString();
    outputVarName[EM2_VAR_Y15] = nameCfg.value(curLan + QString("EM2_VAR_Y15"), tr("EM2")).toString();
#elif (FACTORY == FA_SONINT)
    if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_YZ)
    {
        outputVarName[EM1_VAR_Y00] = nameCfg.value(curLan + QString("EM1_VAR_Y00"), tr("EM1")).toString();
        outputVarName[EM1_VAR_Y01] = nameCfg.value(curLan + QString("EM1_VAR_Y01"), tr("EM1")).toString();
        outputVarName[EM1_VAR_Y02] = nameCfg.value(curLan + QString("EM1_VAR_Y02"), tr("定模吹气4")).toString();
        outputVarName[EM1_VAR_Y03] = nameCfg.value(curLan + QString("EM1_VAR_Y03"), tr("爪手阀")).toString();
        outputVarName[EM1_VAR_Y04] = nameCfg.value(curLan + QString("EM1_VAR_Y04"), tr("动模吹气1")).toString();
        outputVarName[EM1_VAR_Y05] = nameCfg.value(curLan + QString("EM1_VAR_Y05"), tr("动模吹气2")).toString();
        outputVarName[EM1_VAR_Y06] = nameCfg.value(curLan + QString("EM1_VAR_Y06"), tr("动模吹气3")).toString();
        outputVarName[EM1_VAR_Y07] = nameCfg.value(curLan + QString("EM1_VAR_Y07"), tr("动模吹气4")).toString();
        outputVarName[EM1_VAR_Y08] = nameCfg.value(curLan + QString("EM1_VAR_Y08"), tr("定模吹气1")).toString();
        outputVarName[EM1_VAR_Y09] = nameCfg.value(curLan + QString("EM1_VAR_Y09"), tr("定模吹气2")).toString();
        outputVarName[EM1_VAR_Y10] = nameCfg.value(curLan + QString("EM1_VAR_Y10"), tr("定模吹气3")).toString();
        outputVarName[EM1_VAR_Y11] = nameCfg.value(curLan + QString("EM1_VAR_Y11"), tr("打油")).toString();
        outputVarName[EM1_VAR_Y12] = nameCfg.value(curLan + QString("EM1_VAR_Y12"), tr("动模水阀1")).toString();
        outputVarName[EM1_VAR_Y13] = nameCfg.value(curLan + QString("EM1_VAR_Y13"), tr("动模水阀2")).toString();
        outputVarName[EM1_VAR_Y14] = nameCfg.value(curLan + QString("EM1_VAR_Y14"), tr("动模水阀3")).toString();
        outputVarName[EM1_VAR_Y15] = nameCfg.value(curLan + QString("EM1_VAR_Y15"), tr("动模水阀4")).toString();
        // 扩展模块2扩展输出
        outputVarName[EM2_VAR_Y00] = nameCfg.value(curLan + QString("EM2_VAR_Y00"), tr("吹气阀9")).toString();
        outputVarName[EM2_VAR_Y01] = nameCfg.value(curLan + QString("EM2_VAR_Y01"), tr("吹气阀10")).toString();
        outputVarName[EM2_VAR_Y02] = nameCfg.value(curLan + QString("EM2_VAR_Y02"), tr("吹气阀11")).toString();
        outputVarName[EM2_VAR_Y03] = nameCfg.value(curLan + QString("EM2_VAR_Y03"), tr("吹气阀12")).toString();
        outputVarName[EM2_VAR_Y04] = nameCfg.value(curLan + QString("EM2_VAR_Y04"), tr("喷水阀5")).toString();
        outputVarName[EM2_VAR_Y05] = nameCfg.value(curLan + QString("EM2_VAR_Y05"), tr("喷水阀6")).toString();
        outputVarName[EM2_VAR_Y06] = nameCfg.value(curLan + QString("EM2_VAR_Y06"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y07] = nameCfg.value(curLan + QString("EM2_VAR_Y07"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y08] = nameCfg.value(curLan + QString("EM2_VAR_Y08"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y09] = nameCfg.value(curLan + QString("EM2_VAR_Y09"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y10] = nameCfg.value(curLan + QString("EM2_VAR_Y10"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y11] = nameCfg.value(curLan + QString("EM2_VAR_Y11"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y12] = nameCfg.value(curLan + QString("EM2_VAR_Y12"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y13] = nameCfg.value(curLan + QString("EM2_VAR_Y13"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y14] = nameCfg.value(curLan + QString("EM2_VAR_Y14"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y15] = nameCfg.value(curLan + QString("EM2_VAR_Y15"), tr("EM2")).toString();
    }
    else
    {
        outputVarName[EM1_VAR_Y00] = nameCfg.value(curLan + QString("EM1_VAR_Y00"), tr("EM1")).toString();
        outputVarName[EM1_VAR_Y01] = nameCfg.value(curLan + QString("EM1_VAR_Y01"), tr("EM1")).toString();
        if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_E0)
        {
            outputVarName[EM1_VAR_Y02] = nameCfg.value(curLan + QString("EM1_VAR_Y02"), "EM1").toString();
            outputVarName[EM1_VAR_Y03] = nameCfg.value(curLan + QString("EM1_VAR_Y03"), "EM1").toString();
            outputVarName[EM1_VAR_Y04] = nameCfg.value(curLan + QString("EM1_VAR_Y04"), "EM1").toString();
            outputVarName[EM1_VAR_Y05] = nameCfg.value(curLan + QString("EM1_VAR_Y05"), "EM1").toString();
            outputVarName[EM1_VAR_Y06] = nameCfg.value(curLan + QString("EM1_VAR_Y06"), "EM1").toString();
            outputVarName[EM1_VAR_Y07] = nameCfg.value(curLan + QString("EM1_VAR_Y07"), "EM1").toString();
        }
        else
        {
            outputVarName[EM1_VAR_Y02] = nameCfg.value(curLan + QString("EM1_VAR_Y02"), tr("吸具1")).toString();
            outputVarName[EM1_VAR_Y03] = nameCfg.value(curLan + QString("EM1_VAR_Y03"), tr("吸具2")).toString();
            outputVarName[EM1_VAR_Y04] = nameCfg.value(curLan + QString("EM1_VAR_Y04"), tr("抱具1")).toString();
            outputVarName[EM1_VAR_Y05] = nameCfg.value(curLan + QString("EM1_VAR_Y05"), tr("抱具2")).toString();
            outputVarName[EM1_VAR_Y06] = nameCfg.value(curLan + QString("EM1_VAR_Y06"), tr("抱具3")).toString();
            outputVarName[EM1_VAR_Y07] = nameCfg.value(curLan + QString("EM1_VAR_Y07"), tr("抱具4")).toString();
        }
        outputVarName[EM1_VAR_Y08] = nameCfg.value(curLan + QString("EM1_VAR_Y08"), "EM1").toString();
        outputVarName[EM1_VAR_Y09] = nameCfg.value(curLan + QString("EM1_VAR_Y09"), "EM1").toString();
        outputVarName[EM1_VAR_Y10] = nameCfg.value(curLan + QString("EM1_VAR_Y10"), "EM1").toString();
        outputVarName[EM1_VAR_Y11] = nameCfg.value(curLan + QString("EM1_VAR_Y11"), "EM1").toString();
        outputVarName[EM1_VAR_Y12] = nameCfg.value(curLan + QString("EM1_VAR_Y12"), "EM1").toString();
        outputVarName[EM1_VAR_Y13] = nameCfg.value(curLan + QString("EM1_VAR_Y13"), "EM1").toString();
        outputVarName[EM1_VAR_Y14] = nameCfg.value(curLan + QString("EM1_VAR_Y14"), "EM1").toString();
        outputVarName[EM1_VAR_Y15] = nameCfg.value(curLan + QString("EM1_VAR_Y15"), "EM1").toString();
        // 扩展模块2扩展输出
        outputVarName[EM2_VAR_Y00] = nameCfg.value(curLan + QString("EM2_VAR_Y00"), "EM2").toString();
        outputVarName[EM2_VAR_Y01] = nameCfg.value(curLan + QString("EM2_VAR_Y01"), "EM2").toString();
        outputVarName[EM2_VAR_Y02] = nameCfg.value(curLan + QString("EM2_VAR_Y02"), "EM2").toString();
        outputVarName[EM2_VAR_Y03] = nameCfg.value(curLan + QString("EM2_VAR_Y03"), "EM2").toString();
        outputVarName[EM2_VAR_Y04] = nameCfg.value(curLan + QString("EM2_VAR_Y04"), "EM2").toString();
        outputVarName[EM2_VAR_Y05] = nameCfg.value(curLan + QString("EM2_VAR_Y05"), "EM2").toString();
        outputVarName[EM2_VAR_Y06] = nameCfg.value(curLan + QString("EM2_VAR_Y06"), "EM2").toString();
        outputVarName[EM2_VAR_Y07] = nameCfg.value(curLan + QString("EM2_VAR_Y07"), "EM2").toString();
        outputVarName[EM2_VAR_Y08] = nameCfg.value(curLan + QString("EM2_VAR_Y08"), "EM2").toString();
        outputVarName[EM2_VAR_Y09] = nameCfg.value(curLan + QString("EM2_VAR_Y09"), "EM2").toString();
        outputVarName[EM2_VAR_Y10] = nameCfg.value(curLan + QString("EM2_VAR_Y10"), "EM2").toString();
        outputVarName[EM2_VAR_Y11] = nameCfg.value(curLan + QString("EM2_VAR_Y11"), "EM2").toString();
        outputVarName[EM2_VAR_Y12] = nameCfg.value(curLan + QString("EM2_VAR_Y12"), "EM2").toString();
        outputVarName[EM2_VAR_Y13] = nameCfg.value(curLan + QString("EM2_VAR_Y13"), "EM2").toString();
        outputVarName[EM2_VAR_Y14] = nameCfg.value(curLan + QString("EM2_VAR_Y14"), "EM2").toString();
        outputVarName[EM2_VAR_Y15] = nameCfg.value(curLan + QString("EM2_VAR_Y15"), "EM2").toString();
    }
#else
    if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_YZ)
    {
        outputVarName[EM1_VAR_Y00] = nameCfg.value(curLan + QString("EM1_VAR_Y00"), tr("EM1")).toString();
        outputVarName[EM1_VAR_Y01] = nameCfg.value(curLan + QString("EM1_VAR_Y01"), tr("EM1")).toString();
        outputVarName[EM1_VAR_Y02] = nameCfg.value(curLan + QString("EM1_VAR_Y02"), tr("EM1")).toString();
        outputVarName[EM1_VAR_Y03] = nameCfg.value(curLan + QString("EM1_VAR_Y03"), tr("爪手阀")).toString();
        outputVarName[EM1_VAR_Y04] = nameCfg.value(curLan + QString("EM1_VAR_Y04"), tr("动模吹气1")).toString();
        outputVarName[EM1_VAR_Y05] = nameCfg.value(curLan + QString("EM1_VAR_Y05"), tr("动模吹气2")).toString();
        outputVarName[EM1_VAR_Y06] = nameCfg.value(curLan + QString("EM1_VAR_Y06"), tr("动模吹气3")).toString();
        outputVarName[EM1_VAR_Y07] = nameCfg.value(curLan + QString("EM1_VAR_Y07"), tr("动模吹气4")).toString();
        outputVarName[EM1_VAR_Y08] = nameCfg.value(curLan + QString("EM1_VAR_Y08"), tr("定模吹气1")).toString();
        outputVarName[EM1_VAR_Y09] = nameCfg.value(curLan + QString("EM1_VAR_Y09"), tr("定模吹气2")).toString();
        outputVarName[EM1_VAR_Y10] = nameCfg.value(curLan + QString("EM1_VAR_Y10"), tr("定模吹气3")).toString();
        outputVarName[EM1_VAR_Y11] = nameCfg.value(curLan + QString("EM1_VAR_Y11"), tr("定模吹气4")).toString();
        outputVarName[EM1_VAR_Y12] = nameCfg.value(curLan + QString("EM1_VAR_Y12"), tr("动模水阀1")).toString();
        outputVarName[EM1_VAR_Y13] = nameCfg.value(curLan + QString("EM1_VAR_Y13"), tr("动模水阀2")).toString();
        outputVarName[EM1_VAR_Y14] = nameCfg.value(curLan + QString("EM1_VAR_Y14"), tr("动模水阀3")).toString();
        outputVarName[EM1_VAR_Y15] = nameCfg.value(curLan + QString("EM1_VAR_Y15"), tr("动模水阀4")).toString();
        // 扩展模块2扩展输出
        outputVarName[EM2_VAR_Y00] = nameCfg.value(curLan + QString("EM2_VAR_Y00"), tr("定模水阀1")).toString();
        outputVarName[EM2_VAR_Y01] = nameCfg.value(curLan + QString("EM2_VAR_Y01"), tr("定模水阀2")).toString();
        outputVarName[EM2_VAR_Y02] = nameCfg.value(curLan + QString("EM2_VAR_Y02"), tr("定模水阀3")).toString();
        outputVarName[EM2_VAR_Y03] = nameCfg.value(curLan + QString("EM2_VAR_Y03"), tr("定模水阀4")).toString();
        outputVarName[EM2_VAR_Y04] = nameCfg.value(curLan + QString("EM2_VAR_Y04"), tr("输送带")).toString();
        outputVarName[EM2_VAR_Y05] = nameCfg.value(curLan + QString("EM2_VAR_Y05"), tr("备用")).toString();
        outputVarName[EM2_VAR_Y06] = nameCfg.value(curLan + QString("EM2_VAR_Y06"), tr("再循环启动")).toString();
        outputVarName[EM2_VAR_Y07] = nameCfg.value(curLan + QString("EM2_VAR_Y07"), tr("备用")).toString();
        outputVarName[EM2_VAR_Y08] = nameCfg.value(curLan + QString("EM2_VAR_Y08"), tr("备用")).toString();
        outputVarName[EM2_VAR_Y09] = nameCfg.value(curLan + QString("EM2_VAR_Y09"), tr("备用")).toString();
        outputVarName[EM2_VAR_Y10] = nameCfg.value(curLan + QString("EM2_VAR_Y10"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y11] = nameCfg.value(curLan + QString("EM2_VAR_Y11"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y12] = nameCfg.value(curLan + QString("EM2_VAR_Y12"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y13] = nameCfg.value(curLan + QString("EM2_VAR_Y13"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y14] = nameCfg.value(curLan + QString("EM2_VAR_Y14"), tr("EM2")).toString();
        outputVarName[EM2_VAR_Y15] = nameCfg.value(curLan + QString("EM2_VAR_Y15"), tr("EM2")).toString();
    }
    else
    {
        outputVarName[EM1_VAR_Y00] = nameCfg.value(curLan + QString("EM1_VAR_Y00"), tr("EM1")).toString();
        outputVarName[EM1_VAR_Y01] = nameCfg.value(curLan + QString("EM1_VAR_Y01"), tr("EM1")).toString();
        if ((CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_E0) || (CMBProtocol::GetSysTypeHigh() == BOARD_VERSION_H750_5AXIS) || (CMBProtocol::GetSysTypeHigh() == BOARD_VERSION_H750_DVS))
        {
            outputVarName[EM1_VAR_Y02] = nameCfg.value(curLan + QString("EM1_VAR_Y02"), "EM1").toString();
            outputVarName[EM1_VAR_Y03] = nameCfg.value(curLan + QString("EM1_VAR_Y03"), "EM1").toString();
            outputVarName[EM1_VAR_Y04] = nameCfg.value(curLan + QString("EM1_VAR_Y04"), "EM1").toString();
            outputVarName[EM1_VAR_Y05] = nameCfg.value(curLan + QString("EM1_VAR_Y05"), "EM1").toString();
            outputVarName[EM1_VAR_Y06] = nameCfg.value(curLan + QString("EM1_VAR_Y06"), "EM1").toString();
            outputVarName[EM1_VAR_Y07] = nameCfg.value(curLan + QString("EM1_VAR_Y07"), "EM1").toString();
        }
        else
        {
        outputVarName[EM1_VAR_Y02] = nameCfg.value(curLan + QString("EM1_VAR_Y02"), tr("吸具1")).toString();
        outputVarName[EM1_VAR_Y03] = nameCfg.value(curLan + QString("EM1_VAR_Y03"), tr("吸具2")).toString();
        outputVarName[EM1_VAR_Y04] = nameCfg.value(curLan + QString("EM1_VAR_Y04"), tr("抱具1")).toString();
        outputVarName[EM1_VAR_Y05] = nameCfg.value(curLan + QString("EM1_VAR_Y05"), tr("抱具2")).toString();
        outputVarName[EM1_VAR_Y06] = nameCfg.value(curLan + QString("EM1_VAR_Y06"), tr("抱具3")).toString();
        outputVarName[EM1_VAR_Y07] = nameCfg.value(curLan + QString("EM1_VAR_Y07"), tr("抱具4")).toString();
        }
#if (FACTORY == FA_SIMANER)
        outputVarName[EM1_VAR_Y08] = nameCfg.value(curLan + QString("EM1_VAR_Y08"), tr("副臂夹")).toString();
#else
        outputVarName[EM1_VAR_Y08] = nameCfg.value(curLan + QString("EM1_VAR_Y08"), "Y09").toString();
#endif
        outputVarName[EM1_VAR_Y09] = nameCfg.value(curLan + QString("EM1_VAR_Y09"), "Y10").toString();//?????
        outputVarName[EM1_VAR_Y10] = nameCfg.value(curLan + QString("EM1_VAR_Y10"), "Y11").toString();
        outputVarName[EM1_VAR_Y11] = nameCfg.value(curLan + QString("EM1_VAR_Y11"), "Y12").toString();
        outputVarName[EM1_VAR_Y12] = nameCfg.value(curLan + QString("EM1_VAR_Y12"), "Y13").toString();
        outputVarName[EM1_VAR_Y13] = nameCfg.value(curLan + QString("EM1_VAR_Y13"), "Y14").toString();
        outputVarName[EM1_VAR_Y14] = nameCfg.value(curLan + QString("EM1_VAR_Y14"), "Y15").toString();
        outputVarName[EM1_VAR_Y15] = nameCfg.value(curLan + QString("EM1_VAR_Y15"), "Y16").toString();
        // 扩展模块2扩展输出
        outputVarName[EM2_VAR_Y00] = nameCfg.value(curLan + QString("EM2_VAR_Y00"), "EM2").toString();
        outputVarName[EM2_VAR_Y01] = nameCfg.value(curLan + QString("EM2_VAR_Y01"), "EM2").toString();
        outputVarName[EM2_VAR_Y02] = nameCfg.value(curLan + QString("EM2_VAR_Y02"), "EM2").toString();
        outputVarName[EM2_VAR_Y03] = nameCfg.value(curLan + QString("EM2_VAR_Y03"), "EM2").toString();
        outputVarName[EM2_VAR_Y04] = nameCfg.value(curLan + QString("EM2_VAR_Y04"), "EM2").toString();
        outputVarName[EM2_VAR_Y05] = nameCfg.value(curLan + QString("EM2_VAR_Y05"), "EM2").toString();
        outputVarName[EM2_VAR_Y06] = nameCfg.value(curLan + QString("EM2_VAR_Y06"), "EM2").toString();
        outputVarName[EM2_VAR_Y07] = nameCfg.value(curLan + QString("EM2_VAR_Y07"), "EM2").toString();
        outputVarName[EM2_VAR_Y08] = nameCfg.value(curLan + QString("EM2_VAR_Y08"), "EM2").toString();
        outputVarName[EM2_VAR_Y09] = nameCfg.value(curLan + QString("EM2_VAR_Y09"), "EM2").toString();
        outputVarName[EM2_VAR_Y10] = nameCfg.value(curLan + QString("EM2_VAR_Y10"), "EM2").toString();
        outputVarName[EM2_VAR_Y11] = nameCfg.value(curLan + QString("EM2_VAR_Y11"), "EM2").toString();
        outputVarName[EM2_VAR_Y12] = nameCfg.value(curLan + QString("EM2_VAR_Y12"), "EM2").toString();
        outputVarName[EM2_VAR_Y13] = nameCfg.value(curLan + QString("EM2_VAR_Y13"), "EM2").toString();
        outputVarName[EM2_VAR_Y14] = nameCfg.value(curLan + QString("EM2_VAR_Y14"), "EM2").toString();
        outputVarName[EM2_VAR_Y15] = nameCfg.value(curLan + QString("EM2_VAR_Y15"), "EM2").toString();
    }
#endif
	// 扩展模块3扩展输出
    outputVarName[EM3_VAR_Y00] = nameCfg.value(curLan + QString("EM3_VAR_Y00"), "EM3").toString();
    outputVarName[EM3_VAR_Y01] = nameCfg.value(curLan + QString("EM3_VAR_Y01"), "EM3").toString();
    outputVarName[EM3_VAR_Y02] = nameCfg.value(curLan + QString("EM3_VAR_Y02"), "EM3").toString();
    outputVarName[EM3_VAR_Y03] = nameCfg.value(curLan + QString("EM3_VAR_Y03"), "EM3").toString();
    outputVarName[EM3_VAR_Y04] = nameCfg.value(curLan + QString("EM3_VAR_Y04"), "EM3").toString();
    outputVarName[EM3_VAR_Y05] = nameCfg.value(curLan + QString("EM3_VAR_Y05"), "EM3").toString();
    outputVarName[EM3_VAR_Y06] = nameCfg.value(curLan + QString("EM3_VAR_Y06"), "EM3").toString();
    outputVarName[EM3_VAR_Y07] = nameCfg.value(curLan + QString("EM3_VAR_Y07"), "EM3").toString();
    outputVarName[EM3_VAR_Y08] = nameCfg.value(curLan + QString("EM3_VAR_Y08"), "EM3").toString();
    outputVarName[EM3_VAR_Y09] = nameCfg.value(curLan + QString("EM3_VAR_Y09"), "EM3").toString();
    outputVarName[EM3_VAR_Y10] = nameCfg.value(curLan + QString("EM3_VAR_Y10"), "EM3").toString();
    outputVarName[EM3_VAR_Y11] = nameCfg.value(curLan + QString("EM3_VAR_Y11"), "EM3").toString();
    outputVarName[EM3_VAR_Y12] = nameCfg.value(curLan + QString("EM3_VAR_Y12"), "EM3").toString();
    outputVarName[EM3_VAR_Y13] = nameCfg.value(curLan + QString("EM3_VAR_Y13"), "EM3").toString();
    outputVarName[EM3_VAR_Y14] = nameCfg.value(curLan + QString("EM3_VAR_Y14"), "EM3").toString();
    outputVarName[EM3_VAR_Y15] = nameCfg.value(curLan + QString("EM3_VAR_Y15"), "EM3").toString();
	// 扩展模块4扩展输出
    outputVarName[EM4_VAR_Y00] = nameCfg.value(curLan + QString("EM4_VAR_Y00"), "EM4").toString();
    outputVarName[EM4_VAR_Y01] = nameCfg.value(curLan + QString("EM4_VAR_Y01"), "EM4").toString();
    outputVarName[EM4_VAR_Y02] = nameCfg.value(curLan + QString("EM4_VAR_Y02"), "EM4").toString();
    outputVarName[EM4_VAR_Y03] = nameCfg.value(curLan + QString("EM4_VAR_Y03"), "EM4").toString();
    if(CMBProtocol::GetSysTypeHigh() == BOARD_VERSION_H750_DVS)
    {
        outputVarName[EM4_VAR_Y04] = nameCfg.value(curLan + QString("EM4_VAR_Y04"), tr("传送带")).toString();
        outputVarName[EM4_VAR_Y05] = nameCfg.value(curLan + QString("EM4_VAR_Y05"), tr("剪刀")).toString();
    }
    else
    {
        outputVarName[EM4_VAR_Y04] = nameCfg.value(curLan + QString("EM4_VAR_Y04"), "EM4").toString();
        outputVarName[EM4_VAR_Y05] = nameCfg.value(curLan + QString("EM4_VAR_Y05"), "EM4").toString();
    }
    outputVarName[EM4_VAR_Y06] = nameCfg.value(curLan + QString("EM4_VAR_Y06"), "EM4").toString();
    outputVarName[EM4_VAR_Y07] = nameCfg.value(curLan + QString("EM4_VAR_Y07"), "EM4").toString();
    outputVarName[EM4_VAR_Y08] = nameCfg.value(curLan + QString("EM4_VAR_Y08"), "EM4").toString();
    outputVarName[EM4_VAR_Y09] = nameCfg.value(curLan + QString("EM4_VAR_Y09"), "EM4").toString();
    outputVarName[EM4_VAR_Y10] = nameCfg.value(curLan + QString("EM4_VAR_Y10"), "EM4").toString();
    outputVarName[EM4_VAR_Y11] = nameCfg.value(curLan + QString("EM4_VAR_Y11"), "EM4").toString();
    outputVarName[EM4_VAR_Y12] = nameCfg.value(curLan + QString("EM4_VAR_Y12"), "EM4").toString();
    outputVarName[EM4_VAR_Y13] = nameCfg.value(curLan + QString("EM4_VAR_Y13"), "EM4").toString();
    outputVarName[EM4_VAR_Y14] = nameCfg.value(curLan + QString("EM4_VAR_Y14"), "EM4").toString();
    outputVarName[EM4_VAR_Y15] = nameCfg.value(curLan + QString("EM4_VAR_Y15"), "EM4").toString();
	// 注塑机输出
#if FACTORY == FA_SINROBOT_JC
    outputVarName[IMM_VAR_OUT_EMC] = nameCfg.value(curLan + QString("IMM_VAR_OUT_EMC"), tr("EMC 加工启动", "翻译时无论什么语言一律使用(中文除外): IMM-EMC")).toString();
    outputVarName[IMM_VAR_OUT_EMO] = nameCfg.value(curLan + QString("IMM_VAR_OUT_EMO"), tr("EMO 加工完成", "翻译时无论什么语言一律使用(中文除外): IMM-EMO")).toString();
#elif FACTORY == FA_VICTOR_SPECIAL
    outputVarName[IMM_VAR_OUT_EMC] = nameCfg.value(curLan + QString("IMM_VAR_OUT_EMC"), tr("EMC 允许加工", "翻译时无论什么语言一律使用(中文除外): IMM-EMC")).toString();
    outputVarName[IMM_VAR_OUT_EMO] = nameCfg.value(curLan + QString("IMM_VAR_OUT_EMO"), tr("EMO 允许开模", "翻译时无论什么语言一律使用(中文除外): IMM-EMO")).toString();
#else
    outputVarName[IMM_VAR_OUT_EMC] = nameCfg.value(curLan + QString("IMM_VAR_OUT_EMC"), tr("EMC 允许关模", "翻译时无论什么语言一律使用(中文除外): IMM-EMC")).toString();
    outputVarName[IMM_VAR_OUT_EMO] = nameCfg.value(curLan + QString("IMM_VAR_OUT_EMO"), tr("EMO 允许开模", "翻译时无论什么语言一律使用(中文除外): IMM-EMO")).toString();
#endif
    outputVarName[IMM_VAR_OUT_MAF] = nameCfg.value(curLan + QString("IMM_VAR_OUT_MAF"), tr("MAF 模区安全", "翻译时无论什么语言一律使用(中文除外): IMM-MAF")).toString();
    outputVarName[IMM_VAR_OUT_RBT] = nameCfg.value(curLan + QString("IMM_VAR_OUT_RBT"), tr("机械手不使用", "翻译时无论什么语言一律使用(中文除外): IMM-RBT")).toString();
    outputVarName[IMM_VAR_OUT_EEB] = nameCfg.value(curLan + QString("IMM_VAR_OUT_EEB"), tr("EEB 允许顶针退", "翻译时无论什么语言一律使用(中文除外): IMM-EEB")).toString();
    outputVarName[IMM_VAR_OUT_EEF] = nameCfg.value(curLan + QString("IMM_VAR_OUT_EEF"), tr("EEF 允许顶针进", "翻译时无论什么语言一律使用(中文除外): IMM-EEF")).toString();
#if (FACTORY == FA_SHINI)
	{
		outputVarName[IMM_VAR_OUT_C1P1] = nameCfg.value(curLan + QString("IMM_VAR_OUT_C1P1"), tr("允许中子1进", "翻译时无论什么语言一律使用(中文除外): IMM-EC1P1")).toString();
		outputVarName[IMM_VAR_OUT_C1P2] = nameCfg.value(curLan + QString("IMM_VAR_OUT_C1P2"), tr("允许中子1退", "翻译时无论什么语言一律使用(中文除外): IMM-EC1P2")).toString();
		outputVarName[IMM_VAR_OUT_C2P1] = nameCfg.value(curLan + QString("IMM_VAR_OUT_C2P1"), tr("允许中子2进", "翻译时无论什么语言一律使用(中文除外): IMM-EC2P1")).toString();
		outputVarName[IMM_VAR_OUT_C2P2] = nameCfg.value(curLan + QString("IMM_VAR_OUT_C2P2"), tr("允许中子2退", "翻译时无论什么语言一律使用(中文除外): IMM-EC2P2")).toString();
	}
#else
	{
		outputVarName[IMM_VAR_OUT_C1P1] = nameCfg.value(curLan + QString("IMM_VAR_OUT_C1P1"), tr("允许抽芯1位1", "翻译时无论什么语言一律使用(中文除外): IMM-EC1P1")).toString();
		outputVarName[IMM_VAR_OUT_C1P2] = nameCfg.value(curLan + QString("IMM_VAR_OUT_C1P2"), tr("允许抽芯1位2", "翻译时无论什么语言一律使用(中文除外): IMM-EC1P2")).toString();
		outputVarName[IMM_VAR_OUT_C2P1] = nameCfg.value(curLan + QString("IMM_VAR_OUT_C2P1"), tr("允许抽芯2位1", "翻译时无论什么语言一律使用(中文除外): IMM-EC2P1")).toString();
		outputVarName[IMM_VAR_OUT_C2P2] = nameCfg.value(curLan + QString("IMM_VAR_OUT_C2P2"), tr("允许抽芯2位2", "翻译时无论什么语言一律使用(中文除外): IMM-EC2P2")).toString();
	}
#endif
    outputVarName[IMM_VAR_OUT_HMAF] = nameCfg.value(curLan + QString("IMM_VAR_OUT_HMAF"), tr("模区安全确认", "翻译时无论什么语言一律使用(中文除外): IMM-HMAF")).toString();
    outputVarName[IMM_VAR_OUT_HEMC] = nameCfg.value(curLan + QString("IMM_VAR_OUT_HEMC"), tr("允许关模确认", "翻译时无论什么语言一律使用(中文除外): IMM-HEMC")).toString();
	// 伺服系统输出
#if ((FACTORY == FA_KEWEI) || (FACTORY == FA_KEHAO) || (FACTORY == FA_WOERDA) || (FACTORY == FA_ZHENJIE))
    outputVarName[SV_VAR_OUT_YSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_YSON"), tr("取件Z1使能", "翻译时无论什么语言一律使用(中文除外): S-PAV.ON")).toString();
    outputVarName[SV_VAR_OUT_XSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_XSON"), tr("前后Y使能", "翻译时无论什么语言一律使用(中文除外): S-PAH.ON")).toString();
    outputVarName[SV_VAR_OUT_ZSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ZSON"), tr("横行X使能", "翻译时无论什么语言一律使用(中文除外): S-TRV.ON")).toString();
    outputVarName[SV_VAR_OUT_ASON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ASON"), tr("喷雾Z2使能", "翻译时无论什么语言一律使用(中文除外): S-RAV.ON")).toString();
    outputVarName[SV_VAR_OUT_BSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_BSON"), tr("保留使能", "翻译时无论什么语言一律使用(中文除外): S-RAH.ON")).toString();
    outputVarName[SV_VAR_OUT_CSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_CSON"), tr("扩展使能", "翻译时无论什么语言一律使用(中文除外): S-EXT.ON")).toString();
#elif (FACTORY == FA_YIDAO)
    outputVarName[SV_VAR_OUT_YSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_YSON"), tr("上下使能", "翻译时无论什么语言一律使用(中文除外): S-PAV.ON")).toString();
    outputVarName[SV_VAR_OUT_XSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_XSON"), tr("引拔使能", "翻译时无论什么语言一律使用(中文除外): S-PAH.ON")).toString();
    outputVarName[SV_VAR_OUT_ZSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ZSON"), tr("横行使能", "翻译时无论什么语言一律使用(中文除外): S-TRV.ON")).toString();
    outputVarName[SV_VAR_OUT_ASON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ASON"), tr("上下2使能", "翻译时无论什么语言一律使用(中文除外): S-RAV.ON")).toString();
    outputVarName[SV_VAR_OUT_BSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_BSON"), tr("引拔2使能", "翻译时无论什么语言一律使用(中文除外): S-RAH.ON")).toString();
    outputVarName[SV_VAR_OUT_CSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_CSON"), tr("扩展使能", "翻译时无论什么语言一律使用(中文除外): S-EXT.ON")).toString();
#else
    if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_YZ)
    {
        outputVarName[SV_VAR_OUT_YSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_YSON"), tr("取件Z1使能", "翻译时无论什么语言一律使用(中文除外): S-PAV.ON")).toString();
        outputVarName[SV_VAR_OUT_XSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_XSON"), tr("前后Y使能", "翻译时无论什么语言一律使用(中文除外): S-PAH.ON")).toString();
        outputVarName[SV_VAR_OUT_ZSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ZSON"), tr("横行X使能", "翻译时无论什么语言一律使用(中文除外): S-TRV.ON")).toString();
        outputVarName[SV_VAR_OUT_ASON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ASON"), tr("喷雾Z2使能", "翻译时无论什么语言一律使用(中文除外): S-RAV.ON")).toString();
        outputVarName[SV_VAR_OUT_BSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_BSON"), tr("保留使能", "翻译时无论什么语言一律使用(中文除外): S-RAH.ON")).toString();
        outputVarName[SV_VAR_OUT_CSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_CSON"), tr("扩展使能", "翻译时无论什么语言一律使用(中文除外): S-EXT.ON")).toString();
    }
    else
    {
        outputVarName[SV_VAR_OUT_YSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_YSON"), tr("正臂上下使能", "翻译时无论什么语言一律使用(中文除外): S-PAV.ON")).toString();
        outputVarName[SV_VAR_OUT_XSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_XSON"), tr("正臂引拔使能", "翻译时无论什么语言一律使用(中文除外): S-PAH.ON")).toString();
        outputVarName[SV_VAR_OUT_ZSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ZSON"), tr("横行使能", "翻译时无论什么语言一律使用(中文除外): S-TRV.ON")).toString();
        outputVarName[SV_VAR_OUT_ASON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ASON"), tr("副臂上下使能", "翻译时无论什么语言一律使用(中文除外): S-RAV.ON")).toString();
        outputVarName[SV_VAR_OUT_BSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_BSON"), tr("副臂引拔使能", "翻译时无论什么语言一律使用(中文除外): S-RAH.ON")).toString();
        outputVarName[SV_VAR_OUT_CSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_CSON"), tr("扩展使能", "翻译时无论什么语言一律使用(中文除外): S-EXT.ON")).toString();
    }
#endif
	// 机械手输出
    outputVarName[RBT_VAR_OUT_PRO_HOR] = nameCfg.value(curLan + QString("RBT_VAR_OUT_PRO_HOR"), tr("正臂倒平", "翻译时无论什么语言一律使用(中文除外): PA-O.HOR")).toString();
    outputVarName[RBT_VAR_OUT_PRO_VER] = nameCfg.value(curLan + QString("RBT_VAR_OUT_PRO_VER"), tr("正臂倒直", "翻译时无论什么语言一律使用(中文除外): PA-O.VER")).toString();
    outputVarName[RBT_VAR_OUT_RUN_HOR] = nameCfg.value(curLan + QString("RBT_VAR_OUT_RUN_HOR"), tr("副臂倒平", "翻译时无论什么语言一律使用(中文除外): RA-O.HOR")).toString();//-E1Y10
    outputVarName[RBT_VAR_OUT_RUN_VER] = nameCfg.value(curLan + QString("RBT_VAR_OUT_RUN_VER"), tr("副臂倒直", "翻译时无论什么语言一律使用(中文除外): RA-O.VER")).toString();//-E1Y11
    outputVarName[RBT_VAR_OUT_RUN_DES] = nameCfg.value(curLan + QString("RBT_VAR_OUT_RUN_DES"), tr("副臂下行", "翻译时无论什么语言一律使用(中文除外): RA-O.DES")).toString();
    outputVarName[RBT_VAR_OUT_RUN_SPEED] = nameCfg.value(curLan + QString("RBT_VAR_OUT_RUN_SPEED"), tr("副臂速度", "翻译时无论什么语言一律使用(中文除外): RA-O.SPD")).toString();
    outputVarName[RBT_VAR_OUT_ALM_BEEP] = nameCfg.value(curLan + QString("RBT_VAR_OUT_ALM_BEEP"), tr("报警器", "翻译时无论什么语言一律使用(中文除外): ALM-BEEP")).toString();
    outputVarName[RBT_VAR_OUT_ALM_LAMP] = nameCfg.value(curLan + QString("RBT_VAR_OUT_ALM_LAMP"), tr("报警灯", "翻译时无论什么语言一律使用(中文除外): ALM-LAMP")).toString();
    outputVarName[RBT_VAR_OUT_LAMP] = nameCfg.value(curLan + QString("RBT_VAR_OUT_LAMP"), tr("系统运行指示", "翻译时无论什么语言一律使用(中文除外): SYS-ACTIVE")).toString();
    outputVarName[RBT_VAR_OUT_PRO_ADV] = nameCfg.value(curLan + QString("RBT_VAR_OUT_PRO_ADV"), tr("正臂前进", "翻译时无论什么语言一律使用(中文除外): PA-O.ADV")).toString();
    outputVarName[RBT_VAR_OUT_PRO_RET] = nameCfg.value(curLan + QString("RBT_VAR_OUT_PRO_RET"), tr("正臂后退", "翻译时无论什么语言一律使用(中文除外): PA-O.RET")).toString();
    outputVarName[RBT_VAR_OUT_RUN_ADV] = nameCfg.value(curLan + QString("RBT_VAR_OUT_RUN_ADV"), tr("副臂前进", "翻译时无论什么语言一律使用(中文除外): RA-O.ADV")).toString();
#if (FACTORY == FA_KAIBOER)
    outputVarName[RBT_VAR_OUT_RUN_RET] = nameCfg.value(curLan + QString("RBT_VAR_OUT_RUN_RET"), tr("副臂前进", "翻译时无论什么语言一律使用(中文除外): RA-O.RET")).toString();
#else
    outputVarName[RBT_VAR_OUT_RUN_RET] = nameCfg.value(curLan + QString("RBT_VAR_OUT_RUN_RET"), tr("副臂后退", "翻译时无论什么语言一律使用(中文除外): RA-O.RET")).toString();
#endif
    outputVarName[RBT_VAR_OUT_OIL] = nameCfg.value(curLan + QString("RBT_VAR_OUT_OIL"), tr("打油", "翻译时无论什么语言一律使用(中文除外): OIL")).toString();
	outputVarName[OUT_VAR_CONV] = nameCfg.value(curLan + QString("OUT_VAR_CONV"), tr("传送带", "翻译时无论什么语言一律使用(中文除外): CONV")).toString();
	outputVarName[OUT_VAR_CUT] = nameCfg.value(curLan + QString("OUT_VAR_CUT"), tr("剪刀", "翻译时无论什么语言一律使用(中文除外): CUT")).toString();

}

void xStringResource::initLogString(void)
{
	logString.clear();
	logString
		// LOG_NOR_START			0		操作器软件启动完成
		<< tr("操作器软件启动完成。")
		// LOG_NOR_SRVHOME			1		手动控制机械手开始复归操作
		<< tr("手动控制机械手开始复归操作。")
		// LOG_NOR_PGMLOAD			2		载入当前程序
		<< tr("载入当前程序：")
		// LOG_NOR_PGMNEW			3		创建新程序文件
		<< tr("创建新程序文件：")
		// LOG_NOR_PGMRENAME		4		重命名程序文件
		<< tr("重命名程序文件：")
		// LOG_NOR_PGMCOPY			5		复制程序文件
		<< tr("复制程序文件：")
		// LOG_NOR_PGMDEL			6		删除程序文件
		<< tr("删除程序文件：")
		// LOG_NOR_PGMEXPORT		7		导出程序文件到USB存储器
		<< tr("导出程序文件到USB存储器：")
		// LOG_NOR_PGMIMPORT		8		从USB存储器导入程序文件
		<< tr("从USB存储器导入程序文件：")
		// LOG_NOR_OPRLOG			9		登录操作员
		<< tr("登录用户：操作员")
		// LOG_NOR_ADVOPRLOG		10		登录高级操作员
		<< tr("登录用户：高级操作员")
		// LOG_NOR_ADMLOG			11		登录管理员
		<< tr("登录用户：管理员")
		// LOG_NOR_ADVADMLOG		12		登录高级管理员
		<< tr("登录用户：高级管理员")
		// LOG_NOR_SULOG			13		登录超级用户
		<< tr("登录用户：超级用户")
        // LOG_NOR_LOGOUT			14		注销当前用户，以操作员登录
		<< tr("注销当前用户，以操作员登录。")
		// LOG_NOR_ADVOPRPWD		15		修改高级操作员密码
		<< tr("修改高级操作员密码。")
		// LOG_NOR_ADMPWD			16		修改管理员密码
		<< tr("修改管理员密码。")
		// LOG_TIME_CHG				17		修改系统时间
		<< tr("修改系统时间：")
		// LOG_WAIT2MANUL			18		系统从自动待机进入手动操作
		<< tr("系统从自动待机进入手动操作。")
		// LOG_RUN2WAIT				19		系统停止自动运行，进入自动待机状态
		<< tr("系统停止自动运行，进入自动待机状态。")
		// LOG_PERIOD2WAIT			20		系统停止单周期运行，进入自动待机状态
		<< tr("系统停止单周期运行，进入自动待机状态。")
		// LOG_STEP2WAIT			21		系统停止单步运行，进入自动待机状态
		<< tr("系统停止单步运行，进入自动待机状态。")
		// LOG_MANUL2AUTO			22		系统从手动操作进入自动待机
		<< tr("系统从手动操作进入自动待机。")
		// LOG_WAIT2RUN				23		系统从自动待机进入自动运行
		<< tr("系统从自动待机进入自动运行。")
		// LOG_WAIT2PERIOD			24		执行程序单周期运行
		<< tr("执行程序单周期运行。")
		// LOG_WAIT2STEP			25		执行程序单步运行
		<< tr("执行程序单步运行。")
		// LOG_PAR_SYS				26		修改系统参数
		<< tr("修改系统参数。")
		// LOG_PAR_SRV				27		修改伺服参数
		<< tr("修改伺服参数。")
		// LOG_PAR_UI				28		修改操作器界面设置
		<< tr("修改操作器界面设置。")
        // LOG_ADJ_PHORCHG			29
        << tr("伺服调位操作：") + GetServoName(AXIS_IDX_PHOR) + tr("轴位置改变。")
        // LOG_ADJ_PVERCHG			30
        << tr("伺服调位操作：") + GetServoName(AXIS_IDX_PVER) + tr("轴位置改变。")
        // LOG_ADJ_TRVCHG			31
        << tr("伺服调位操作：") + GetServoName(AXIS_IDX_TRV) + tr("轴位置改变。")
        // LOG_ADJ_RHORCHG			32
        << tr("伺服调位操作：") + GetServoName(AXIS_IDX_RHOR) + tr("轴位置改变。")
        // LOG_ADJ_RVERCHG			33
        << tr("伺服调位操作：") + GetServoName(AXIS_IDX_RVER) + tr("轴位置改变。")
        // LOG_ADJ_EXTCHG			34
        << tr("伺服调位操作：") + GetServoName(AXIS_IDX_EXT) + tr("轴位置改变。")
        // LOG_LD_SPLASH			35		导入开机画面：
		<< tr("导入开机画面：")
        // LOG_LD_WPAPER			36		导入待机画面：
		<< tr("导入待机画面：")
        // LOG_LD_INFOR				37		导入厂商信息：
		<< tr("导入厂商信息：")
        // LOG_LD_PORTNAME			38		导入端口名称定义：
		<< tr("导入端口名称定义：")
        // LOG_RST_PORTNAME			39		重置端口名称为出厂默认值
		<< tr("重置端口名称为出厂默认值。")
        // LOG_UPDATE				40		升级操作器软件：
		<< tr("升级操作器软件：")
        // LOG_RESTORE				41		恢复备份的操作器软件
		<< tr("恢复备份的操作器软件。")
        // LOG_RESTART				42		操作器软件重新启动
		<< tr("操作器软件重新启动。")
        // LOG_PAR_EXPORT			43		导出系统参数和伺服参数设置
		<< tr("导出系统参数和伺服参数设置。")
        // LOG_PAR_IMPORT			44		导入系统参数和伺服参数设置
		<< tr("导入系统参数和伺服参数设置。")
        // LOG_MANUL_ROTVER			45		手动控制正臂倒角垂直
		<< tr("手动控制正臂倒角垂直。")
        // LOG_MANUL_ROTHOR			46		手动控制正臂倒角水平
		<< tr("手动控制正臂倒角水平。")
        // LOG_MANUL_IMMEMO			47		手动控制注塑机允许开模
		<< tr("手动控制注塑机允许开模。")
        // LOG_MANUL_IMMEMC			48		手动控制注塑机允许关模
		<< tr("手动控制注塑机允许关模。")
        // LOG_MANUL_IMMEEF			49		手动控制注塑机允许顶针前进
		<< tr("手动控制注塑机允许顶针前进。")
        // LOG_MANUL_IMMEEB			50		手动控制注塑机允许顶针后退
		<< tr("手动控制注塑机允许顶针后退。")
        // LOG_MANUL_IMMC1P1		51		手动控制注塑机允许抽芯1位置1
		<< tr("手动控制注塑机允许抽芯1位置1。")
        // LOG_MANUL_IMMC1P2		52		手动控制注塑机允许抽芯1位置2
		<< tr("手动控制注塑机允许抽芯1位置2。")
        // LOG_MANUL_IMMC2P1		53		手动控制注塑机允许抽芯2位置1
		<< tr("手动控制注塑机允许抽芯2位置1。")
        // LOG_MANUL_IMMC2P2		54		手动控制注塑机允许抽芯2位置2
		<< tr("手动控制注塑机允许抽芯2位置2。")
        // LOG_MANUL_EOUTON			55		手动控制扩展输出打开：
		<< tr("手动控制扩展输出打开：")
        // LOG_MANUL_EOUTOFF		56		手动控制扩展输出关闭：
		<< tr("手动控制扩展输出关闭：")
        // LOG_MANUL_SRVCTRL		57		手动控制伺服停止运转
		<< tr("手动控制伺服运转。\n")           
        // LOG_MANUL_IMMEEF_OFF			58
        << tr("手动控制关闭注塑机顶针进")
        // LOG_MANUL_IMMEEB_OFF			59
        << tr("手动控制关闭注塑机顶针退")
        // LOG_MANUL_IMMC1P1_OFF		60
        << tr("手动控制关闭注塑机抽芯1位置1。")
        // LOG_MANUL_IMMC1P2_OFF		61
        << tr("手动控制关闭注塑机抽芯1位置2。")
        // LOG_MANUL_IMMC2P1_OFF		62
        << tr("手动控制关闭注塑机抽芯2位置1。")
        // LOG_MANUL_IMMC2P2_OFF		63
        << tr("手动控制关闭注塑机抽芯2位置2。")
        // LOG_MANUL_RASC		64
        << tr("手动控制气动副臂上升：")
        // LOG_MANUL_RDES               65
        << tr("手动控制气动副臂下降：")
        // LOG_MANUL_RADV               66
        << tr("手动控制气动副臂引进：")
        // LOG_MANUL_RRET               67
        << tr("手动控制气动副臂引退：")
		// LOG_TEACH_SAVE			68		保存教导程序
		<< tr("保存教导程序。")
		// LOG_RESET_SYSPAR			69		重置系统参数设置
		<< tr("重置系统参数设置。")
		// LOG_RESET_SRVPAR			70		重置伺服参数设置
		<< tr("重置伺服参数设置。")
		// LOG_RESET_PWD			71		重置系统密码设置
		<< tr("重置系统密码设置。")
		// LOG_CLEAR_SUM			72		清除生产总模数
        << tr("清除生产总模数。")
		// LOG_PRODUCT_ID			73
        << tr("产品密钥改变。")
	   // LOG_ACTIVATION			74
        << tr("激活码改变。")
		// LOG_CLEAR_ALARM			75
        << tr("报警复位。")
        // LOG_SET_ABS_HOME           76
        << tr("设置绝对值编码器原点。")
        // LOG_CLR_ABS_HOME           77
        << tr("清除绝对值编码器原点。")
        // LOG_MANUL_VACUUMON         78
        << tr("手动控制冶具组打开。")
        // LOG_MANUL_VACUUMOFF        79
        << tr("手动控制冶具组关闭。");
}

void xStringResource::initECatERRRes()
{
    EtherCATErrorName.clear();
    EtherCATErrorName[HARDWARE_OVER_CURRENT] = tr("总线驱动器：0x2214 过流");
    EtherCATErrorName[IPM_SHORT_CIRCUIT] = tr("总线驱动器：0x2250 IPM模块短路");
    EtherCATErrorName[MOTOR_FOLDBACK] = tr("总线驱动器：0x2310 电机FOLDBACK");//?????
    EtherCATErrorName[DRIVE_FOLDBACK] = tr("总线驱动器：0x2311 驱动器FOLDBACK");//?????
    EtherCATErrorName[UVW_SHORT_CIRCUIT] = tr("总线驱动器：0x2330 动力线对地短路");
    EtherCATErrorName[CURRENT_SENSORS_OFFSET_INVALID] = tr("总线驱动器：0x2380 电流传感器偏移无效");
    EtherCATErrorName[OUTPUT_OVER_CURRENT] = tr("总线驱动器：0x2382 数字输出过电流");
    EtherCATErrorName[OVER_VOLTAGE] = tr("总线驱动器：0x3110 过电压");
    EtherCATErrorName[UNDER_VOLTAGE] = tr("总线驱动器：0x3120 低电压");
    EtherCATErrorName[BUS_AC_LINE_DISCONNECT] = tr("总线驱动器：0x3183 交流母线断开");
    EtherCATErrorName[REGENERATION_FAULT] = tr("总线驱动器：0x3199 再生电阻故障");
    EtherCATErrorName[INTEGRATED_POWER_MODULE] = tr("总线驱动器：0x4080 集成电源模块故障"); //?????
    EtherCATErrorName[OVER_TEMPERATURE] = tr("总线驱动器：0x4310 电源过温");
    EtherCATErrorName[POWER_EEPROM_FAULT] = tr("总线驱动器：0x5530 电源EEPROM故障");
    EtherCATErrorName[CONTROL_EEPROM_FAULT] = tr("总线驱动器：0x5581 控制EEPROM故障");
    EtherCATErrorName[EEPROM_VERSION_ERROR] = tr("总线驱动器：0x5585 EEPROM版本错误");
    EtherCATErrorName[FAILURE_WRITING_FLASH] = tr("总线驱动器：0x5586 写到闪存失败");
    EtherCATErrorName[HOMING_ERROR] = tr("总线驱动器：0x6100 回原错误");
    EtherCATErrorName[POWER_ON_TIME_OUT] = tr("总线驱动器：0x6320 电源开启超时");
    EtherCATErrorName[NOT_CONFIGURED] = tr("总线驱动器：0x6381 无配置");
    EtherCATErrorName[FPGA_CONFIG_FAILED] = tr("总线驱动器：0x6581 FPGA配置失败");
    EtherCATErrorName[FPGA_VERSION_MISMATCH] = tr("总线驱动器：0x7090 FPGA版本不匹配");
    EtherCATErrorName[EMERGENCY_STOP] = tr("总线驱动器：0x7091 急停");
    EtherCATErrorName[STALL_FAULT] = tr("总线驱动器：0x7121 失速故障");
    EtherCATErrorName[ENCODER_COUNTER_OVERFLOW] = tr("总线驱动器：0x7305 编码器多圈计数器溢出");
    EtherCATErrorName[FEEDBACK_COMMUNICATION_ERROR] = tr("总线驱动器：0x7380 编码器反馈通信错误");
    EtherCATErrorName[TAMAGAWA_INIT_FAILED] = tr("总线驱动器：0x7382 Tamagawa初始化失败");
    EtherCATErrorName[ABSOLUTE_ENCODER_BATTERY] = tr("总线驱动器：0x7385 编码器电池故障");
    EtherCATErrorName[TAMAGAWA_ABS_OPERATIONAL_FAULT] = tr("总线驱动器：0x7388 Tamagawa Abs操作失误");
    EtherCATErrorName[ENCODER_FAULT] = tr("总线驱动器：0x738D 编码器故障");
    EtherCATErrorName[FIELDBUS_CABLE_DISCONNECTED] = tr("总线驱动器：0x7580 现场总线电缆断开");
    EtherCATErrorName[ETHERCAT_PACKET_LOSS] = tr("总线驱动器：0x818D EtherCAT丢包");
    EtherCATErrorName[VELOCITY_OVER_SPEED_EXCEEDED] = tr("总线驱动器：0x8481 超速");
    EtherCATErrorName[EXCEEDED_MAXIMUM_VELOCITY_ERROR] = tr("总线驱动器：0x8482 超过最大速度");
    EtherCATErrorName[EXCESSIVE_PE_VALUE] = tr("总线驱动器：0x8689 PE值过高");
    EtherCATErrorName[ETHERCAT_STATE_NOT_OPERATIONAL] = tr("总线驱动器：0xF080 EtherCAT无法运行");
    EtherCATErrorName[MOTOR_PLATE_READ_FAILED] = tr("总线驱动器：0xFF02 电机板读取失败");
    EtherCATErrorName[REALTIME_OVERLOAD_FAULT] = tr("总线驱动器：0xFF04 实时过载故障");
    EtherCATErrorName[MOTOR_MTP_DATA_NOT_COMPATIBLE] = tr("总线驱动器：0xFF14 MOTO RNAME和MTP数据不兼容");

}

void xStringResource::initDvsERRRes()
{
    DvsErrorName.clear();
    DvsErrorName
    << tr("[000]")
    << tr("[001] 驱动器：超速【伺服电机速度超过设定值】")
    << tr("[002] 驱动器：主电路过压【主电路电源电压过高】")
    << tr("[003] 驱动器：主电路过压【主电路电源电压过低】")
    << tr("[004] 驱动器：位置超差【位置偏差计数器的数值超过设定值】")
    << tr("[005] 驱动器：驱动器过热【驱动器温度过高】")
    << tr("[006] 驱动器：速度放大器饱和故障【驱动器温度过高】")
    << tr("[007] 驱动器：驱动禁止异常【CCW/CW 驱动禁止输入都 OFF】")
    << tr("[008] 驱动器：位置偏差计数器溢出【位置偏差计数值的绝对值超过极限值】")
    << tr("[009] 驱动器：")
    << tr("[010] 驱动器：")
    << tr("[011] 驱动器：IPM 模块故障【IPM 智能模块故障】")
    << tr("[012] 驱动器：")
    << tr("[013] 驱动器：驱动器过负载【伺服驱动器及电机过负载(瞬时过热)】")
    << tr("[014] 驱动器：制动故障【制动电路故障】")
    << tr("[015] 驱动器：")
    << tr("[016] 驱动器：")
    << tr("[017] 驱动器：")
    << tr("[018] 驱动器：继电器开关故障【继电器实际状态跟控制状态不一致】")
    << tr("[019] 驱动器：抱闸延时错误【抱闸未打开时有脉冲输入】")
    << tr("[020] 驱动器：EEPROM 错误【EEPROM 错误】")
    << tr("[021] 驱动器：FPGA 模块故障【FPGA 模块功能异常】")
    << tr("[022] 驱动器：")
    << tr("[023] 驱动器：电流采集电路故障【电流采集电路故障】")
    << tr("[024] 驱动器：")
    << tr("[025] 驱动器：")
    << tr("[026] 驱动器：")
    << tr("[027] 驱动器：")
    << tr("[028] 驱动器：")
    << tr("[029] 驱动器：电流采集电路故障【电机负载超过用户设定的数值和持续时间】")
    << tr("[030] 驱动器：")
    << tr("[031] 驱动器：")
    << tr("[032] 驱动器：")
    << tr("[033] 驱动器：")
    << tr("[034] 驱动器：")
    << tr("[035] 驱动器：")
    << tr("[036] 驱动器：")
    << tr("[037] 驱动器：")
    << tr("[038] 驱动器：读写编码器 EEPROM通信失败【编码器线没接好或编码器接口电路故障】")
    << tr("[039] 驱动器：数据 CRC 校验错误【电机编码器尚未写入数据，都是 0】")
    << tr("[040] 驱动器：不支持机型【驱动器不支持此电机型号】")
    << tr("[041] 驱动器：需要切换电机型号【当前电机跟驱动已选的型号不一致。】")
    << tr("[042] 驱动器：AC 输入电压过低【AC 输入电压过低】")
    << tr("[043] 驱动器：")
    << tr("[044] 驱动器：")
    << tr("[045] 驱动器：")
    << tr("[046] 驱动器：")
    << tr("[047] 驱动器：上电时主电路电压过高【上电时主电路电压过高】")
    << tr("[048] 驱动器：")
    << tr("[049] 驱动器：")
    << tr("[050] 驱动器：编码器通信故障【驱动器跟编码器未建立通信连接】")
    << tr("[051] 驱动器：编码器通信异常【编码器建立通信后，出现中断，断开连接】")
    << tr("[052] 驱动器：编码器电池电压不足报警【编码器电池电压不足报警，信息未丢但需尽快更换】")
    << tr("[053] 驱动器：编码器电池电压错误报警【编码器电池电压错误报警，储存信息已发生错误，需复位编码器】")
    << tr("[054] 驱动器：编码器错误报警【编码器非电池类报警，但需要重新复位编码器】")
    << tr("[055] 驱动器：CRC 校验连续 3 次出错【编码器通信收到的数据 CRC 效验连续 3 次出现错误】")
    << tr("[056] 驱动器：MODBUS 帧过长错误【接收到的 MODBUS 帧数据过长】")
    << tr("[057] 驱动器：MODBUS 通讯格式错误【通讯参数设定不当或地址或数值不正确】")
    << tr("[058] 驱动器：单圈位置值错误【驱动器存储的单圈位置偏移值超出编码器分辨率】")
    << tr("[059] 驱动器：编码器上报 CF 错误【编码器连续上报 CF 域错误，需要复位编码器】");
}

void xStringResource::initHCFAERRRes()
{
    HCFAErrorName.clear();
    HCFAErrorName
    << tr("[000]")
    << tr("[001]系统参数异常")
    << tr("[002]产品型号选择故障")
    << tr("[003]参数存储中故障")
    << tr("[004]FPGA 故障")
    << tr("[005]产品匹配故障")
    << tr("[006]程序异常")
    << tr("[007]编码器初始化失败")
    << tr("[008]对地短路检测故障")
    << tr("[009]过流故障 A  ")
    << tr("[010]过流故障 B ")
    << tr("[011]")
    << tr("[012]增量光电编码器 Z 断线或者绝对值编码器圈数异常")
    << tr("[013]编码器通信异常")
    << tr("[014]编码器数据异常")
    << tr("[015]编码器电池电压过低异常")
    << tr("[016]速度偏差过大")
    << tr("[017]转矩饱和超时")
    << tr("[018]控制电欠压")
    << tr("[019]飞车故障")
    << tr("[020]过电压")
    << tr("[021]欠电压")
    << tr("[022]电流采样故障")
    << tr("[023]AI 采样电压过大")
    << tr("[024]过速")
    << tr("[025]电角度辨识失败")
    << tr("[026]惯量辨识失败故障")
    << tr("[027]DI 端子参数设置故障")
    << tr("[028]DO 端子参数设置故障  ")
    << tr("[029]")
    << tr("[030]")
    << tr("[031]")
    << tr("[032]")
    << tr("[033]")
    << tr("[034]")
    << tr("[035]")
    << tr("[036]")
    << tr("[037]")
    << tr("[038]")
    << tr("[039]")
    << tr("[040]伺服 ON 指令无效故障 ")
    << tr("[041]")
    << tr("[042]分频脉冲输出过速")
    << tr("[043]位置偏差过大故障")
    << tr("[044]主回路输入缺相")
    << tr("[045]驱动器输出缺相")
    << tr("[046]驱动器过载")
    << tr("[047]电机过载")
    << tr("[048]电子齿轮设定错误")
    << tr("[049]散热器过热")
    << tr("[050]脉冲输入异常")
    << tr("[051]全闭环位置偏差过大")
    << tr("[052]")
    << tr("[053]")
    << tr("[054]用户强制故障")
    << tr("[055]绝对位置复位故障")
    << tr("[056]主电源断电")
    << tr("[057]")
    << tr("[058]")
    << tr("[059]")
    << tr("[060]写入定制版程序后第一次启动")
    << tr("[061]")
    << tr("[062]")
    << tr("[063]")
    << tr("[064]")
    << tr("[065]CAN 总线关闭 ")
    << tr("[066]异常的 NMT 命令 ")
    << tr("[067]CAN 总线故障")
    << tr("[068]")
    << tr("[069]")
    << tr("[070]")
    << tr("[071]节点保护或者心跳超时")
    << tr("[072]同步失效")
    << tr("[073]CANOpen 轨迹缓冲区下溢")
    << tr("[074]CANOpen 轨迹缓冲区上溢")
    << tr("[075]从站初始化失败")
    << tr("[076]同步失败")
    << tr("[077]EtherCAT 通讯中断")
    << tr("[078]指令给定异常")
    << tr("[079]使能时无控制模式")
    << tr("[080]欠电压警告")
    << tr("[081]驱动器过载警告")
    << tr("[082]电机过载警告")
    << tr("[083]需要重新接通电源的参数变更")
    << tr("[084]伺服未准备好")
    << tr("[085]写 E2PROM 频繁操作警告 ")
    << tr("[086]正向超程警告提示")
    << tr("[087]负向超程警告提示")
    << tr("[088]位置指令过速")
    << tr("[089]")
    << tr("[090]绝对值编码器角度初始化警告")
    << tr("[091]")
    << tr("[092]")
    << tr("[093]能耗制动过载")
    << tr("[094]外接再生泄放电阻过小")
    << tr("[095]紧急停止")
    << tr("[096]原点回归错误")
    << tr("[097]编码器电池欠压")
    << tr("[098]")
    << tr("[099]限位对齐警告");
}

void xStringResource::retranslateRes(quint8 lan)
{
	// 初始化系统类型字符串资源
	initSysTypeRes();
	// 初始化系统通用字符串资源
	initStringRes();
    // 初始化系统报警字符串资源
    initAlarmRes();
    // 初始化系统报警说明字符串资源
    initAlarmSolutionRes();
    // 初始化IO变量名字符串资源
	initIoVarRes(lan);
	// 初始化日志记录字符串资源
	initLogString();
    // 初始化总线错误内容字符串资源
    initECatERRRes();
    // 初始化DVS总线错误内容字符串资源
    initDvsERRRes();
    // 初始化禾川驱控一体错误内容字符串资源
    initHCFAERRRes();
}

const QString xStringResource::GetString(int idx)
{
	if (idx >= StringResource.count())
		return StringResource.at(STRRES_NO_STRING);
	return StringResource.at(idx);
}

const QString xStringResource::GetAlarm(quint32 idx)
{
    quint16 almCode;
    if ((idx & 0xFFFF0000) == ECAT_BUS_DRIVER_ALARM_FLAG)
    {
        idx = (idx & 0xffff);
        if(idx == STRRES_NO_STRING)
            return AlarmResource.at(STRRES_NO_STRING) + QString::number(idx);
        return GetEtherCATErrorName(idx);
    }
    if ((idx & 0xFFFF0000) == DVS_BUS_DRIVER_ALARM_FLAG)
    {
        idx = (idx & 0xffff);
        if ((quint16)idx >= DvsErrorName.count())
            return tr("未知的驱动器报警")+ QString::number(idx);
        return DvsErrorName.at(idx);
    }
    if ((idx & 0xFFFF0000) == ALARM_HIGH16_FLAG)
    {
        idx = (idx & 0xffff);
        if ((quint16)idx >= HCFAErrorName.count())
            return tr("未知的驱动器报警")+ QString::number(idx);
        return HCFAErrorName.at(idx);
    }
    if (GET_ALM_TYPE(idx) == 0)
    {
        // 普通报警
        almCode = GET_ALM_NCODE(idx);
        if (almCode >= AlarmResource.count())
            return StringResource.at(STRRES_NO_STRING);
        return AlarmResource.at(almCode);
    }
    else
    {
        // 变量报警
        almCode = GET_ALM_VCODE(idx);
        QString almStr = GetVarName(almCode);
        quint16 type = GET_VAR_TYPE(almCode);
        if (type == VAR_TYPE_USR)
            // 用户变量
            return almStr.append(tr("：在设定的时间内，检测不到规定的用户变量条件。"));
        else if (type == VAR_TYPE_SYS)
            // 系统变量
            return almStr.append(tr("：在设定的时间内，检测不到规定的系统变量条件。"));
        else if (type == VAR_TYPE_IN)
            // 输入变量
            return almStr.append(tr("：在设定的时间内，检测不到规定的输入变量状态。"));
        else if (type == VAR_TYPE_OUT)
            // 输出变量
            return almStr.append(tr("：在设定的时间内，检测不到规定的输出变量状态。"));
        else
            return almStr;
    }
}
const QString xStringResource::GetAlarmSolution(quint16 idx)
{
    quint16 almCode;
    // 普通报警
    almCode = GET_ALM_NCODE(idx);
    if (almCode >= AlarmSolutionResource.count())
        return StringResource.at(STRRES_NO_STRING);
    return AlarmSolutionResource.at(almCode);
}

const QString xStringResource::GetType(quint8 id)
{
	if (sysType.contains(id) == false)
		return QString("");
	return sysType[id];
}

const QString xStringResource::GetVarName(quint16 var)
{
	quint16 type, value;
	if (var == NUL_VAR_XXX || var == NUL_VAR_YXX)
		return QString("");
	type = GET_VAR_TYPE(var);
	value = GET_VAR_VALUE(var);
	if (type == VAR_TYPE_USR)
    {
        // 用户变量
        if (value > MAX_USER_VAR)
            return QString("Counter-%1").arg(value);
        else if ((value > 399) && (value < 500))
            return QString("V-%1").arg(value);
        else
            return QString("User-%1").arg(value);
    }
	else if (type == VAR_TYPE_SYS)
		// 系统变量
		return QString("S-%1").arg(value);
	else if (type == VAR_TYPE_IN)
	{
		// 输入变量
		if (inputVarName.contains(var) == false)
			return QString("");
        return inputVarName[var] + xIoPort::GetInSuffix(var);
	}
	else if (type == VAR_TYPE_OUT)
	{
		// 输出变量
		if (outputVarName.contains(var) == false)
			return QString("");
        return outputVarName[var] + xIoPort::GetOutSuffix(var);
	}
	else
		return QString("");
}
const QString xStringResource::GetUserVarName(quint16 var)
{
    quint16 type, value;
    if (var == NUL_VAR_XXX || var == NUL_VAR_YXX)
        return QString("");
    type = GET_VAR_TYPE(var);
    value = GET_VAR_VALUE(var);
    if (type == VAR_TYPE_USR)
    {
        if ((value > MAX_USER_VAR) || (value < 400))
        // 用户变量
            return QString(tr("无"));
        return QString("V-%1").arg(value);
    }
    else
        return QString(tr("无"));
}

const QString xStringResource::GetUsrName(quint8 user)
{
	if (user == xPermissions::AdvOperater)
		return QString(tr("高级操作员"));
	else if (user == xPermissions::Administrator)
		return QString(tr("管理员"));
	else if (user == xPermissions::AdvAdministrator)
		return QString(tr("高级管理员"));
	else if (user == xPermissions::SuperUser)
		return QString(tr("超级用户"));
	else
		return QString(tr("操作员"));
}

const QString xStringResource::GetLogString(quint16 value)
{
	if (value >= logString.count())
		return QString("");
	return logString.at(value);
}
const QString xStringResource::GetSysStateString(quint8 value)
{
	QString sys, run, runtype;
	switch ((value>>3)&3)
	{
	case SYS_STATE_MANUAL:
		sys = tr("手动");
		break;
	case SYS_STATE_AUTO:
		sys = tr("自动");
		break;
	default:
		sys = tr("错误");
		break;
	}
	if ((value>>2)&1)
		run = tr("运行");
	else
		run = tr("停止");

	switch (value&3)
	{
	case RUN_TYPE_LOOP:
		runtype = tr("(循环)");
		break;
	case RUN_TYPE_STEP:
		runtype = tr("(单步)");
		break;
	default:
		runtype = tr("(单周期)");
		break;
	}
	return sys+run+runtype;
}

const QString xStringResource::GetModifyPortName(quint16 var)
{
    quint16 type, value;
    quint8 lan = CMBProtocol::GetLanguage();
    if (var == NUL_VAR_XXX || var == NUL_VAR_YXX)
        return QString("");
    type = GET_VAR_TYPE(var);
    value = GET_VAR_VALUE(var);
    ReadModifyPortName(lan);
    if (type == VAR_TYPE_IN)
    {
        // 输入变量
        if (inputModifyVarName.contains(var) == false)
            return QString("");
        return inputModifyVarName[var];
    }
    else if (type == VAR_TYPE_OUT)
    {
        // 输出变量
        if (outputModifyVarName.contains(var) == false)
            return QString("");
        return outputModifyVarName[var];
    }
    else
        return QString("");
}

const QString xStringResource::GetEtherCATErrorName(quint16 var)
{
    return EtherCATErrorName[var];
}
void xStringResource::ReadModifyPortName(quint8 lan)
{
    QString curLan;
    curLan.clear();
    switch (lan)
    {
    case LAN_ENGLISH:
        curLan.append("english/");
        break;
    default:
        curLan.append("chineses/");
        break;
    }

    QSettings nameCfg(XPAD_IO_NAME, QSettings::IniFormat);
    nameCfg.setIniCodec("UTF-8");
    // *************************************************
    // 输入变量名称
    inputModifyVarName.clear();
    // 主控模块扩展输入
    inputModifyVarName[MAIN_VAR_X00] = nameCfg.value(curLan + QString("MAIN_VAR_X00"), "").toString();
    inputModifyVarName[MAIN_VAR_X01] = nameCfg.value(curLan + QString("MAIN_VAR_X01"), "").toString();
    inputModifyVarName[MAIN_VAR_X02] = nameCfg.value(curLan + QString("MAIN_VAR_X02"), "").toString();
    inputModifyVarName[MAIN_VAR_X03] = nameCfg.value(curLan + QString("MAIN_VAR_X03"), "").toString();
    inputModifyVarName[MAIN_VAR_X04] = nameCfg.value(curLan + QString("MAIN_VAR_X04"), "").toString();
    inputModifyVarName[MAIN_VAR_X05] = nameCfg.value(curLan + QString("MAIN_VAR_X05"), "").toString();
    inputModifyVarName[MAIN_VAR_X06] = nameCfg.value(curLan + QString("MAIN_VAR_X06"), "").toString();
    inputModifyVarName[MAIN_VAR_X07] = nameCfg.value(curLan + QString("MAIN_VAR_X07"), "").toString();
    inputModifyVarName[MAIN_VAR_X08] = nameCfg.value(curLan + QString("MAIN_VAR_X08"), "").toString();
    inputModifyVarName[MAIN_VAR_X09] = nameCfg.value(curLan + QString("MAIN_VAR_X09"), "").toString();
    inputModifyVarName[MAIN_VAR_X10] = nameCfg.value(curLan + QString("MAIN_VAR_X10"), "").toString();
    inputModifyVarName[MAIN_VAR_X11] = nameCfg.value(curLan + QString("MAIN_VAR_X11"), "").toString();
    inputModifyVarName[MAIN_VAR_X12] = nameCfg.value(curLan + QString("MAIN_VAR_X12"), ("")).toString();
    inputModifyVarName[MAIN_VAR_X13] = nameCfg.value(curLan + QString("MAIN_VAR_X13"), ("")).toString();
    inputModifyVarName[MAIN_VAR_X14] = nameCfg.value(curLan + QString("MAIN_VAR_X14"), ("")).toString();
    inputModifyVarName[MAIN_VAR_X15] = nameCfg.value(curLan + QString("MAIN_VAR_X15"), "").toString();
    //pyq在编辑端口页面显示
    inputModifyVarName[MAIN_VAR_X16] = nameCfg.value(curLan + QString("MAIN_VAR_X16"), "").toString();
    inputModifyVarName[MAIN_VAR_X17] = nameCfg.value(curLan + QString("MAIN_VAR_X17"), "").toString();
    inputModifyVarName[MAIN_VAR_X18] = nameCfg.value(curLan + QString("MAIN_VAR_X18"), "").toString();
    inputModifyVarName[MAIN_VAR_X19] = nameCfg.value(curLan + QString("MAIN_VAR_X19"), "").toString();
    inputModifyVarName[MAIN_VAR_X20] = nameCfg.value(curLan + QString("MAIN_VAR_X20"), "").toString();
    inputModifyVarName[MAIN_VAR_X21] = nameCfg.value(curLan + QString("MAIN_VAR_X21"), "").toString();
    inputModifyVarName[MAIN_VAR_X22] = nameCfg.value(curLan + QString("MAIN_VAR_X22"), "").toString();
    inputModifyVarName[MAIN_VAR_X23] = nameCfg.value(curLan + QString("MAIN_VAR_X23"), "").toString();
    inputModifyVarName[MAIN_VAR_X24] = nameCfg.value(curLan + QString("MAIN_VAR_X24"), "").toString();
    inputModifyVarName[MAIN_VAR_X25] = nameCfg.value(curLan + QString("MAIN_VAR_X25"), "").toString();
    inputModifyVarName[MAIN_VAR_X26] = nameCfg.value(curLan + QString("MAIN_VAR_X26"), "").toString();
    inputModifyVarName[MAIN_VAR_X27] = nameCfg.value(curLan + QString("MAIN_VAR_X27"), "").toString();
    // 扩展模块1扩展输入
    inputModifyVarName[EM1_VAR_X00] = nameCfg.value(curLan + QString("EM1_VAR_X00"), ("")).toString();
    inputModifyVarName[EM1_VAR_X01] = nameCfg.value(curLan + QString("EM1_VAR_X01"), ("")).toString();
    inputModifyVarName[EM1_VAR_X02] = nameCfg.value(curLan + QString("EM1_VAR_X02"), "").toString();
    inputModifyVarName[EM1_VAR_X03] = nameCfg.value(curLan + QString("EM1_VAR_X03"), "").toString();
    inputModifyVarName[EM1_VAR_X04] = nameCfg.value(curLan + QString("EM1_VAR_X04"), "").toString();
    inputModifyVarName[EM1_VAR_X05] = nameCfg.value(curLan + QString("EM1_VAR_X05"), "").toString();
    inputModifyVarName[EM1_VAR_X06] = nameCfg.value(curLan + QString("EM1_VAR_X06"), "").toString();
    inputModifyVarName[EM1_VAR_X07] = nameCfg.value(curLan + QString("EM1_VAR_X07"), "").toString();
    inputModifyVarName[EM1_VAR_X09] = nameCfg.value(curLan + QString("EM1_VAR_X09"), "").toString();
    inputModifyVarName[EM1_VAR_X08] = nameCfg.value(curLan + QString("EM1_VAR_X08"), "").toString();
    inputModifyVarName[EM1_VAR_X10] = nameCfg.value(curLan + QString("EM1_VAR_X10"), "").toString();
    inputModifyVarName[EM1_VAR_X11] = nameCfg.value(curLan + QString("EM1_VAR_X11"), "").toString();
    inputModifyVarName[EM1_VAR_X12] = nameCfg.value(curLan + QString("EM1_VAR_X12"), "").toString();
    inputModifyVarName[EM1_VAR_X13] = nameCfg.value(curLan + QString("EM1_VAR_X13"), "").toString();
    inputModifyVarName[EM1_VAR_X14] = nameCfg.value(curLan + QString("EM1_VAR_X14"), "").toString();
    inputModifyVarName[EM1_VAR_X15] = nameCfg.value(curLan + QString("EM1_VAR_X15"), "").toString();
//    // 扩展模块2扩展输入
    inputModifyVarName[EM2_VAR_X00] = nameCfg.value(curLan + QString("EM2_VAR_X00"), "").toString();
    inputModifyVarName[EM2_VAR_X01] = nameCfg.value(curLan + QString("EM2_VAR_X01"), "").toString();
    inputModifyVarName[EM2_VAR_X02] = nameCfg.value(curLan + QString("EM2_VAR_X02"), "").toString();
    inputModifyVarName[EM2_VAR_X03] = nameCfg.value(curLan + QString("EM2_VAR_X03"), "").toString();
    inputModifyVarName[EM2_VAR_X04] = nameCfg.value(curLan + QString("EM2_VAR_X04"), "").toString();
    inputModifyVarName[EM2_VAR_X05] = nameCfg.value(curLan + QString("EM2_VAR_X05"), "").toString();
    inputModifyVarName[EM2_VAR_X06] = nameCfg.value(curLan + QString("EM2_VAR_X06"), "").toString();
    inputModifyVarName[EM2_VAR_X07] = nameCfg.value(curLan + QString("EM2_VAR_X07"), "").toString();
    inputModifyVarName[EM2_VAR_X08] = nameCfg.value(curLan + QString("EM2_VAR_X08"), "").toString();
    inputModifyVarName[EM2_VAR_X09] = nameCfg.value(curLan + QString("EM2_VAR_X09"), "").toString();
    inputModifyVarName[EM2_VAR_X10] = nameCfg.value(curLan + QString("EM2_VAR_X10"), "").toString();
    inputModifyVarName[EM2_VAR_X11] = nameCfg.value(curLan + QString("EM2_VAR_X11"), "").toString();
    inputModifyVarName[EM2_VAR_X12] = nameCfg.value(curLan + QString("EM2_VAR_X12"), "").toString();
    inputModifyVarName[EM2_VAR_X13] = nameCfg.value(curLan + QString("EM2_VAR_X13"), "").toString();
    inputModifyVarName[EM2_VAR_X14] = nameCfg.value(curLan + QString("EM2_VAR_X14"), "").toString();
    inputModifyVarName[EM2_VAR_X15] = nameCfg.value(curLan + QString("EM2_VAR_X15"), "").toString();
//    // 扩展模块3扩展输入
    inputModifyVarName[EM3_VAR_X00] = nameCfg.value(curLan + QString("EM3_VAR_X00"), "").toString();
    inputModifyVarName[EM3_VAR_X01] = nameCfg.value(curLan + QString("EM3_VAR_X01"), "").toString();
    inputModifyVarName[EM3_VAR_X02] = nameCfg.value(curLan + QString("EM3_VAR_X02"), "").toString();
    inputModifyVarName[EM3_VAR_X03] = nameCfg.value(curLan + QString("EM3_VAR_X03"), "").toString();
    inputModifyVarName[EM3_VAR_X04] = nameCfg.value(curLan + QString("EM3_VAR_X04"), "").toString();
    inputModifyVarName[EM3_VAR_X05] = nameCfg.value(curLan + QString("EM3_VAR_X05"), "").toString();
    inputModifyVarName[EM3_VAR_X06] = nameCfg.value(curLan + QString("EM3_VAR_X06"), "").toString();
    inputModifyVarName[EM3_VAR_X07] = nameCfg.value(curLan + QString("EM3_VAR_X07"), "").toString();
    inputModifyVarName[EM3_VAR_X08] = nameCfg.value(curLan + QString("EM3_VAR_X08"), "").toString();
    inputModifyVarName[EM3_VAR_X09] = nameCfg.value(curLan + QString("EM3_VAR_X09"), "").toString();
    inputModifyVarName[EM3_VAR_X10] = nameCfg.value(curLan + QString("EM3_VAR_X10"), "").toString();
    inputModifyVarName[EM3_VAR_X11] = nameCfg.value(curLan + QString("EM3_VAR_X11"), "").toString();
    inputModifyVarName[EM3_VAR_X12] = nameCfg.value(curLan + QString("EM3_VAR_X12"), "").toString();
    inputModifyVarName[EM3_VAR_X13] = nameCfg.value(curLan + QString("EM3_VAR_X13"), "").toString();
    inputModifyVarName[EM3_VAR_X14] = nameCfg.value(curLan + QString("EM3_VAR_X14"), "").toString();
    inputModifyVarName[EM3_VAR_X15] = nameCfg.value(curLan + QString("EM3_VAR_X15"), "").toString();
//    // 扩展模块4扩展输入
    inputModifyVarName[EM4_VAR_X00] = nameCfg.value(curLan + QString("EM4_VAR_X00"), "").toString();
    inputModifyVarName[EM4_VAR_X01] = nameCfg.value(curLan + QString("EM4_VAR_X01"), "").toString();
    inputModifyVarName[EM4_VAR_X02] = nameCfg.value(curLan + QString("EM4_VAR_X02"), "").toString();
    inputModifyVarName[EM4_VAR_X03] = nameCfg.value(curLan + QString("EM4_VAR_X03"), "").toString();
    inputModifyVarName[EM4_VAR_X04] = nameCfg.value(curLan + QString("EM4_VAR_X04"), "").toString();
    inputModifyVarName[EM4_VAR_X05] = nameCfg.value(curLan + QString("EM4_VAR_X05"), "").toString();
    inputModifyVarName[EM4_VAR_X06] = nameCfg.value(curLan + QString("EM4_VAR_X06"), "").toString();
    inputModifyVarName[EM4_VAR_X07] = nameCfg.value(curLan + QString("EM4_VAR_X07"), "").toString();
    inputModifyVarName[EM4_VAR_X08] = nameCfg.value(curLan + QString("EM4_VAR_X08"), "").toString();
    inputModifyVarName[EM4_VAR_X09] = nameCfg.value(curLan + QString("EM4_VAR_X09"), "").toString();
    inputModifyVarName[EM4_VAR_X10] = nameCfg.value(curLan + QString("EM4_VAR_X10"), "").toString();
    inputModifyVarName[EM4_VAR_X11] = nameCfg.value(curLan + QString("EM4_VAR_X11"), "").toString();
    inputModifyVarName[EM4_VAR_X12] = nameCfg.value(curLan + QString("EM4_VAR_X12"), "").toString();
    inputModifyVarName[EM4_VAR_X13] = nameCfg.value(curLan + QString("EM4_VAR_X13"), "").toString();
    inputModifyVarName[EM4_VAR_X14] = nameCfg.value(curLan + QString("EM4_VAR_X14"), "").toString();
    inputModifyVarName[EM4_VAR_X15] = nameCfg.value(curLan + QString("EM4_VAR_X15"), "").toString();
//    // 初始化注塑机输入
    inputModifyVarName[IMM_VAR_IN_MOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_MOP"), ("")).toString();
    inputModifyVarName[IMM_VAR_IN_SAFE] = nameCfg.value(curLan + QString("IMM_VAR_IN_SAFE"), ("")).toString();
    inputModifyVarName[IMM_VAR_IN_MCP] = nameCfg.value(curLan + QString("IMM_VAR_IN_MCP"), ("")).toString();
    inputModifyVarName[IMM_VAR_IN_STOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_STOP"), ("")).toString();
    inputModifyVarName[IMM_VAR_IN_REJECT] = nameCfg.value(curLan + QString("IMM_VAR_IN_REJECT"), ("")).toString();
    inputModifyVarName[IMM_VAR_IN_IMOP] = nameCfg.value(curLan + QString("IMM_VAR_IN_IMOP"), ("")).toString();
    inputModifyVarName[IMM_VAR_IN_AUTO] = nameCfg.value(curLan + QString("IMM_VAR_IN_AUTO"), ("")).toString();
    inputModifyVarName[IMM_VAR_IN_EBP] = nameCfg.value(curLan + QString("IMM_VAR_IN_EBP"), ("")).toString();
    inputModifyVarName[IMM_VAR_IN_EFP] = nameCfg.value(curLan + QString("IMM_VAR_IN_EFP"), ("")).toString();
    inputModifyVarName[IMM_VAR_IN_MID] = nameCfg.value(curLan + QString("IMM_VAR_IN_MID"), ("")).toString();

    inputModifyVarName[IMM_VAR_IN_C1P1] = nameCfg.value(curLan + QString("IMM_VAR_IN_C1P1"), ("")).toString();
    inputModifyVarName[IMM_VAR_IN_C1P2] = nameCfg.value(curLan + QString("IMM_VAR_IN_C1P2"), ("")).toString();
    inputModifyVarName[IMM_VAR_IN_C2P1] = nameCfg.value(curLan + QString("IMM_VAR_IN_C2P1"), ("")).toString();
    inputModifyVarName[IMM_VAR_IN_C2P2] = nameCfg.value(curLan + QString("IMM_VAR_IN_C2P2"), ("")).toString();


/*    // 正臂上下伺服输入
    inputModifyVarName[SV_VAR_IN_YHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_YHOME"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_YCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_YCCWL"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_YCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_YCWL"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_YALM] = nameCfg.value(curLan + QString("SV_VAR_IN_YALM"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_YRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_YRDY"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_YINP] = nameCfg.value(curLan + QString("SV_VAR_IN_YINP"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_YWPOS] = nameCfg.value(curLan + QString("SV_VAR_IN_YWPOS"), tr("")).toString();
    // 副臂上下伺服输入
    inputModifyVarName[SV_VAR_IN_AHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_AHOME"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_ACCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ACCWL"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_ACWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ACWL"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_AALM] = nameCfg.value(curLan + QString("SV_VAR_IN_AALM"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_ARDY] = nameCfg.value(curLan + QString("SV_VAR_IN_ARDY"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_AINP] = nameCfg.value(curLan + QString("SV_VAR_IN_AINP"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_AWPOS] = nameCfg.value(curLan + QString("SV_VAR_IN_AWPOS"), tr("")).toString();
    // 正臂引拔伺服输入
    inputModifyVarName[SV_VAR_IN_XHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_XHOME"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_XCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_XCCWL"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_XCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_XCWL"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_XALM] = nameCfg.value(curLan + QString("SV_VAR_IN_XALM"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_XRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_XRDY"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_XINP] = nameCfg.value(curLan + QString("SV_VAR_IN_XINP"), tr("")).toString();
    // 副臂引拔伺服输入
    inputModifyVarName[SV_VAR_IN_BHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_BHOME"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_BCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_BCCWL"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_BCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_BCWL"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_BALM] = nameCfg.value(curLan + QString("SV_VAR_IN_BALM"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_BRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_BRDY"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_BINP] = nameCfg.value(curLan + QString("SV_VAR_IN_BINP"), tr("")).toString();
    // 横行伺服输入
    inputModifyVarName[SV_VAR_IN_ZHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_ZHOME"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_ZCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ZCCWL"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_ZCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_ZCWL"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_ZALM] = nameCfg.value(curLan + QString("SV_VAR_IN_ZALM"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_ZRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_ZRDY"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_ZINP] = nameCfg.value(curLan + QString("SV_VAR_IN_ZINP"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_INMOLD] = nameCfg.value(curLan + QString("SV_VAR_IN_INMOLD"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_OUTMOLD] = nameCfg.value(curLan + QString("SV_VAR_IN_OUTMOLD"), tr("")).toString();
    // 扩展伺服输入
    inputModifyVarName[SV_VAR_IN_CHOME] = nameCfg.value(curLan + QString("SV_VAR_IN_CHOME"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_CCCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_CCCWL"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_CCWL] = nameCfg.value(curLan + QString("SV_VAR_IN_CCWL"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_CALM] = nameCfg.value(curLan + QString("SV_VAR_IN_CALM"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_CRDY] = nameCfg.value(curLan + QString("SV_VAR_IN_CRDY"), tr("")).toString();
    inputModifyVarName[SV_VAR_IN_CINP] = nameCfg.value(curLan + QString("SV_VAR_IN_CINP"), tr("")).toString();*/
    // 机械手输入
    inputModifyVarName[RBT_VAR_IN_LOW_AIR] = nameCfg.value(curLan + QString("RBT_VAR_IN_LOW_AIR"), ("")).toString();
    inputModifyVarName[RBT_VAR_IN_DWN_SAF] = nameCfg.value(curLan + QString("RBT_VAR_IN_DWN_SAF"), ("")).toString();
    inputModifyVarName[RBT_VAR_IN_ARM_SAF] = nameCfg.value(curLan + QString("RBT_VAR_IN_ARM_SAF"), ("")).toString();
    inputModifyVarName[RBT_VAR_IN_PRO_HOR] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_HOR"), ("")).toString();
    inputModifyVarName[RBT_VAR_IN_PRO_VER] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_VER"), ("")).toString();
    inputModifyVarName[RBT_VAR_IN_RUN_HOR] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_HOR"), ("")).toString();
    inputModifyVarName[RBT_VAR_IN_RUN_VER] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_VER"), ("")).toString();
    inputModifyVarName[RBT_VAR_IN_RUN_ASC] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_ASC"), ("")).toString();
    inputModifyVarName[RBT_VAR_IN_RUN_DES] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_DES"), ("")).toString();
    inputModifyVarName[RBT_VAR_IN_PRO_ADV] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_ADV"), ("")).toString();
    inputModifyVarName[RBT_VAR_IN_PRO_RET] = nameCfg.value(curLan + QString("RBT_VAR_IN_PRO_RET"), ("")).toString();
    inputModifyVarName[RBT_VAR_IN_RUN_ADV] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_ADV"), ("")).toString();
    inputModifyVarName[RBT_VAR_IN_RUN_RET] = nameCfg.value(curLan + QString("RBT_VAR_IN_RUN_RET"), ("")).toString();
    // *************************************************

    // 输出变量名称
    outputModifyVarName.clear();
    // 主控模块输出
    outputModifyVarName[MAIN_VAR_Y00] = nameCfg.value(curLan + QString("MAIN_VAR_Y00"), "").toString();
    outputModifyVarName[MAIN_VAR_Y01] = nameCfg.value(curLan + QString("MAIN_VAR_Y01"), "").toString();
    outputModifyVarName[MAIN_VAR_Y02] = nameCfg.value(curLan + QString("MAIN_VAR_Y02"), "").toString();
    outputModifyVarName[MAIN_VAR_Y03] = nameCfg.value(curLan + QString("MAIN_VAR_Y03"), "").toString();
    outputModifyVarName[MAIN_VAR_Y04] = nameCfg.value(curLan + QString("MAIN_VAR_Y04"), "").toString();
    outputModifyVarName[MAIN_VAR_Y05] = nameCfg.value(curLan + QString("MAIN_VAR_Y05"), "").toString();
    outputModifyVarName[MAIN_VAR_Y06] = nameCfg.value(curLan + QString("MAIN_VAR_Y06"), "").toString();
    outputModifyVarName[MAIN_VAR_Y07] = nameCfg.value(curLan + QString("MAIN_VAR_Y07"), "").toString();
    outputModifyVarName[MAIN_VAR_Y08] = nameCfg.value(curLan + QString("MAIN_VAR_Y08"), "").toString();
    outputModifyVarName[MAIN_VAR_Y09] = nameCfg.value(curLan + QString("MAIN_VAR_Y09"), "").toString();
    outputModifyVarName[MAIN_VAR_Y10] = nameCfg.value(curLan + QString("MAIN_VAR_Y10"), "").toString();
    outputModifyVarName[MAIN_VAR_Y11] = nameCfg.value(curLan + QString("MAIN_VAR_Y11"), "").toString();
    if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_E0)
    {
        outputModifyVarName[MAIN_VAR_Y12] = nameCfg.value(curLan + QString("MAIN_VAR_Y12"), ("")).toString();
        outputModifyVarName[MAIN_VAR_Y13] = nameCfg.value(curLan + QString("MAIN_VAR_Y13"), ("")).toString();
        outputModifyVarName[MAIN_VAR_Y14] = nameCfg.value(curLan + QString("MAIN_VAR_Y14"), ("")).toString();
    }
    else
    {
        outputModifyVarName[MAIN_VAR_Y12] = nameCfg.value(curLan + QString("MAIN_VAR_Y12"), "").toString();
        outputModifyVarName[MAIN_VAR_Y13] = nameCfg.value(curLan + QString("MAIN_VAR_Y13"), "").toString();
        outputModifyVarName[MAIN_VAR_Y14] = nameCfg.value(curLan + QString("MAIN_VAR_Y14"), "").toString();
    }
    outputModifyVarName[MAIN_VAR_Y15] = nameCfg.value(curLan + QString("MAIN_VAR_Y15"), "").toString();
    //pyq在编辑端口页面显示
    outputModifyVarName[MAIN_VAR_Y16] = nameCfg.value(curLan + QString("MAIN_VAR_Y16"), "").toString();
    outputModifyVarName[MAIN_VAR_Y17] = nameCfg.value(curLan + QString("MAIN_VAR_Y17"), "").toString();
    outputModifyVarName[MAIN_VAR_Y18] = nameCfg.value(curLan + QString("MAIN_VAR_Y18"), "").toString();
    outputModifyVarName[MAIN_VAR_Y19] = nameCfg.value(curLan + QString("MAIN_VAR_Y19"), "").toString();
    outputModifyVarName[MAIN_VAR_Y20] = nameCfg.value(curLan + QString("MAIN_VAR_Y20"), "").toString();
    outputModifyVarName[MAIN_VAR_Y21] = nameCfg.value(curLan + QString("MAIN_VAR_Y21"), "").toString();
    outputModifyVarName[MAIN_VAR_Y22] = nameCfg.value(curLan + QString("MAIN_VAR_Y22"), "").toString();
    outputModifyVarName[MAIN_VAR_Y23] = nameCfg.value(curLan + QString("MAIN_VAR_Y23"), "").toString();
    outputModifyVarName[MAIN_VAR_Y24] = nameCfg.value(curLan + QString("MAIN_VAR_Y24"), "").toString();
    outputModifyVarName[MAIN_VAR_Y25] = nameCfg.value(curLan + QString("MAIN_VAR_Y25"), "").toString();
    outputModifyVarName[MAIN_VAR_Y26] = nameCfg.value(curLan + QString("MAIN_VAR_Y26"), "").toString();
    outputModifyVarName[MAIN_VAR_Y27] = nameCfg.value(curLan + QString("MAIN_VAR_Y27"), "").toString();
    outputModifyVarName[MAIN_VAR_Y28] = nameCfg.value(curLan + QString("MAIN_VAR_Y28"), "").toString();
    if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_YZ)
    {
        outputModifyVarName[EM1_VAR_Y00] = nameCfg.value(curLan + QString("EM1_VAR_Y00"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y01] = nameCfg.value(curLan + QString("EM1_VAR_Y01"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y02] = nameCfg.value(curLan + QString("EM1_VAR_Y02"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y03] = nameCfg.value(curLan + QString("EM1_VAR_Y03"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y04] = nameCfg.value(curLan + QString("EM1_VAR_Y04"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y05] = nameCfg.value(curLan + QString("EM1_VAR_Y05"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y06] = nameCfg.value(curLan + QString("EM1_VAR_Y06"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y07] = nameCfg.value(curLan + QString("EM1_VAR_Y07"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y08] = nameCfg.value(curLan + QString("EM1_VAR_Y08"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y09] = nameCfg.value(curLan + QString("EM1_VAR_Y09"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y10] = nameCfg.value(curLan + QString("EM1_VAR_Y10"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y11] = nameCfg.value(curLan + QString("EM1_VAR_Y11"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y12] = nameCfg.value(curLan + QString("EM1_VAR_Y12"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y13] = nameCfg.value(curLan + QString("EM1_VAR_Y13"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y14] = nameCfg.value(curLan + QString("EM1_VAR_Y14"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y15] = nameCfg.value(curLan + QString("EM1_VAR_Y15"), ("")).toString();
        // 扩展模块2扩展输出
        outputModifyVarName[EM2_VAR_Y00] = nameCfg.value(curLan + QString("EM2_VAR_Y00"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y01] = nameCfg.value(curLan + QString("EM2_VAR_Y01"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y02] = nameCfg.value(curLan + QString("EM2_VAR_Y02"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y03] = nameCfg.value(curLan + QString("EM2_VAR_Y03"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y04] = nameCfg.value(curLan + QString("EM2_VAR_Y04"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y05] = nameCfg.value(curLan + QString("EM2_VAR_Y05"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y06] = nameCfg.value(curLan + QString("EM2_VAR_Y06"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y07] = nameCfg.value(curLan + QString("EM2_VAR_Y07"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y08] = nameCfg.value(curLan + QString("EM2_VAR_Y08"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y09] = nameCfg.value(curLan + QString("EM2_VAR_Y09"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y10] = nameCfg.value(curLan + QString("EM2_VAR_Y10"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y11] = nameCfg.value(curLan + QString("EM2_VAR_Y11"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y12] = nameCfg.value(curLan + QString("EM2_VAR_Y12"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y13] = nameCfg.value(curLan + QString("EM2_VAR_Y13"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y14] = nameCfg.value(curLan + QString("EM2_VAR_Y14"), ("")).toString();
        outputModifyVarName[EM2_VAR_Y15] = nameCfg.value(curLan + QString("EM2_VAR_Y15"), ("")).toString();
    }
    else
    {
        outputModifyVarName[EM1_VAR_Y00] = nameCfg.value(curLan + QString("EM1_VAR_Y00"), ("")).toString();
        outputModifyVarName[EM1_VAR_Y01] = nameCfg.value(curLan + QString("EM1_VAR_Y01"), ("")).toString();
        if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_E0)
        {
            outputModifyVarName[EM1_VAR_Y02] = nameCfg.value(curLan + QString("EM1_VAR_Y02"), "").toString();
            outputModifyVarName[EM1_VAR_Y03] = nameCfg.value(curLan + QString("EM1_VAR_Y03"), "").toString();
            outputModifyVarName[EM1_VAR_Y04] = nameCfg.value(curLan + QString("EM1_VAR_Y04"), "").toString();
            outputModifyVarName[EM1_VAR_Y05] = nameCfg.value(curLan + QString("EM1_VAR_Y05"), "").toString();
            outputModifyVarName[EM1_VAR_Y06] = nameCfg.value(curLan + QString("EM1_VAR_Y06"), "").toString();
            outputModifyVarName[EM1_VAR_Y07] = nameCfg.value(curLan + QString("EM1_VAR_Y07"), "").toString();
        }
        else
        {
            outputModifyVarName[EM1_VAR_Y02] = nameCfg.value(curLan + QString("EM1_VAR_Y02"), ("")).toString();
            outputModifyVarName[EM1_VAR_Y03] = nameCfg.value(curLan + QString("EM1_VAR_Y03"), ("")).toString();
            outputModifyVarName[EM1_VAR_Y04] = nameCfg.value(curLan + QString("EM1_VAR_Y04"), ("")).toString();
            outputModifyVarName[EM1_VAR_Y05] = nameCfg.value(curLan + QString("EM1_VAR_Y05"), ("")).toString();
            outputModifyVarName[EM1_VAR_Y06] = nameCfg.value(curLan + QString("EM1_VAR_Y06"), ("")).toString();
            outputModifyVarName[EM1_VAR_Y07] = nameCfg.value(curLan + QString("EM1_VAR_Y07"), ("")).toString();
        }
        outputModifyVarName[EM1_VAR_Y08] = nameCfg.value(curLan + QString("EM1_VAR_Y08"), "").toString();
        outputModifyVarName[EM1_VAR_Y09] = nameCfg.value(curLan + QString("EM1_VAR_Y09"), "").toString();
        outputModifyVarName[EM1_VAR_Y10] = nameCfg.value(curLan + QString("EM1_VAR_Y10"), "").toString();
        outputModifyVarName[EM1_VAR_Y11] = nameCfg.value(curLan + QString("EM1_VAR_Y11"), "").toString();
        outputModifyVarName[EM1_VAR_Y12] = nameCfg.value(curLan + QString("EM1_VAR_Y12"), "").toString();
        outputModifyVarName[EM1_VAR_Y13] = nameCfg.value(curLan + QString("EM1_VAR_Y13"), "").toString();
        outputModifyVarName[EM1_VAR_Y14] = nameCfg.value(curLan + QString("EM1_VAR_Y14"), "").toString();
        outputModifyVarName[EM1_VAR_Y15] = nameCfg.value(curLan + QString("EM1_VAR_Y15"), "").toString();
        // 扩展模块2扩展输出
        outputModifyVarName[EM2_VAR_Y00] = nameCfg.value(curLan + QString("EM2_VAR_Y00"), "").toString();
        outputModifyVarName[EM2_VAR_Y01] = nameCfg.value(curLan + QString("EM2_VAR_Y01"), "").toString();
        outputModifyVarName[EM2_VAR_Y02] = nameCfg.value(curLan + QString("EM2_VAR_Y02"), "").toString();
        outputModifyVarName[EM2_VAR_Y03] = nameCfg.value(curLan + QString("EM2_VAR_Y03"), "").toString();
        outputModifyVarName[EM2_VAR_Y04] = nameCfg.value(curLan + QString("EM2_VAR_Y04"), "").toString();
        outputModifyVarName[EM2_VAR_Y05] = nameCfg.value(curLan + QString("EM2_VAR_Y05"), "").toString();
        outputModifyVarName[EM2_VAR_Y06] = nameCfg.value(curLan + QString("EM2_VAR_Y06"), "").toString();
        outputModifyVarName[EM2_VAR_Y07] = nameCfg.value(curLan + QString("EM2_VAR_Y07"), "").toString();
        outputModifyVarName[EM2_VAR_Y08] = nameCfg.value(curLan + QString("EM2_VAR_Y08"), "").toString();
        outputModifyVarName[EM2_VAR_Y09] = nameCfg.value(curLan + QString("EM2_VAR_Y09"), "").toString();
        outputModifyVarName[EM2_VAR_Y10] = nameCfg.value(curLan + QString("EM2_VAR_Y10"), "").toString();
        outputModifyVarName[EM2_VAR_Y11] = nameCfg.value(curLan + QString("EM2_VAR_Y11"), "").toString();
        outputModifyVarName[EM2_VAR_Y12] = nameCfg.value(curLan + QString("EM2_VAR_Y12"), "").toString();
        outputModifyVarName[EM2_VAR_Y13] = nameCfg.value(curLan + QString("EM2_VAR_Y13"), "").toString();
        outputModifyVarName[EM2_VAR_Y14] = nameCfg.value(curLan + QString("EM2_VAR_Y14"), "").toString();
        outputModifyVarName[EM2_VAR_Y15] = nameCfg.value(curLan + QString("EM2_VAR_Y15"), "").toString();
    }
    // 扩展模块3扩展输出
    outputModifyVarName[EM3_VAR_Y00] = nameCfg.value(curLan + QString("EM3_VAR_Y00"), "").toString();
    outputModifyVarName[EM3_VAR_Y01] = nameCfg.value(curLan + QString("EM3_VAR_Y01"), "").toString();
    outputModifyVarName[EM3_VAR_Y02] = nameCfg.value(curLan + QString("EM3_VAR_Y02"), "").toString();
    outputModifyVarName[EM3_VAR_Y03] = nameCfg.value(curLan + QString("EM3_VAR_Y03"), "").toString();
    outputModifyVarName[EM3_VAR_Y04] = nameCfg.value(curLan + QString("EM3_VAR_Y04"), "").toString();
    outputModifyVarName[EM3_VAR_Y05] = nameCfg.value(curLan + QString("EM3_VAR_Y05"), "").toString();
    outputModifyVarName[EM3_VAR_Y06] = nameCfg.value(curLan + QString("EM3_VAR_Y06"), "").toString();
    outputModifyVarName[EM3_VAR_Y07] = nameCfg.value(curLan + QString("EM3_VAR_Y07"), "").toString();
    outputModifyVarName[EM3_VAR_Y08] = nameCfg.value(curLan + QString("EM3_VAR_Y08"), "").toString();
    outputModifyVarName[EM3_VAR_Y09] = nameCfg.value(curLan + QString("EM3_VAR_Y09"), "").toString();
    outputModifyVarName[EM3_VAR_Y10] = nameCfg.value(curLan + QString("EM3_VAR_Y10"), "").toString();
    outputModifyVarName[EM3_VAR_Y11] = nameCfg.value(curLan + QString("EM3_VAR_Y11"), "").toString();
    outputModifyVarName[EM3_VAR_Y12] = nameCfg.value(curLan + QString("EM3_VAR_Y12"), "").toString();
    outputModifyVarName[EM3_VAR_Y13] = nameCfg.value(curLan + QString("EM3_VAR_Y13"), "").toString();
    outputModifyVarName[EM3_VAR_Y14] = nameCfg.value(curLan + QString("EM3_VAR_Y14"), "").toString();
    outputModifyVarName[EM3_VAR_Y15] = nameCfg.value(curLan + QString("EM3_VAR_Y15"), "").toString();
    // 扩展模块4扩展输出
    outputModifyVarName[EM4_VAR_Y00] = nameCfg.value(curLan + QString("EM4_VAR_Y00"), "").toString();
    outputModifyVarName[EM4_VAR_Y01] = nameCfg.value(curLan + QString("EM4_VAR_Y01"), "").toString();
    outputModifyVarName[EM4_VAR_Y02] = nameCfg.value(curLan + QString("EM4_VAR_Y02"), "").toString();
    outputModifyVarName[EM4_VAR_Y03] = nameCfg.value(curLan + QString("EM4_VAR_Y03"), "").toString();
    outputModifyVarName[EM4_VAR_Y04] = nameCfg.value(curLan + QString("EM4_VAR_Y04"), "").toString();
    outputModifyVarName[EM4_VAR_Y05] = nameCfg.value(curLan + QString("EM4_VAR_Y05"), "").toString();
    outputModifyVarName[EM4_VAR_Y06] = nameCfg.value(curLan + QString("EM4_VAR_Y06"), "").toString();
    outputModifyVarName[EM4_VAR_Y07] = nameCfg.value(curLan + QString("EM4_VAR_Y07"), "").toString();
    outputModifyVarName[EM4_VAR_Y08] = nameCfg.value(curLan + QString("EM4_VAR_Y08"), "").toString();
    outputModifyVarName[EM4_VAR_Y09] = nameCfg.value(curLan + QString("EM4_VAR_Y09"), "").toString();
    outputModifyVarName[EM4_VAR_Y10] = nameCfg.value(curLan + QString("EM4_VAR_Y10"), "").toString();
    outputModifyVarName[EM4_VAR_Y11] = nameCfg.value(curLan + QString("EM4_VAR_Y11"), "").toString();
    outputModifyVarName[EM4_VAR_Y12] = nameCfg.value(curLan + QString("EM4_VAR_Y12"), "").toString();
    outputModifyVarName[EM4_VAR_Y13] = nameCfg.value(curLan + QString("EM4_VAR_Y13"), "").toString();
    outputModifyVarName[EM4_VAR_Y14] = nameCfg.value(curLan + QString("EM4_VAR_Y14"), "").toString();
    outputModifyVarName[EM4_VAR_Y15] = nameCfg.value(curLan + QString("EM4_VAR_Y15"), "").toString();
    // 注塑机输出
    outputModifyVarName[IMM_VAR_OUT_EMC] = nameCfg.value(curLan + QString("IMM_VAR_OUT_EMC"), ("")).toString();
    outputModifyVarName[IMM_VAR_OUT_EMO] = nameCfg.value(curLan + QString("IMM_VAR_OUT_EMO"), ("")).toString();
    outputModifyVarName[IMM_VAR_OUT_MAF] = nameCfg.value(curLan + QString("IMM_VAR_OUT_MAF"), ("")).toString();
    outputModifyVarName[IMM_VAR_OUT_RBT] = nameCfg.value(curLan + QString("IMM_VAR_OUT_RBT"), ("")).toString();
    outputModifyVarName[IMM_VAR_OUT_EEB] = nameCfg.value(curLan + QString("IMM_VAR_OUT_EEB"), ("")).toString();
    outputModifyVarName[IMM_VAR_OUT_EEF] = nameCfg.value(curLan + QString("IMM_VAR_OUT_EEF"), ("")).toString();
    outputModifyVarName[IMM_VAR_OUT_C1P1] = nameCfg.value(curLan + QString("IMM_VAR_OUT_C1P1"), ("")).toString();
    outputModifyVarName[IMM_VAR_OUT_C1P2] = nameCfg.value(curLan + QString("IMM_VAR_OUT_C1P2"), ("")).toString();
    outputModifyVarName[IMM_VAR_OUT_C2P1] = nameCfg.value(curLan + QString("IMM_VAR_OUT_C2P1"), ("")).toString();
    outputModifyVarName[IMM_VAR_OUT_C2P2] = nameCfg.value(curLan + QString("IMM_VAR_OUT_C2P2"), ("")).toString();
    outputModifyVarName[IMM_VAR_OUT_HMAF] = nameCfg.value(curLan + QString("IMM_VAR_OUT_HMAF"), ("")).toString();
    outputModifyVarName[IMM_VAR_OUT_HEMC] = nameCfg.value(curLan + QString("IMM_VAR_OUT_HEMC"), ("")).toString();
/*    // 伺服系统输出
#if ((FACTORY == FA_KEWEI) || (FACTORY == FA_KEHAO) || (FACTORY == FA_WOERDA) || (FACTORY == FA_ZHENJIE))
    outputModifyVarName[SV_VAR_OUT_YSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_YSON"), tr("取件Z1使能", "翻译时无论什么语言一律使用(中文除外): S-PAV.ON")).toString();
    outputModifyVarName[SV_VAR_OUT_XSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_XSON"), tr("前后Y使能", "翻译时无论什么语言一律使用(中文除外): S-PAH.ON")).toString();
    outputModifyVarName[SV_VAR_OUT_ZSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ZSON"), tr("横行X使能", "翻译时无论什么语言一律使用(中文除外): S-TRV.ON")).toString();
    outputModifyVarName[SV_VAR_OUT_ASON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ASON"), tr("喷雾Z2使能", "翻译时无论什么语言一律使用(中文除外): S-RAV.ON")).toString();
    outputModifyVarName[SV_VAR_OUT_BSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_BSON"), tr("保留使能", "翻译时无论什么语言一律使用(中文除外): S-RAH.ON")).toString();
    outputModifyVarName[SV_VAR_OUT_CSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_CSON"), tr("扩展使能", "翻译时无论什么语言一律使用(中文除外): S-EXT.ON")).toString();
#elif (FACTORY == FA_YIDAO)
    outputModifyVarName[SV_VAR_OUT_YSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_YSON"), tr("上下使能", "翻译时无论什么语言一律使用(中文除外): S-PAV.ON")).toString();
    outputModifyVarName[SV_VAR_OUT_XSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_XSON"), tr("引拔使能", "翻译时无论什么语言一律使用(中文除外): S-PAH.ON")).toString();
    outputModifyVarName[SV_VAR_OUT_ZSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ZSON"), tr("横行使能", "翻译时无论什么语言一律使用(中文除外): S-TRV.ON")).toString();
    outputModifyVarName[SV_VAR_OUT_ASON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ASON"), tr("上下2使能", "翻译时无论什么语言一律使用(中文除外): S-RAV.ON")).toString();
    outputModifyVarName[SV_VAR_OUT_BSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_BSON"), tr("引拔2使能", "翻译时无论什么语言一律使用(中文除外): S-RAH.ON")).toString();
    outputModifyVarName[SV_VAR_OUT_CSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_CSON"), tr("扩展使能", "翻译时无论什么语言一律使用(中文除外): S-EXT.ON")).toString();
#else
    if (CMBProtocol::GetSysType() == ROBOTARM_TYPE_SIXSV_PAD_YZ)
    {
        outputModifyVarName[SV_VAR_OUT_YSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_YSON"), tr("取件Z1使能", "翻译时无论什么语言一律使用(中文除外): S-PAV.ON")).toString();
        outputModifyVarName[SV_VAR_OUT_XSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_XSON"), tr("前后Y使能", "翻译时无论什么语言一律使用(中文除外): S-PAH.ON")).toString();
        outputModifyVarName[SV_VAR_OUT_ZSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ZSON"), tr("横行X使能", "翻译时无论什么语言一律使用(中文除外): S-TRV.ON")).toString();
        outputModifyVarName[SV_VAR_OUT_ASON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ASON"), tr("喷雾Z2使能", "翻译时无论什么语言一律使用(中文除外): S-RAV.ON")).toString();
        outputModifyVarName[SV_VAR_OUT_BSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_BSON"), tr("保留使能", "翻译时无论什么语言一律使用(中文除外): S-RAH.ON")).toString();
        outputModifyVarName[SV_VAR_OUT_CSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_CSON"), tr("扩展使能", "翻译时无论什么语言一律使用(中文除外): S-EXT.ON")).toString();
    }
    else
    {
        outputModifyVarName[SV_VAR_OUT_YSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_YSON"), tr("正臂上下使能", "翻译时无论什么语言一律使用(中文除外): S-PAV.ON")).toString();
        outputModifyVarName[SV_VAR_OUT_XSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_XSON"), tr("正臂引拔使能", "翻译时无论什么语言一律使用(中文除外): S-PAH.ON")).toString();
        outputModifyVarName[SV_VAR_OUT_ZSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ZSON"), tr("横行使能", "翻译时无论什么语言一律使用(中文除外): S-TRV.ON")).toString();
        outputModifyVarName[SV_VAR_OUT_ASON] = nameCfg.value(curLan + QString("SV_VAR_OUT_ASON"), tr("副臂上下使能", "翻译时无论什么语言一律使用(中文除外): S-RAV.ON")).toString();
        outputModifyVarName[SV_VAR_OUT_BSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_BSON"), tr("副臂引拔使能", "翻译时无论什么语言一律使用(中文除外): S-RAH.ON")).toString();
        outputModifyVarName[SV_VAR_OUT_CSON] = nameCfg.value(curLan + QString("SV_VAR_OUT_CSON"), tr("扩展使能", "翻译时无论什么语言一律使用(中文除外): S-EXT.ON")).toString();
    }
#endif*/
    // 机械手输出
    outputModifyVarName[RBT_VAR_OUT_PRO_HOR] = nameCfg.value(curLan + QString("RBT_VAR_OUT_PRO_HOR"), ("")).toString();
    outputModifyVarName[RBT_VAR_OUT_PRO_VER] = nameCfg.value(curLan + QString("RBT_VAR_OUT_PRO_VER"), ("")).toString();
    outputModifyVarName[RBT_VAR_OUT_RUN_HOR] = nameCfg.value(curLan + QString("RBT_VAR_OUT_RUN_HOR"), ("")).toString();
    outputModifyVarName[RBT_VAR_OUT_RUN_VER] = nameCfg.value(curLan + QString("RBT_VAR_OUT_RUN_VER"), ("")).toString();
    outputModifyVarName[RBT_VAR_OUT_RUN_DES] = nameCfg.value(curLan + QString("RBT_VAR_OUT_RUN_DES"), ("")).toString();
    outputModifyVarName[RBT_VAR_OUT_RUN_SPEED] = nameCfg.value(curLan + QString("RBT_VAR_OUT_RUN_SPEED"), ("")).toString();
    outputModifyVarName[RBT_VAR_OUT_ALM_BEEP] = nameCfg.value(curLan + QString("RBT_VAR_OUT_ALM_BEEP"), ("")).toString();
    outputModifyVarName[RBT_VAR_OUT_ALM_LAMP] = nameCfg.value(curLan + QString("RBT_VAR_OUT_ALM_LAMP"), ("")).toString();
    outputModifyVarName[RBT_VAR_OUT_LAMP] = nameCfg.value(curLan + QString("RBT_VAR_OUT_LAMP"), ("")).toString();
    outputModifyVarName[RBT_VAR_OUT_PRO_ADV] = nameCfg.value(curLan + QString("RBT_VAR_OUT_PRO_ADV"), ("")).toString();
    outputModifyVarName[RBT_VAR_OUT_PRO_RET] = nameCfg.value(curLan + QString("RBT_VAR_OUT_PRO_RET"), ("")).toString();
    outputModifyVarName[RBT_VAR_OUT_RUN_ADV] = nameCfg.value(curLan + QString("RBT_VAR_OUT_RUN_ADV"), ("")).toString();
    outputModifyVarName[RBT_VAR_OUT_RUN_RET] = nameCfg.value(curLan + QString("RBT_VAR_OUT_RUN_RET"), ("")).toString();
    outputModifyVarName[RBT_VAR_OUT_OIL] = nameCfg.value(curLan + QString("RBT_VAR_OUT_OIL"), ("")).toString();
}
